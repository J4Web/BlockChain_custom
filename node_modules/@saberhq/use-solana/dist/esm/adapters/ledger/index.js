import { __awaiter } from "tslib";
import TransportWebUSB from "@ledgerhq/hw-transport-webusb";
import EventEmitter from "eventemitter3";
import { getPublicKey, getSolanaDerivationPath, signTransaction } from "./core";
const DEFAULT_DERIVATION_PATH = getSolanaDerivationPath();
export class LedgerWalletAdapter extends EventEmitter {
    constructor() {
        super();
        this._connecting = false;
        this._publicKey = null;
        this._transport = null;
        this._derivationPath = DEFAULT_DERIVATION_PATH;
    }
    get publicKey() {
        var _a;
        return (_a = this._publicKey) !== null && _a !== void 0 ? _a : null;
    }
    get connected() {
        return this._publicKey !== null;
    }
    get autoApprove() {
        return false;
    }
    signAllTransactions(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            for (let i = 0; i < transactions.length; i++) {
                const transaction = transactions[i];
                if (transaction) {
                    const signed = yield this.signTransaction(transaction);
                    result.push(signed);
                }
            }
            return result;
        });
    }
    signTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._transport || !this._publicKey) {
                throw new Error("Not connected to Ledger");
            }
            const signature = yield signTransaction(this._transport, transaction, this._derivationPath);
            transaction.addSignature(this._publicKey, signature);
            return transaction;
        });
    }
    connect(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._connecting) {
                return;
            }
            this._connecting = true;
            try {
                // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)
                this._transport = yield TransportWebUSB.create();
                if (args) {
                    const { account, change } = args;
                    this._derivationPath = getSolanaDerivationPath(account, change);
                    this._publicKey = yield getPublicKey(this._transport, this._derivationPath);
                }
                else {
                    this._publicKey = yield getPublicKey(this._transport);
                }
                this.emit("connect", this._publicKey);
            }
            catch (error) {
                yield this.disconnect();
                throw new LedgerError(error);
            }
            finally {
                this._connecting = false;
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            let emit = false;
            if (this._transport) {
                yield this._transport.close();
                this._transport = null;
                emit = true;
            }
            this._connecting = false;
            this._publicKey = null;
            if (emit) {
                this.emit("disconnect");
            }
        });
    }
    /**
     * Ledger transport.
     */
    get transport() {
        return this._transport;
    }
    /**
     * Fetches accounts associated with the given derivation paths.
     *
     * @param paths
     * @returns
     */
    static fetchAccountsForPaths(paths) {
        return __awaiter(this, void 0, void 0, function* () {
            let transport = null;
            try {
                transport = yield TransportWebUSB.create();
                const ret = [];
                for (const path of paths) {
                    const derivationPath = getSolanaDerivationPath(path.account, path.change);
                    ret.push(Object.assign(Object.assign({}, path), { key: yield getPublicKey(transport, derivationPath) }));
                }
                return ret;
            }
            catch (error) {
                throw new LedgerError(error);
            }
            finally {
                yield (transport === null || transport === void 0 ? void 0 : transport.close());
            }
        });
    }
}
export class LedgerError extends Error {
    constructor(error) {
        super(`Ledger Error: ${error.message}`);
        this.name = "LedgerError";
    }
}
//# sourceMappingURL=index.js.map