"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findGlobalContextId = exports.findReverseEntryId = exports.findDeprecatedReverseEntryId = exports.findClaimRequestId = exports.findNameEntryId = exports.findNamespaceId = void 0;
const anchor_1 = require("@project-serum/anchor");
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("./constants");
/**
 * Finds the namespace id.
 * @returns
 */
const findNamespaceId = async (namespaceName) => {
    return web3_js_1.PublicKey.findProgramAddress([
        anchor_1.utils.bytes.utf8.encode(constants_1.NAMESPACE_SEED),
        anchor_1.utils.bytes.utf8.encode(namespaceName),
    ], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findNamespaceId = findNamespaceId;
/**
 * Finds the entry id in a given namespace.
 * @returns
 */
const findNameEntryId = async (namespaceId, entryName) => {
    return web3_js_1.PublicKey.findProgramAddress([
        anchor_1.utils.bytes.utf8.encode(constants_1.ENTRY_SEED),
        namespaceId.toBytes(),
        anchor_1.utils.bytes.utf8.encode(entryName),
    ], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findNameEntryId = findNameEntryId;
/**
 * Finds the claim request ID for a given namespace and name.
 * @returns
 */
const findClaimRequestId = async (namespaceId, entryName, requestor) => {
    return web3_js_1.PublicKey.findProgramAddress([
        anchor_1.utils.bytes.utf8.encode(constants_1.CLAIM_REQUEST_SEED),
        namespaceId.toBytes(),
        anchor_1.utils.bytes.utf8.encode(entryName),
        requestor.toBytes(),
    ], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findClaimRequestId = findClaimRequestId;
/**
 * @Deprecated
 * Finds the deprecated reverse entry ID for a given publickey.
 * @returns
 */
const findDeprecatedReverseEntryId = async (pubkey) => {
    return web3_js_1.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode(constants_1.REVERSE_ENTRY_SEED), pubkey.toBytes()], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findDeprecatedReverseEntryId = findDeprecatedReverseEntryId;
/**
 * Finds the reverse entry ID for a given publickey.
 * @returns
 */
const findReverseEntryId = async (namespace, pubkey) => {
    return web3_js_1.PublicKey.findProgramAddress([
        anchor_1.utils.bytes.utf8.encode(constants_1.REVERSE_ENTRY_SEED),
        namespace.toBuffer(),
        pubkey.toBytes(),
    ], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findReverseEntryId = findReverseEntryId;
/**
 * Finds the namespace id.
 * @returns
 */
const findGlobalContextId = async () => {
    return web3_js_1.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode(constants_1.GLOBAL_CONTEXT_SEED)], constants_1.NAMESPACES_PROGRAM_ID);
};
exports.findGlobalContextId = findGlobalContextId;
//# sourceMappingURL=pda.js.map