{"version":3,"file":"deprecated.js","sourceRoot":"","sources":["../../src/deprecated.ts"],"names":[],"mappings":"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","sourcesContent":["import * as certificate from \"@cardinal/certificates\";\nimport {\n  CERTIFICATE_PROGRAM_ID,\n  CERTIFICATE_SEED,\n  MINT_MANAGER_SEED,\n} from \"@cardinal/certificates\";\nimport { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\nimport * as mplTokenMetadata from \"@metaplex-foundation/mpl-token-metadata\";\nimport * as anchor from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as splToken from \"@solana/spl-token\";\nimport type { Connection, Transaction } from \"@solana/web3.js\";\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport type { NAMESPACES_PROGRAM } from \"./constants\";\nimport {\n  CLAIM_REQUEST_SEED,\n  ENTRY_SEED,\n  NAMESPACE_SEED,\n  NAMESPACES_IDL,\n  NAMESPACES_PROGRAM_ID,\n  REVERSE_ENTRY_SEED,\n} from \"./constants\";\n\nexport async function withClaimEntry(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: PublicKey,\n  duration: number,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),\n      anchor.utils.bytes.utf8.encode(namespaceName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [entryId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [claimRequestId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(CLAIM_REQUEST_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n      provider.wallet.publicKey.toBytes(),\n    ],\n    namespacesProgram.programId\n  );\n\n  const namespace = await namespacesProgram.account.namespace.fetch(\n    namespaceId\n  );\n\n  const [certificateId, certificateBump] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(CERTIFICATE_SEED),\n      certificateMintId.toBuffer(),\n    ],\n    CERTIFICATE_PROGRAM_ID\n  );\n\n  const [mintManagerId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),\n      certificateMintId.toBytes(),\n    ],\n    CERTIFICATE_PROGRAM_ID\n  );\n\n  const namespaceCertificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      namespaceId,\n      true\n    );\n\n  const certificatePaymentTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      namespace.paymentMint,\n      certificateId,\n      provider.wallet.publicKey,\n      true\n    );\n\n  const userCertificateTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      certificateMintId,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey\n    );\n\n  const userPaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    provider.connection,\n    namespace.paymentMint,\n    provider.wallet.publicKey,\n    provider.wallet.publicKey\n  );\n\n  const certificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      certificateId,\n      true\n    );\n  transaction.add(\n    namespacesProgram.instruction.claimEntry(\n      {\n        duration: duration > 0 ? new anchor.BN(duration) : null,\n        certificateBump,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          entry: entryId,\n          user: provider.wallet.publicKey,\n          payer: provider.wallet.publicKey,\n          paymentMint: namespace.paymentMint,\n          claimRequest: claimRequestId,\n\n          // CPI accounts\n          mintManager: mintManagerId,\n          certificate: certificateId,\n          certificateMint: certificateMintId,\n          certificateTokenAccount: certificateTokenAccountId,\n          certificatePaymentTokenAccount: certificatePaymentTokenAccountId,\n          userCertificateTokenAccount: userCertificateTokenAccountId,\n          userPaymentTokenAccount: userPaymentTokenAccountId,\n          namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,\n\n          // programs\n          certificateProgram: CERTIFICATE_PROGRAM_ID,\n          tokenProgram: splToken.TOKEN_PROGRAM_ID,\n          associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withInitEntry(\n  connection: Connection,\n  wallet: Wallet,\n  certificateMintId: PublicKey,\n  namespaceName: string,\n  entryName: string,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [namespaceId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),\n      anchor.utils.bytes.utf8.encode(namespaceName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [entryId, entryBump] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [mintManagerId, mintManagerBump] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),\n      certificateMintId.toBytes(),\n    ],\n    CERTIFICATE_PROGRAM_ID\n  );\n\n  const [certificateMintMetadataId] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(mplTokenMetadata.MetadataProgram.PREFIX),\n      mplTokenMetadata.MetadataProgram.PUBKEY.toBuffer(),\n      certificateMintId.toBuffer(),\n    ],\n    mplTokenMetadata.MetadataProgram.PUBKEY\n  );\n\n  const mintBalanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n    provider.connection\n  );\n\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: certificateMintId,\n      lamports: mintBalanceNeeded,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      space: splToken.MintLayout.span,\n      programId: splToken.TOKEN_PROGRAM_ID,\n    })\n  );\n\n  const namespaceCertificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      namespaceId,\n      true\n    );\n\n  transaction.add(\n    namespacesProgram.instruction.initEntry(\n      {\n        name: entryName,\n        entryBump,\n        mintManagerBump,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          entry: entryId,\n          payer: provider.wallet.publicKey,\n          namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,\n\n          // cpi\n          mintManager: mintManagerId,\n          certificateMint: certificateMintId,\n          certificateMintMetadata: certificateMintMetadataId,\n\n          // programs\n          certificateProgram: CERTIFICATE_PROGRAM_ID,\n          tokenMetadataProgram: mplTokenMetadata.MetadataProgram.PUBKEY,\n          tokenProgram: splToken.TOKEN_PROGRAM_ID,\n          associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withRevokeEntry(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: PublicKey,\n  certificateOwnerId: PublicKey,\n  claimRequestId: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),\n      anchor.utils.bytes.utf8.encode(namespaceName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [entryId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const namespace = await namespacesProgram.account.namespace.fetch(\n    namespaceId\n  );\n\n  const [certificateId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(CERTIFICATE_SEED),\n      certificateMintId.toBuffer(),\n    ],\n    CERTIFICATE_PROGRAM_ID\n  );\n\n  const [mintManagerId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),\n      certificateMintId.toBytes(),\n    ],\n    CERTIFICATE_PROGRAM_ID\n  );\n\n  const namespaceCertificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      namespaceId,\n      true\n    );\n\n  const namespacePaymentTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      namespace.paymentMint,\n      namespaceId,\n      provider.wallet.publicKey,\n      true\n    );\n\n  const certificatePaymentTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      namespace.paymentMint,\n      certificateId,\n      true\n    );\n\n  const userCertificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      certificateOwnerId\n    );\n\n  const userPaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    provider.connection,\n    namespace.paymentMint,\n    certificateOwnerId,\n    provider.wallet.publicKey\n  );\n\n  const certificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      certificateId,\n      true\n    );\n\n  transaction.add(\n    namespacesProgram.instruction.revokeEntry({\n      accounts: {\n        namespace: namespaceId,\n        entry: entryId,\n        claimRequest: claimRequestId,\n        namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,\n        namespacePaymentTokenAccount: namespacePaymentTokenAccountId,\n        invalidator: provider.wallet.publicKey,\n\n        // CPI accounts\n        mintManager: mintManagerId,\n        certificate: certificateId,\n        certificateMint: certificateMintId,\n        certificateTokenAccount: certificateTokenAccountId,\n        certificatePaymentTokenAccount: certificatePaymentTokenAccountId,\n        userCertificateTokenAccount: userCertificateTokenAccountId,\n        userPaymentTokenAccount: userPaymentTokenAccountId,\n\n        // programs\n        certificateProgram: CERTIFICATE_PROGRAM_ID,\n        tokenProgram: splToken.TOKEN_PROGRAM_ID,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withSetEntryData(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  entryData: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),\n      anchor.utils.bytes.utf8.encode(namespaceName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [entryId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const entry = await namespacesProgram.account.entry.fetch(entryId);\n  const [certificateId] = await certificate.certificateIdForMint(entry.mint);\n\n  const userCertificateTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      entry.mint,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey\n    );\n\n  transaction.add(\n    namespacesProgram.instruction.setEntryData(entryData, {\n      accounts: {\n        namespace: namespaceId,\n        entry: entryId,\n\n        userCertificateTokenAccount: userCertificateTokenAccountId,\n        certificate: certificateId,\n\n        user: provider.wallet.publicKey,\n        payer: provider.wallet.publicKey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withSetReverseEntry(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),\n      anchor.utils.bytes.utf8.encode(namespaceName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [entryId] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      anchor.utils.bytes.utf8.encode(entryName),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [reverseEntryId, reverseEntryBump] = await PublicKey.findProgramAddress(\n    [\n      anchor.utils.bytes.utf8.encode(REVERSE_ENTRY_SEED),\n      wallet.publicKey.toBytes(),\n    ],\n    namespacesProgram.programId\n  );\n\n  const [certificateId] = await certificate.certificateIdForMint(\n    certificateMintId\n  );\n\n  const userCertificateTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      certificateMintId,\n      provider.wallet.publicKey\n    );\n\n  transaction.add(\n    namespacesProgram.instruction.setReverseEntry(reverseEntryBump, {\n      accounts: {\n        namespace: namespaceId,\n        entry: entryId,\n        reverseEntry: reverseEntryId,\n\n        userCertificateTokenAccount: userCertificateTokenAccountId,\n        certificate: certificateId,\n\n        user: provider.wallet.publicKey,\n        payer: provider.wallet.publicKey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      },\n    })\n  );\n  return transaction;\n}\n"]}