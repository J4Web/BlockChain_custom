"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReverseEntry = exports.getReverseNameEntryForNamespace = exports.getPendingClaimRequests = exports.getClaimRequest = exports.getNameEntriesForNamespace = exports.getNameEntry = exports.getAllNamespaces = exports.getGlobalContext = exports.getNamespace = exports.getNamespaceByName = void 0;
const anchor_1 = require("@project-serum/anchor");
const _1 = require(".");
const pda_1 = require("./pda");
async function getNamespaceByName(connection, namespaceName) {
    const [namespaceId] = await (0, pda_1.findNamespaceId)(namespaceName);
    return getNamespace(connection, namespaceId);
}
exports.getNamespaceByName = getNamespaceByName;
async function getNamespace(connection, namespaceId) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const parsed = await namespacesProgram.account.namespace.fetch(namespaceId);
    return {
        parsed,
        pubkey: namespaceId,
    };
}
exports.getNamespace = getNamespace;
async function getGlobalContext(connection) {
    const [globalContextId] = await (0, pda_1.findGlobalContextId)();
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const parsed = await namespacesProgram.account.globalContext.fetch(globalContextId);
    return {
        parsed,
        pubkey: globalContextId,
    };
}
exports.getGlobalContext = getGlobalContext;
async function getAllNamespaces(connection) {
    const programAccounts = await connection.getProgramAccounts(_1.NAMESPACES_PROGRAM_ID, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: anchor_1.utils.bytes.bs58.encode(anchor_1.BorshAccountsCoder.accountDiscriminator("namespace")),
                },
            },
        ],
    });
    const namespaces = [];
    const coder = new anchor_1.BorshAccountsCoder(_1.NAMESPACES_IDL);
    programAccounts.forEach((account) => {
        try {
            const namespace = coder.decode("namespace", account.account.data);
            namespaces.push({
                ...account,
                parsed: namespace,
            });
        }
        catch (e) {
            console.log(`Failed to decode namespace`);
        }
    });
    return namespaces.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
}
exports.getAllNamespaces = getAllNamespaces;
async function getNameEntry(connection, namespaceName, entryName) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await (0, pda_1.findNamespaceId)(namespaceName);
    const [entryId] = await (0, pda_1.findNameEntryId)(namespaceId, entryName);
    const parsed = await namespacesProgram.account.entry.fetch(entryId);
    return {
        parsed,
        pubkey: entryId,
    };
}
exports.getNameEntry = getNameEntry;
async function getNameEntriesForNamespace(connection, namespaceName, entryNames) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await (0, pda_1.findNamespaceId)(namespaceName);
    const entryTuples = await Promise.all(entryNames.map((entryName) => (0, pda_1.findNameEntryId)(namespaceId, entryName)));
    const entryIds = entryTuples.map((tuple) => tuple[0]);
    const result = (await namespacesProgram.account.entry.fetchMultiple(entryIds));
    return result.map((parsed, i) => ({
        parsed,
        pubkey: entryIds[i],
        name: entryNames[i],
    }));
}
exports.getNameEntriesForNamespace = getNameEntriesForNamespace;
async function getClaimRequest(connection, namespaceName, entryName, requestor) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await (0, pda_1.findNamespaceId)(namespaceName);
    const [claimRequestId] = await (0, pda_1.findClaimRequestId)(namespaceId, entryName, requestor);
    const parsed = await namespacesProgram.account.claimRequest.fetch(claimRequestId);
    return {
        parsed,
        pubkey: claimRequestId,
    };
}
exports.getClaimRequest = getClaimRequest;
async function getPendingClaimRequests(connection) {
    const programAccounts = await connection.getProgramAccounts(_1.NAMESPACES_PROGRAM_ID, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: anchor_1.utils.bytes.bs58.encode(anchor_1.BorshAccountsCoder.accountDiscriminator("claimRequest")),
                },
            },
        ],
    });
    const pendingClaimRequests = [];
    const coder = new anchor_1.BorshAccountsCoder(_1.NAMESPACES_IDL);
    programAccounts.forEach((account) => {
        try {
            const claimRequest = coder.decode("claimRequest", account.account.data);
            if (!claimRequest.isApproved) {
                pendingClaimRequests.push({
                    ...account,
                    parsed: claimRequest,
                });
            }
        }
        catch (e) {
            console.log(`Failed to decode claim request`);
        }
    });
    return pendingClaimRequests;
}
exports.getPendingClaimRequests = getPendingClaimRequests;
async function getReverseNameEntryForNamespace(connection, pubkey, namespace) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    const [reverseEntryId] = await (0, pda_1.findReverseEntryId)(namespace, pubkey);
    const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
    return {
        parsed,
        pubkey: reverseEntryId,
    };
}
exports.getReverseNameEntryForNamespace = getReverseNameEntryForNamespace;
async function getReverseEntry(connection, pubkey, namespace, disallowGlobal) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const namespacesProgram = new anchor_1.Program(_1.NAMESPACES_IDL, _1.NAMESPACES_PROGRAM_ID, provider);
    try {
        if (!namespace) {
            throw new Error("Skipping to deprecated version");
        }
        const [reverseEntryId] = await (0, pda_1.findReverseEntryId)(namespace, pubkey);
        const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
        if (!parsed) {
            throw new Error("Failed trying deprecated global reverse entry");
        }
        return {
            parsed,
            pubkey: reverseEntryId,
        };
    }
    catch (e) {
        if (disallowGlobal) {
            throw new Error("Reverse entry not found and global reverse entry disallowed");
        }
        const [reverseEntryId] = await (0, pda_1.findDeprecatedReverseEntryId)(pubkey);
        const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
        return {
            parsed,
            pubkey: reverseEntryId,
        };
    }
}
exports.getReverseEntry = getReverseEntry;
//# sourceMappingURL=accounts.js.map