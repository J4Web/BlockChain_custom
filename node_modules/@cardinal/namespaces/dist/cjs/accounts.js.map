{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../src/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  utils,\n} from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type {\n  ClaimRequestData,\n  EntryData,\n  NamespaceData,\n  ReverseEntryData,\n} from \".\";\nimport { NAMESPACES_IDL, NAMESPACES_PROGRAM_ID } from \".\";\nimport type { NAMESPACES_PROGRAM } from \"./constants\";\nimport {\n  findClaimRequestId,\n  findDeprecatedReverseEntryId,\n  findGlobalContextId,\n  findNameEntryId,\n  findNamespaceId,\n  findReverseEntryId,\n} from \"./pda\";\n\nexport async function getNamespaceByName(\n  connection: Connection,\n  namespaceName: string\n): Promise<AccountData<NamespaceData>> {\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  return getNamespace(connection, namespaceId);\n}\n\nexport async function getNamespace(\n  connection: Connection,\n  namespaceId: PublicKey\n): Promise<AccountData<NamespaceData>> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const parsed = await namespacesProgram.account.namespace.fetch(namespaceId);\n  return {\n    parsed,\n    pubkey: namespaceId,\n  };\n}\n\nexport async function getGlobalContext(\n  connection: Connection\n): Promise<AccountData<NamespaceData>> {\n  const [globalContextId] = await findGlobalContextId();\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const parsed = await namespacesProgram.account.globalContext.fetch(\n    globalContextId\n  );\n  return {\n    parsed,\n    pubkey: globalContextId,\n  };\n}\n\nexport async function getAllNamespaces(\n  connection: Connection\n): Promise<AccountData<NamespaceData>[]> {\n  const programAccounts = await connection.getProgramAccounts(\n    NAMESPACES_PROGRAM_ID,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"namespace\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const namespaces: AccountData<NamespaceData>[] = [];\n  const coder = new BorshAccountsCoder(NAMESPACES_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const namespace: NamespaceData = coder.decode(\n        \"namespace\",\n        account.account.data\n      );\n      namespaces.push({\n        ...account,\n        parsed: namespace,\n      });\n    } catch (e) {\n      console.log(`Failed to decode namespace`);\n    }\n  });\n  return namespaces.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n}\n\nexport async function getNameEntry(\n  connection: Connection,\n  namespaceName: string,\n  entryName: string\n): Promise<AccountData<EntryData>> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n  const parsed = await namespacesProgram.account.entry.fetch(entryId);\n  return {\n    parsed,\n    pubkey: entryId,\n  };\n}\n\nexport async function getNameEntriesForNamespace(\n  connection: Connection,\n  namespaceName: string,\n  entryNames: string[]\n): Promise<(AccountData<EntryData> & { name: string })[]> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const entryTuples = await Promise.all(\n    entryNames.map((entryName) => findNameEntryId(namespaceId, entryName))\n  );\n  const entryIds = entryTuples.map((tuple) => tuple[0]);\n  const result = (await namespacesProgram.account.entry.fetchMultiple(\n    entryIds\n  )) as EntryData[];\n  return result.map((parsed: EntryData, i) => ({\n    parsed,\n    pubkey: entryIds[i]!,\n    name: entryNames[i]!,\n  }));\n}\n\nexport async function getClaimRequest(\n  connection: Connection,\n  namespaceName: string,\n  entryName: string,\n  requestor: PublicKey\n): Promise<AccountData<ClaimRequestData>> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [claimRequestId] = await findClaimRequestId(\n    namespaceId,\n    entryName,\n    requestor\n  );\n  const parsed = await namespacesProgram.account.claimRequest.fetch(\n    claimRequestId\n  );\n  return {\n    parsed,\n    pubkey: claimRequestId,\n  };\n}\n\nexport async function getPendingClaimRequests(\n  connection: Connection\n): Promise<AccountData<ClaimRequestData>[]> {\n  const programAccounts = await connection.getProgramAccounts(\n    NAMESPACES_PROGRAM_ID,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"claimRequest\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const pendingClaimRequests: AccountData<ClaimRequestData>[] = [];\n  const coder = new BorshAccountsCoder(NAMESPACES_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const claimRequest: ClaimRequestData = coder.decode(\n        \"claimRequest\",\n        account.account.data\n      );\n      if (!claimRequest.isApproved) {\n        pendingClaimRequests.push({\n          ...account,\n          parsed: claimRequest,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode claim request`);\n    }\n  });\n  return pendingClaimRequests;\n}\n\nexport async function getReverseNameEntryForNamespace(\n  connection: Connection,\n  pubkey: PublicKey,\n  namespace: PublicKey\n): Promise<AccountData<ReverseEntryData>> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [reverseEntryId] = await findReverseEntryId(namespace, pubkey);\n  const parsed = await namespacesProgram.account.reverseEntry.fetch(\n    reverseEntryId\n  );\n  return {\n    parsed,\n    pubkey: reverseEntryId,\n  };\n}\n\nexport async function getReverseEntry(\n  connection: Connection,\n  pubkey: PublicKey,\n  namespace?: PublicKey,\n  disallowGlobal?: boolean\n): Promise<AccountData<ReverseEntryData>> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const namespacesProgram = new Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  try {\n    if (!namespace) {\n      throw new Error(\"Skipping to deprecated version\");\n    }\n    const [reverseEntryId] = await findReverseEntryId(namespace, pubkey);\n    const parsed = await namespacesProgram.account.reverseEntry.fetch(\n      reverseEntryId\n    );\n    if (!parsed) {\n      throw new Error(\"Failed trying deprecated global reverse entry\");\n    }\n    return {\n      parsed,\n      pubkey: reverseEntryId,\n    };\n  } catch (e) {\n    if (disallowGlobal) {\n      throw new Error(\n        \"Reverse entry not found and global reverse entry disallowed\"\n      );\n    }\n    const [reverseEntryId] = await findDeprecatedReverseEntryId(pubkey);\n    const parsed = await namespacesProgram.account.reverseEntry.fetch(\n      reverseEntryId\n    );\n    return {\n      parsed,\n      pubkey: reverseEntryId,\n    };\n  }\n}\n"]}