{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../src/pda.ts"],"names":[],"mappings":";;;AAAA,kDAA8C;AAC9C,6CAA4C;AAE5C,2CAOqB;AAErB;;;GAGG;AACI,MAAM,eAAe,GAAG,KAAK,EAClC,aAAqB,EACS,EAAE;IAChC,OAAO,mBAAS,CAAC,kBAAkB,CACjC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,0BAAc,CAAC;QACvC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KACvC,EACD,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,eAAe,mBAU1B;AAEF;;;GAGG;AACI,MAAM,eAAe,GAAG,KAAK,EAClC,WAAsB,EACtB,SAAiB,EACa,EAAE;IAChC,OAAO,mBAAS,CAAC,kBAAkB,CACjC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAU,CAAC;QACnC,WAAW,CAAC,OAAO,EAAE;QACrB,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KACnC,EACD,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B;AAEF;;;GAGG;AACI,MAAM,kBAAkB,GAAG,KAAK,EACrC,WAAsB,EACtB,SAAiB,EACjB,SAAoB,EACU,EAAE;IAChC,OAAO,mBAAS,CAAC,kBAAkB,CACjC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,8BAAkB,CAAC;QAC3C,WAAW,CAAC,OAAO,EAAE;QACrB,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;QAClC,SAAS,CAAC,OAAO,EAAE;KACpB,EACD,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AAdW,QAAA,kBAAkB,sBAc7B;AAEF;;;;GAIG;AACI,MAAM,4BAA4B,GAAG,KAAK,EAC/C,MAAiB,EACa,EAAE;IAChC,OAAO,mBAAS,CAAC,kBAAkB,CACjC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,8BAAkB,CAAC,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,EAC/D,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,4BAA4B,gCAOvC;AAEF;;;GAGG;AACI,MAAM,kBAAkB,GAAG,KAAK,EACrC,SAAoB,EACpB,MAAiB,EACa,EAAE;IAChC,OAAO,mBAAS,CAAC,kBAAkB,CACjC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,8BAAkB,CAAC;QAC3C,SAAS,CAAC,QAAQ,EAAE;QACpB,MAAM,CAAC,OAAO,EAAE;KACjB,EACD,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,kBAAkB,sBAY7B;AAEF;;;GAGG;AACI,MAAM,mBAAmB,GAAG,KAAK,IAAkC,EAAE;IAC1E,OAAO,mBAAS,CAAC,kBAAkB,CACjC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,+BAAmB,CAAC,CAAC,EAC9C,iCAAqB,CACtB,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  CLAIM_REQUEST_SEED,\n  ENTRY_SEED,\n  GLOBAL_CONTEXT_SEED,\n  NAMESPACE_SEED,\n  NAMESPACES_PROGRAM_ID,\n  REVERSE_ENTRY_SEED,\n} from \"./constants\";\n\n/**\n * Finds the namespace id.\n * @returns\n */\nexport const findNamespaceId = async (\n  namespaceName: string\n): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(NAMESPACE_SEED),\n      utils.bytes.utf8.encode(namespaceName),\n    ],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n\n/**\n * Finds the entry id in a given namespace.\n * @returns\n */\nexport const findNameEntryId = async (\n  namespaceId: PublicKey,\n  entryName: string\n): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(ENTRY_SEED),\n      namespaceId.toBytes(),\n      utils.bytes.utf8.encode(entryName),\n    ],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n\n/**\n * Finds the claim request ID for a given namespace and name.\n * @returns\n */\nexport const findClaimRequestId = async (\n  namespaceId: PublicKey,\n  entryName: string,\n  requestor: PublicKey\n): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(CLAIM_REQUEST_SEED),\n      namespaceId.toBytes(),\n      utils.bytes.utf8.encode(entryName),\n      requestor.toBytes(),\n    ],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n\n/**\n * @Deprecated\n * Finds the deprecated reverse entry ID for a given publickey.\n * @returns\n */\nexport const findDeprecatedReverseEntryId = async (\n  pubkey: PublicKey\n): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(REVERSE_ENTRY_SEED), pubkey.toBytes()],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n\n/**\n * Finds the reverse entry ID for a given publickey.\n * @returns\n */\nexport const findReverseEntryId = async (\n  namespace: PublicKey,\n  pubkey: PublicKey\n): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(REVERSE_ENTRY_SEED),\n      namespace.toBuffer(),\n      pubkey.toBytes(),\n    ],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n\n/**\n * Finds the namespace id.\n * @returns\n */\nexport const findGlobalContextId = async (): Promise<[PublicKey, number]> => {\n  return PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(GLOBAL_CONTEXT_SEED)],\n    NAMESPACES_PROGRAM_ID\n  );\n};\n"]}