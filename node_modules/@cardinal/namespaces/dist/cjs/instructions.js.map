{"version":3,"file":"instructions.js","sourceRoot":"","sources":["../../src/instructions.ts"],"names":[],"mappings":"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","sourcesContent":["import { withFindOrInitAssociatedTokenAccount } from \"@cardinal/certificates\";\nimport { findAta } from \"@cardinal/common\";\nimport {\n  getRemainingAccountsForKind,\n  InvalidationType,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerKind,\n  withRemainingAccountsForReturn,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport { getTokenManager } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/accounts\";\nimport {\n  findMintCounterId,\n  findTokenManagerAddress,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport * as mplTokenMetadata from \"@metaplex-foundation/mpl-token-metadata\";\nimport {\n  MasterEdition,\n  Metadata,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport * as anchor from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as splToken from \"@solana/spl-token\";\nimport type { Connection, Keypair, Transaction } from \"@solana/web3.js\";\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport type { NAMESPACES_PROGRAM } from \".\";\nimport {\n  findClaimRequestId,\n  findGlobalContextId,\n  findNameEntryId,\n  findNamespaceId,\n  findReverseEntryId,\n  getNameEntry,\n  getNamespace,\n  NAMESPACES_IDL,\n  NAMESPACES_PROGRAM_ID,\n  withRemainingAccountsForClaim,\n} from \".\";\n\nexport async function withInit(\n  connection: Connection,\n  wallet: Wallet,\n  rentalPercentage: number,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [globalContextId] = await findGlobalContextId();\n\n  transaction.add(\n    namespacesProgram.instruction.initGlobalContext(\n      {\n        feeBasisPoints: new anchor.BN(rentalPercentage),\n      },\n      {\n        accounts: {\n          globalContext: globalContextId,\n          authority: provider.wallet.publicKey,\n          payer: provider.wallet.publicKey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withCreateNamespace(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    schema?: number;\n    updateAuthority: PublicKey;\n    rentAuthority: PublicKey;\n    approveAuthority?: PublicKey;\n    paymentAmountDaily?: anchor.BN;\n    paymentMint?: PublicKey;\n    minRentalSeconds?: anchor.BN;\n    maxRentalSeconds?: anchor.BN;\n    transferableEntries: boolean;\n    limit?: number;\n    maxExpiration?: anchor.BN;\n    invalidationType?: InvalidationType;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [namespaceId] = await findNamespaceId(params.namespaceName);\n\n  transaction.add(\n    namespacesProgram.instruction.createNamespace(\n      {\n        name: params.namespaceName,\n        updateAuthority: params.updateAuthority,\n        rentAuthority: params.rentAuthority,\n        approveAuthority: params.approveAuthority ?? null,\n        schema: params.schema ?? 0,\n        paymentAmountDaily: params.paymentAmountDaily ?? new anchor.BN(0),\n        paymentMint: params.paymentMint ?? PublicKey.default,\n        minRentalSeconds: params.minRentalSeconds ?? new anchor.BN(0),\n        maxRentalSeconds: params.maxRentalSeconds ?? null,\n        transferableEntries: params.transferableEntries,\n        limit: params.limit ?? null,\n        maxExpiration: params.maxExpiration ?? null,\n        invalidationType:\n          params.invalidationType ?? params.transferableEntries\n            ? InvalidationType.Invalidate\n            : InvalidationType.Return,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          authority: provider.wallet.publicKey,\n          payer: provider.wallet.publicKey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withUpdateNamespace(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  params: {\n    updateAuthority?: PublicKey;\n    rentAuthority?: PublicKey;\n    approveAuthority?: PublicKey;\n    paymentAmountDaily?: anchor.BN;\n    paymentMint?: PublicKey;\n    minRentalSeconds?: anchor.BN;\n    maxRentalSeconds?: anchor.BN;\n    transferableEntries?: boolean;\n    limit?: number;\n    maxExpiration?: anchor.BN;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  transaction.add(\n    namespacesProgram.instruction.updateNamespace(\n      {\n        updateAuthority: params.updateAuthority ?? null,\n        rentAuthority: params.rentAuthority ?? null,\n        approveAuthority: params.approveAuthority ?? null,\n        paymentAmountDaily: params.paymentAmountDaily ?? null,\n        paymentMint: params.paymentMint ?? null,\n        minRentalSeconds: params.minRentalSeconds ?? null,\n        maxRentalSeconds: params.maxRentalSeconds ?? null,\n        transferableEntries: params.transferableEntries ?? null,\n        limit: params.limit ?? null,\n        maxExpiration: params.maxExpiration ?? null,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          updateAuthority: provider.wallet.publicKey,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withClaimNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  mintId: PublicKey,\n  duration?: number,\n  requestor = wallet.publicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n  const [claimRequestId] = await findClaimRequestId(\n    namespaceId,\n    entryName,\n    requestor\n  );\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n\n  const namespace = await getNamespace(connection, namespaceId);\n\n  const namespaceTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      mintId,\n      namespaceId,\n      true\n    );\n\n  const tokenManagerTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      mintId,\n      tokenManagerId,\n      true\n    );\n\n  const recipientTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    provider.connection,\n    mintId,\n    wallet.publicKey,\n    payer,\n    true\n  );\n\n  const [mintCounterId] = await findMintCounterId(mintId);\n\n  const remainingAccountsForClaim = await withRemainingAccountsForClaim(\n    connection,\n    transaction,\n    wallet,\n    namespaceId,\n    tokenManagerId,\n    duration && duration > 0 ? duration : undefined\n  );\n\n  const remainingAccountsForKind = await getRemainingAccountsForKind(\n    mintId,\n    namespace.parsed.transferableEntries\n      ? TokenManagerKind.Unmanaged\n      : TokenManagerKind.Edition\n  );\n\n  transaction.add(\n    namespacesProgram.instruction.claimNameEntry(\n      {\n        duration: duration && duration > 0 ? new anchor.BN(duration) : null,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          nameEntry: entryId,\n          requestor: requestor,\n          recipient: wallet.publicKey,\n          payer: payer,\n          claimRequest: claimRequestId,\n          mint: mintId,\n          namespaceTokenAccount: namespaceTokenAccountId,\n          tokenManager: tokenManagerId,\n          tokenManagerTokenAccount: tokenManagerTokenAccountId,\n          mintCounter: mintCounterId,\n          recipientTokenAccount: recipientTokenAccount,\n          tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n          tokenProgram: splToken.TOKEN_PROGRAM_ID,\n          associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n        remainingAccounts: [\n          ...remainingAccountsForClaim,\n          ...remainingAccountsForKind,\n        ],\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withInitNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n\n  transaction.add(\n    namespacesProgram.instruction.initNameEntry(\n      {\n        name: entryName,\n      },\n      {\n        accounts: {\n          namespace: namespaceId,\n          nameEntry: entryId,\n          payer: provider.wallet.publicKey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withInitNameEntryMint(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  mintKeypair: Keypair\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n\n  const namespaceTokenAccountId =\n    await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      mintKeypair.publicKey,\n      namespaceId,\n      true\n    );\n\n  const mintMetadataId = await Metadata.getPDA(mintKeypair.publicKey);\n  const mintMasterEditionId = await MasterEdition.getPDA(mintKeypair.publicKey);\n\n  transaction.add(\n    namespacesProgram.instruction.initNameEntryMint({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: entryId,\n        payer: provider.wallet.publicKey,\n        namespaceTokenAccount: namespaceTokenAccountId,\n        mint: mintKeypair.publicKey,\n        mintMetadata: mintMetadataId,\n        masterEdition: mintMasterEditionId,\n        tokenMetadataProgram: mplTokenMetadata.MetadataProgram.PUBKEY,\n        tokenProgram: splToken.TOKEN_PROGRAM_ID,\n        associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withRevokeNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  mintId: PublicKey,\n  claimRequestId: PublicKey\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n\n  const nameEntry = await getNameEntry(connection, namespaceName, entryName);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  const tokenManagerData = await getTokenManager(connection, tokenManagerId);\n\n  const tokenManagerTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    tokenManagerId,\n    wallet.publicKey,\n    true\n  );\n\n  const recipientTokenAccount = await findAta(\n    nameEntry.parsed.mint,\n    provider.wallet.publicKey,\n    true\n  );\n\n  const remainingAccountsForKind = await getRemainingAccountsForKind(\n    mintId,\n    TokenManagerKind.Edition\n  );\n\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData,\n    true\n  );\n\n  transaction.add(\n    namespacesProgram.instruction.revokeNameEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: entryId,\n        claimRequest: claimRequestId,\n        invalidator: provider.wallet.publicKey,\n        tokenManager: tokenManagerId,\n        mint: mintId,\n        tokenManagerTokenAccount: tokenManagerTokenAccount,\n        recipientTokenAccount: recipientTokenAccount,\n        tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: splToken.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      remainingAccounts: [\n        ...remainingAccountsForKind,\n        ...remainingAccountsForReturn,\n      ],\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateExpiredNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    invalidator?: PublicKey;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(params.namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, params.entryName);\n  const namespaceTokenAccountId = await findAta(\n    params.mintId,\n    namespaceId,\n    true\n  );\n  transaction.add(\n    namespacesProgram.instruction.invalidateExpiredNameEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: nameEntryId,\n        namespaceTokenAccount: namespaceTokenAccountId,\n        invalidator: params.invalidator || namespaceId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateTransferableNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    invalidator?: PublicKey;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(params.namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, params.entryName);\n  const [tokenManagerId] = await findTokenManagerAddress(params.mintId);\n  transaction.add(\n    namespacesProgram.instruction.invalidateTransferableNameEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: nameEntryId,\n        tokenManager: tokenManagerId,\n        invalidator: params.invalidator || namespaceId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateNameEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    invalidator?: PublicKey;\n    transferable: boolean;\n  }\n): Promise<Transaction> {\n  if (params.transferable) {\n    return withInvalidateTransferableNameEntry(\n      transaction,\n      connection,\n      wallet,\n      params\n    );\n  } else {\n    return withInvalidateExpiredNameEntry(\n      transaction,\n      connection,\n      wallet,\n      params\n    );\n  }\n}\n\nexport async function withSetEntryData(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  mintId: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n\n  const entry = await namespacesProgram.account.entry.fetch(entryId);\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n\n  const userTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    provider.connection,\n    entry.mint,\n    provider.wallet.publicKey,\n    provider.wallet.publicKey\n  );\n\n  transaction.add(\n    namespacesProgram.instruction.setNameEntryData({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: entryId,\n\n        userTokenAccount: userTokenAccountId,\n        tokenManager: tokenManagerId,\n\n        user: provider.wallet.publicKey,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withSetNamespaceReverseEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  mintId: PublicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [entryId] = await findNameEntryId(namespaceId, entryName);\n  const [reverseEntryId] = await findReverseEntryId(\n    namespaceId,\n    wallet.publicKey\n  );\n\n  const userTokenAccountId = await splToken.Token.getAssociatedTokenAddress(\n    splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n    splToken.TOKEN_PROGRAM_ID,\n    mintId,\n    provider.wallet.publicKey\n  );\n  const [tokenManagerId] = await findTokenManagerAddress(mintId);\n  transaction.add(\n    namespacesProgram.instruction.setNamespaceReverseEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: entryId,\n        reverseEntry: reverseEntryId,\n        userTokenAccount: userTokenAccountId,\n        tokenManager: tokenManagerId,\n        user: provider.wallet.publicKey,\n        payer: payer,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withCreateClaimRequest(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  user: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [claimRequestId, claimRequestBump] = await findClaimRequestId(\n    namespaceId,\n    entryName,\n    user\n  );\n\n  transaction.add(\n    namespacesProgram.instruction.createClaimRequest(\n      entryName,\n      claimRequestBump,\n      user,\n      {\n        accounts: {\n          namespace: namespaceId,\n          payer: provider.wallet.publicKey,\n          claimRequest: claimRequestId,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        },\n      }\n    )\n  );\n  return transaction;\n}\n\nexport async function withUpdateClaimRequest(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  rentRequestId: PublicKey,\n  isApproved: boolean,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, entryName);\n  transaction.add(\n    namespacesProgram.instruction.updateClaimRequest(isApproved, {\n      accounts: {\n        nameEntry: nameEntryId,\n        namespace: namespaceId,\n        approveAuthority: provider.wallet.publicKey,\n        rentRequest: rentRequestId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withRevokeReverseEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  reverseEntryId: PublicKey,\n  claimRequestId: PublicKey\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, entryName);\n  transaction.add(\n    namespacesProgram.instruction.revokeReverseEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: nameEntryId,\n        reverseEntry: reverseEntryId,\n        claimRequest: claimRequestId,\n        invalidator: wallet.publicKey,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateExpiredReverseEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    reverseEntryId: PublicKey;\n    invalidator?: PublicKey;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(params.namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, params.entryName);\n  const namespaceTokenAccountId = await findAta(\n    params.mintId,\n    namespaceId,\n    true\n  );\n  transaction.add(\n    namespacesProgram.instruction.invalidateExpiredReverseEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: nameEntryId,\n        namespaceTokenAccount: namespaceTokenAccountId,\n        reverseNameEntry: params.reverseEntryId,\n        invalidator: params.invalidator || namespaceId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateTransferableReverseEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    reverseEntryId: PublicKey;\n    invalidator?: PublicKey;\n  }\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n  const [namespaceId] = await findNamespaceId(params.namespaceName);\n  const [nameEntryId] = await findNameEntryId(namespaceId, params.entryName);\n  const [tokenManagerId] = await findTokenManagerAddress(params.mintId);\n  transaction.add(\n    namespacesProgram.instruction.invalidateTransferableReverseEntry({\n      accounts: {\n        namespace: namespaceId,\n        nameEntry: nameEntryId,\n        tokenManager: tokenManagerId,\n        reverseNameEntry: params.reverseEntryId,\n        invalidator: params.invalidator || namespaceId,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport async function withInvalidateReverseEntry(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    namespaceName: string;\n    mintId: PublicKey;\n    entryName: string;\n    reverseEntryId: PublicKey;\n    invalidator?: PublicKey;\n    transferable: boolean;\n  }\n): Promise<Transaction> {\n  if (params.transferable) {\n    return withInvalidateTransferableReverseEntry(\n      transaction,\n      connection,\n      wallet,\n      params\n    );\n  } else {\n    return withInvalidateExpiredReverseEntry(\n      transaction,\n      connection,\n      wallet,\n      params\n    );\n  }\n}\n\nexport async function withUpdateMintMetadata(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceId: PublicKey,\n  entryId: PublicKey,\n  mintId: PublicKey,\n  transaction: Transaction\n): Promise<Transaction> {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  const mintMetadataId = await Metadata.getPDA(mintId);\n  transaction.add(\n    namespacesProgram.instruction.updateNameEntryMintMetadata({\n      accounts: {\n        namespace: namespaceId,\n        updateAuthority: provider.wallet.publicKey,\n        nameEntry: entryId,\n        mintMetadata: mintMetadataId,\n        tokenMetadataProgram: mplTokenMetadata.MetadataProgram.PUBKEY,\n      },\n    })\n  );\n  return transaction;\n}\n\nexport function withCloseNameEntry(\n  connection: Connection,\n  wallet: Wallet,\n  namespaceId: PublicKey,\n  transaction: Transaction\n): Transaction {\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const namespacesProgram = new anchor.Program<NAMESPACES_PROGRAM>(\n    NAMESPACES_IDL,\n    NAMESPACES_PROGRAM_ID,\n    provider\n  );\n\n  transaction.add(\n    namespacesProgram.instruction.closeNameEntry({\n      accounts: {\n        namespace: namespaceId,\n        invalidator: wallet.publicKey,\n      },\n    })\n  );\n  return transaction;\n}\n"]}