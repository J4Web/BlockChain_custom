import { InvalidationType } from "@cardinal/token-manager/dist/cjs/programs/tokenManager";
import * as anchor from "@project-serum/anchor";
import type { Wallet } from "@saberhq/solana-contrib";
import type { Connection, Keypair, Transaction } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
export declare function withInit(connection: Connection, wallet: Wallet, rentalPercentage: number, transaction: Transaction): Promise<Transaction>;
export declare function withCreateNamespace(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    schema?: number;
    updateAuthority: PublicKey;
    rentAuthority: PublicKey;
    approveAuthority?: PublicKey;
    paymentAmountDaily?: anchor.BN;
    paymentMint?: PublicKey;
    minRentalSeconds?: anchor.BN;
    maxRentalSeconds?: anchor.BN;
    transferableEntries: boolean;
    limit?: number;
    maxExpiration?: anchor.BN;
    invalidationType?: InvalidationType;
}): Promise<Transaction>;
export declare function withUpdateNamespace(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, params: {
    updateAuthority?: PublicKey;
    rentAuthority?: PublicKey;
    approveAuthority?: PublicKey;
    paymentAmountDaily?: anchor.BN;
    paymentMint?: PublicKey;
    minRentalSeconds?: anchor.BN;
    maxRentalSeconds?: anchor.BN;
    transferableEntries?: boolean;
    limit?: number;
    maxExpiration?: anchor.BN;
}): Promise<Transaction>;
export declare function withClaimNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, mintId: PublicKey, duration?: number, requestor?: anchor.web3.PublicKey, payer?: anchor.web3.PublicKey): Promise<Transaction>;
export declare function withInitNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string): Promise<Transaction>;
export declare function withInitNameEntryMint(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, mintKeypair: Keypair): Promise<Transaction>;
export declare function withRevokeNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, mintId: PublicKey, claimRequestId: PublicKey): Promise<Transaction>;
export declare function withInvalidateExpiredNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    invalidator?: PublicKey;
}): Promise<Transaction>;
export declare function withInvalidateTransferableNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    invalidator?: PublicKey;
}): Promise<Transaction>;
export declare function withInvalidateNameEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    invalidator?: PublicKey;
    transferable: boolean;
}): Promise<Transaction>;
export declare function withSetEntryData(connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, mintId: PublicKey, transaction: Transaction): Promise<Transaction>;
export declare function withSetNamespaceReverseEntry(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, mintId: PublicKey, payer?: anchor.web3.PublicKey): Promise<Transaction>;
export declare function withCreateClaimRequest(connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, user: PublicKey, transaction: Transaction): Promise<Transaction>;
export declare function withUpdateClaimRequest(connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, rentRequestId: PublicKey, isApproved: boolean, transaction: Transaction): Promise<Transaction>;
export declare function withRevokeReverseEntry(transaction: Transaction, connection: Connection, wallet: Wallet, namespaceName: string, entryName: string, reverseEntryId: PublicKey, claimRequestId: PublicKey): Promise<Transaction>;
export declare function withInvalidateExpiredReverseEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    reverseEntryId: PublicKey;
    invalidator?: PublicKey;
}): Promise<Transaction>;
export declare function withInvalidateTransferableReverseEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    reverseEntryId: PublicKey;
    invalidator?: PublicKey;
}): Promise<Transaction>;
export declare function withInvalidateReverseEntry(transaction: Transaction, connection: Connection, wallet: Wallet, params: {
    namespaceName: string;
    mintId: PublicKey;
    entryName: string;
    reverseEntryId: PublicKey;
    invalidator?: PublicKey;
    transferable: boolean;
}): Promise<Transaction>;
export declare function withUpdateMintMetadata(connection: Connection, wallet: Wallet, namespaceId: PublicKey, entryId: PublicKey, mintId: PublicKey, transaction: Transaction): Promise<Transaction>;
export declare function withCloseNameEntry(connection: Connection, wallet: Wallet, namespaceId: PublicKey, transaction: Transaction): Transaction;
//# sourceMappingURL=instructions.d.ts.map