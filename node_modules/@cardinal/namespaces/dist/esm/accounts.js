import { AnchorProvider, BorshAccountsCoder, Program, utils, } from "@project-serum/anchor";
import { NAMESPACES_IDL, NAMESPACES_PROGRAM_ID } from ".";
import { findClaimRequestId, findDeprecatedReverseEntryId, findGlobalContextId, findNameEntryId, findNamespaceId, findReverseEntryId, } from "./pda";
export async function getNamespaceByName(connection, namespaceName) {
    const [namespaceId] = await findNamespaceId(namespaceName);
    return getNamespace(connection, namespaceId);
}
export async function getNamespace(connection, namespaceId) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const parsed = await namespacesProgram.account.namespace.fetch(namespaceId);
    return {
        parsed,
        pubkey: namespaceId,
    };
}
export async function getGlobalContext(connection) {
    const [globalContextId] = await findGlobalContextId();
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const parsed = await namespacesProgram.account.globalContext.fetch(globalContextId);
    return {
        parsed,
        pubkey: globalContextId,
    };
}
export async function getAllNamespaces(connection) {
    const programAccounts = await connection.getProgramAccounts(NAMESPACES_PROGRAM_ID, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: utils.bytes.bs58.encode(BorshAccountsCoder.accountDiscriminator("namespace")),
                },
            },
        ],
    });
    const namespaces = [];
    const coder = new BorshAccountsCoder(NAMESPACES_IDL);
    programAccounts.forEach((account) => {
        try {
            const namespace = coder.decode("namespace", account.account.data);
            namespaces.push({
                ...account,
                parsed: namespace,
            });
        }
        catch (e) {
            console.log(`Failed to decode namespace`);
        }
    });
    return namespaces.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
}
export async function getNameEntry(connection, namespaceName, entryName) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await findNamespaceId(namespaceName);
    const [entryId] = await findNameEntryId(namespaceId, entryName);
    const parsed = await namespacesProgram.account.entry.fetch(entryId);
    return {
        parsed,
        pubkey: entryId,
    };
}
export async function getNameEntriesForNamespace(connection, namespaceName, entryNames) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await findNamespaceId(namespaceName);
    const entryTuples = await Promise.all(entryNames.map((entryName) => findNameEntryId(namespaceId, entryName)));
    const entryIds = entryTuples.map((tuple) => tuple[0]);
    const result = (await namespacesProgram.account.entry.fetchMultiple(entryIds));
    return result.map((parsed, i) => ({
        parsed,
        pubkey: entryIds[i],
        name: entryNames[i],
    }));
}
export async function getClaimRequest(connection, namespaceName, entryName, requestor) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await findNamespaceId(namespaceName);
    const [claimRequestId] = await findClaimRequestId(namespaceId, entryName, requestor);
    const parsed = await namespacesProgram.account.claimRequest.fetch(claimRequestId);
    return {
        parsed,
        pubkey: claimRequestId,
    };
}
export async function getPendingClaimRequests(connection) {
    const programAccounts = await connection.getProgramAccounts(NAMESPACES_PROGRAM_ID, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: utils.bytes.bs58.encode(BorshAccountsCoder.accountDiscriminator("claimRequest")),
                },
            },
        ],
    });
    const pendingClaimRequests = [];
    const coder = new BorshAccountsCoder(NAMESPACES_IDL);
    programAccounts.forEach((account) => {
        try {
            const claimRequest = coder.decode("claimRequest", account.account.data);
            if (!claimRequest.isApproved) {
                pendingClaimRequests.push({
                    ...account,
                    parsed: claimRequest,
                });
            }
        }
        catch (e) {
            console.log(`Failed to decode claim request`);
        }
    });
    return pendingClaimRequests;
}
export async function getReverseNameEntryForNamespace(connection, pubkey, namespace) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [reverseEntryId] = await findReverseEntryId(namespace, pubkey);
    const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
    return {
        parsed,
        pubkey: reverseEntryId,
    };
}
export async function getReverseEntry(connection, pubkey, namespace, disallowGlobal) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const namespacesProgram = new Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    try {
        if (!namespace) {
            throw new Error("Skipping to deprecated version");
        }
        const [reverseEntryId] = await findReverseEntryId(namespace, pubkey);
        const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
        if (!parsed) {
            throw new Error("Failed trying deprecated global reverse entry");
        }
        return {
            parsed,
            pubkey: reverseEntryId,
        };
    }
    catch (e) {
        if (disallowGlobal) {
            throw new Error("Reverse entry not found and global reverse entry disallowed");
        }
        const [reverseEntryId] = await findDeprecatedReverseEntryId(pubkey);
        const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
        return {
            parsed,
            pubkey: reverseEntryId,
        };
    }
}
//# sourceMappingURL=accounts.js.map