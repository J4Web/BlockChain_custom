{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { PAYMENT_MANAGER_ADDRESS } from \"@cardinal/token-manager/dist/cjs/programs/paymentManager\";\nimport { getPaymentManager } from \"@cardinal/token-manager/dist/cjs/programs/paymentManager/accounts\";\nimport { findPaymentManagerAddress } from \"@cardinal/token-manager/dist/cjs/programs/paymentManager/pda\";\nimport { TIME_INVALIDATOR_ADDRESS } from \"@cardinal/token-manager/dist/cjs/programs/timeInvalidator\";\nimport { findTimeInvalidatorAddress } from \"@cardinal/token-manager/dist/cjs/programs/timeInvalidator/pda\";\nimport { withRemainingAccountsForPayment } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { AccountMeta, Connection, Transaction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { getNamespace, getReverseEntry } from \"./accounts\";\nimport { DEFAULT_PAYMENT_MANAGER, IDENTITIES } from \"./constants\";\n\nexport function formatName(namespace: string, name: string): string {\n  return IDENTITIES.includes(namespace) ? `@${name}` : `${name}.${namespace}`;\n}\n\nexport function breakName(fullName: string): [string, string] {\n  if (fullName.startsWith(\"@\")) {\n    return [\"twitter\", fullName.split(\"@\")[1]!];\n  }\n  const [entryName, namespace] = fullName.split(\".\");\n  return [namespace!, entryName!];\n}\n\nexport function breakIdentity(fullName: string): [string, string] {\n  if (fullName.startsWith(\"@\")) {\n    const namespace = fullName.split(\":\")[1] || \"twitter\";\n    const entryName = fullName.includes(\":\")\n      ? fullName.split(\"@\")[1]!.split(\":\")[0]!\n      : fullName.split(\"@\")[1]!;\n    return [namespace, entryName];\n  }\n  const [entryName, namespace] = fullName.split(\".\");\n  return [namespace!, entryName!];\n}\n\n/**\n * shorten the checksummed version of the input address to have 4 characters at start and end\n * @param address\n * @param chars\n * @returns\n */\nexport function shortenAddress(address: string, chars = 5): string {\n  return `${address.substring(0, chars)}...${address.substring(\n    address.length - chars\n  )}`;\n}\n\nexport function displayAddress(address: string, shorten = true): string {\n  return shorten ? shortenAddress(address) : address;\n}\n\nexport async function tryGetName(\n  connection: Connection,\n  pubkey: PublicKey,\n  namespace?: PublicKey,\n  disallowGlobal?: boolean\n): Promise<string | undefined> {\n  try {\n    const reverseEntry = await getReverseEntry(\n      connection,\n      pubkey,\n      namespace,\n      disallowGlobal\n    );\n    return formatName(\n      reverseEntry.parsed.namespaceName,\n      reverseEntry.parsed.entryName\n    );\n  } catch (e) {\n    console.log(e);\n  }\n  return undefined;\n}\n\nexport async function nameForDisplay(\n  connection: Connection,\n  pubkey: PublicKey,\n  namespace: PublicKey\n): Promise<string> {\n  const name = await tryGetName(connection, pubkey, namespace);\n  return name || displayAddress(pubkey.toString());\n}\n\nexport const withRemainingAccountsForClaim = async (\n  connection: Connection,\n  transaction: Transaction,\n  wallet: Wallet,\n  namespaceId: PublicKey,\n  tokenManagerId: PublicKey,\n  duration?: number\n): Promise<AccountMeta[]> => {\n  const namespace = await getNamespace(connection, namespaceId);\n  if (\n    namespace.parsed.paymentAmountDaily.toNumber() > 0 ||\n    namespace.parsed.maxExpiration\n  ) {\n    const [paymentManagerId] = await findPaymentManagerAddress(\n      DEFAULT_PAYMENT_MANAGER\n    );\n    const [timeInvalidatorId] = await findTimeInvalidatorAddress(\n      tokenManagerId\n    );\n    const accounts = [\n      {\n        pubkey: namespace.parsed.paymentMint,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: paymentManagerId,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: timeInvalidatorId,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: TIME_INVALIDATOR_ADDRESS,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    if (duration && duration > 0) {\n      const [paymentTokenAccountId] = await withRemainingAccountsForPayment(\n        transaction,\n        connection,\n        wallet,\n        namespace.parsed.paymentMint,\n        namespaceId,\n        paymentManagerId\n      );\n      const payerTokenAccountId = await findAta(\n        namespace.parsed.paymentMint,\n        wallet.publicKey\n      );\n      const paymentManagerData = await tryGetAccount(() =>\n        getPaymentManager(connection, paymentManagerId)\n      );\n      const feeCollectorTokenAccountId =\n        await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          namespace.parsed.paymentMint,\n          paymentManagerData\n            ? paymentManagerData.parsed.feeCollector\n            : PublicKey.default,\n          wallet.publicKey,\n          true\n        );\n      accounts.concat([\n        {\n          pubkey: payerTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: paymentTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: feeCollectorTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: PAYMENT_MANAGER_ADDRESS,\n          isSigner: false,\n          isWritable: false,\n        },\n      ]);\n    }\n    return accounts;\n  } else {\n    return [];\n  }\n};\n"]}