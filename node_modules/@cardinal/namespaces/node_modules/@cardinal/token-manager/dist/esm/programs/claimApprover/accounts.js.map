{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/claimApprover/accounts.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EACd,kBAAkB,EAClB,OAAO,GACR,MAAM,uBAAuB,CAAC;AAQ/B,OAAO,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AACzE,OAAO,EAAE,wBAAwB,EAAE,MAAM,OAAO,CAAC;AAEjD,iBAAiB;AACjB,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACnC,UAAsB,EACtB,cAAyB,EACoB,EAAE;IAC/C,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,oBAAoB,GAAG,IAAI,OAAO,CACtC,kBAAkB,EAClB,sBAAsB,EACtB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,wBAAwB,CAAC,cAAc,CAAC,CAAC;IAEzE,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CACvE,eAAe,CAChB,CAAC;IACF,OAAO;QACL,6DAA6D;QAC7D,aAAa;QACb,MAAM;QACN,MAAM,EAAE,eAAe;KACxB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA6B,EACkB,EAAE;IACjD,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,oBAAoB,GAAG,IAAI,OAAO,CACtC,kBAAkB,EAClB,sBAAsB,EACtB,QAAQ,CACT,CAAC;IAEF,6DAA6D;IAC7D,aAAa;IACb,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAI;QACF,cAAc;YACZ,MAAM,oBAAoB,CAAC,OAAO,CAAC,iBAAiB,CAAC,aAAa,CAChE,gBAAgB,CACjB,CAAC;KACL;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,6DAA6D;IAC7D,aAAa;IACb,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACpC,mEAAmE;QACnE,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;KAC5B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EACvC,UAAsB,EACyB,EAAE;IACjD,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,sBAAsB,CACvB,CAAC;IAEF,MAAM,cAAc,GAAyC,EAAE,CAAC;IAChE,MAAM,KAAK,GAAG,IAAI,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IACzD,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAClC,IAAI;YACF,MAAM,iBAAiB,GAA0B,KAAK,CAAC,MAAM,CAC3D,mBAAmB,EACnB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,cAAc,CAAC,IAAI,CAAC;gBAClB,GAAG,OAAO;gBACV,MAAM,EAAE,iBAAiB;aAC1B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;IACH,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["import {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n} from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type {\n  CLAIM_APPROVER_PROGRAM,\n  PaidClaimApproverData,\n} from \"./constants\";\nimport { CLAIM_APPROVER_ADDRESS, CLAIM_APPROVER_IDL } from \"./constants\";\nimport { findClaimApproverAddress } from \"./pda\";\n\n// TODO fix types\nexport const getClaimApprover = async (\n  connection: Connection,\n  tokenManagerId: PublicKey\n): Promise<AccountData<PaidClaimApproverData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  const [claimApproverId] = await findClaimApproverAddress(tokenManagerId);\n\n  const parsed = await claimApproverProgram.account.paidClaimApprover.fetch(\n    claimApproverId\n  );\n  return {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    parsed,\n    pubkey: claimApproverId,\n  };\n};\n\nexport const getClaimApprovers = async (\n  connection: Connection,\n  claimApproverIds: PublicKey[]\n): Promise<AccountData<PaidClaimApproverData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  let claimApprovers = [];\n  try {\n    claimApprovers =\n      await claimApproverProgram.account.paidClaimApprover.fetchMultiple(\n        claimApproverIds\n      );\n  } catch (e) {\n    console.log(e);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return claimApprovers.map((tm, i) => ({\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    parsed: tm,\n    pubkey: claimApproverIds[i],\n  }));\n};\n\nexport const getAllClaimApprovers = async (\n  connection: Connection\n): Promise<AccountData<PaidClaimApproverData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    CLAIM_APPROVER_ADDRESS\n  );\n\n  const claimApprovers: AccountData<PaidClaimApproverData>[] = [];\n  const coder = new BorshAccountsCoder(CLAIM_APPROVER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const claimApproverData: PaidClaimApproverData = coder.decode(\n        \"paidClaimApprover\",\n        account.account.data\n      );\n      claimApprovers.push({\n        ...account,\n        parsed: claimApproverData,\n      });\n    } catch (e) {\n      console.log(`Failed to decode claim approver data`);\n    }\n  });\n  return claimApprovers;\n};\n"]}