import { BN } from "@project-serum/anchor";
import type { Wallet } from "@saberhq/solana-contrib";
import type { Connection, PublicKey, Transaction } from "@solana/web3.js";
import { Keypair } from "@solana/web3.js";
import type { ClaimApproverParams } from "./programs/claimApprover/instruction";
import type { TimeInvalidationParams } from "./programs/timeInvalidator/instruction";
import type { TokenManagerData } from "./programs/tokenManager";
import { InvalidationType, TokenManagerKind } from "./programs/tokenManager";
import type { UseInvalidationParams } from "./programs/useInvalidator/instruction";
import type { AccountData } from "./utils";
export declare type IssueParameters = {
    claimPayment?: ClaimApproverParams;
    timeInvalidation?: TimeInvalidationParams;
    useInvalidation?: UseInvalidationParams;
    mint: PublicKey;
    amount?: BN;
    issuerTokenAccountId: PublicKey;
    visibility?: "private" | "public";
    kind?: TokenManagerKind;
    invalidationType?: InvalidationType;
    receiptOptions?: {
        receiptMintKeypair: Keypair;
    };
    customInvalidators?: PublicKey[];
};
/**
 * Main method for issuing any managed token
 * Allows for optional payment, optional usages or expiration and includes a otp for private links
 * @param connection
 * @param wallet
 * @param parameters
 * @returns Transaction, public key for the created token manager and a otp if necessary for private links
 */
export declare const withIssueToken: (transaction: Transaction, connection: Connection, wallet: Wallet, { claimPayment, timeInvalidation, useInvalidation, mint, amount, issuerTokenAccountId, kind, invalidationType, visibility, receiptOptions, customInvalidators, }: IssueParameters) => Promise<[Transaction, PublicKey, Keypair | undefined]>;
/**
 * Add claim instructions to a transaction
 * @param transaction
 * @param connection
 * @param wallet
 * @param tokenManagerId
 * @param otpKeypair
 * @returns Transaction with relevent claim instructions added
 */
export declare const withClaimToken: (transaction: Transaction, connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, additionalOptions?: {
    otpKeypair?: Keypair | null;
    payer?: PublicKey;
}) => Promise<Transaction>;
export declare const withUnissueToken: (transaction: Transaction, connection: Connection, wallet: Wallet, mintId: PublicKey) => Promise<Transaction>;
export declare const withInvalidate: (transaction: Transaction, connection: Connection, wallet: Wallet, mintId: PublicKey, UTCNow?: number) => Promise<Transaction>;
export declare const withReturn: (transaction: Transaction, connection: Connection, wallet: Wallet, tokenManagerData: AccountData<TokenManagerData>) => Promise<Transaction>;
export declare const withUse: (transaction: Transaction, connection: Connection, wallet: Wallet, mintId: PublicKey, usages: number, collector?: PublicKey) => Promise<Transaction>;
export declare const withExtendExpiration: (transaction: Transaction, connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, secondsToAdd: number) => Promise<Transaction>;
export declare const withExtendUsages: (transaction: Transaction, connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, usagesToAdd: number) => Promise<Transaction>;
export declare const withResetExpiration: (transaction: Transaction, connection: Connection, wallet: Wallet, tokenManagerId: PublicKey) => Promise<Transaction>;
//# sourceMappingURL=transaction.d.ts.map