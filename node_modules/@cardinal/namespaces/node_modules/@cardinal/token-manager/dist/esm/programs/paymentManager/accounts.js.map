{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/paymentManager/accounts.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EACd,kBAAkB,EAClB,OAAO,GACR,MAAM,uBAAuB,CAAC;AAM/B,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,MAAM,GAAG,CAAC;AAEjE,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA2B,EACe,EAAE;IAC5C,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,qBAAqB,GAAG,IAAI,OAAO,CACvC,mBAAmB,EACnB,uBAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CACrE,gBAAgB,CACjB,CAAC;IACF,OAAO;QACL,MAAM;QACN,MAAM,EAAE,gBAAgB;KACzB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,iBAA8B,EACc,EAAE;IAC9C,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,qBAAqB,GAAG,IAAI,OAAO,CACvC,mBAAmB,EACnB,uBAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,IAAI,eAAe,GAAkC,EAAE,CAAC;IACxD,IAAI;QACF,eAAe;YACb,CAAC,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAC/D,iBAAiB,CAClB,CAAkC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IAED,OAAO,eAAe,CAAC,MAAM,CAC3B,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CACb,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EACpE,EAAuC,CACxC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EACxC,UAAsB,EACsB,EAAE;IAC9C,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,uBAAuB,CACxB,CAAC;IAEF,MAAM,eAAe,GAAsC,EAAE,CAAC;IAC9D,MAAM,KAAK,GAAG,IAAI,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;IAC1D,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAClC,IAAI;YACF,MAAM,kBAAkB,GAA0B,KAAK,CAAC,MAAM,CAC5D,gBAAgB,EAChB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,eAAe,CAAC,IAAI,CAAC;gBACnB,GAAG,OAAO;gBACV,MAAM,EAAE,kBAAkB;aAC3B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;IACH,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n} from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type { PaidClaimApproverData } from \"../claimApprover\";\nimport type { PAYMENT_MANAGER_PROGRAM, PaymentManagerData } from \".\";\nimport { PAYMENT_MANAGER_ADDRESS, PAYMENT_MANAGER_IDL } from \".\";\n\nexport const getPaymentManager = async (\n  connection: Connection,\n  paymentManagerId: PublicKey\n): Promise<AccountData<PaymentManagerData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  const parsed = await paymentManagerProgram.account.paymentManager.fetch(\n    paymentManagerId\n  );\n  return {\n    parsed,\n    pubkey: paymentManagerId,\n  };\n};\n\nexport const getPaymentManagers = async (\n  connection: Connection,\n  paymentManagerIds: PublicKey[]\n): Promise<AccountData<PaymentManagerData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  let paymentManagers: (PaymentManagerData | null)[] = [];\n  try {\n    paymentManagers =\n      (await paymentManagerProgram.account.paymentManager.fetchMultiple(\n        paymentManagerIds\n      )) as (PaymentManagerData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n\n  return paymentManagers.reduce(\n    (acc, tm, i) =>\n      tm ? [...acc, { parsed: tm, pubkey: paymentManagerIds[i]! }] : acc,\n    [] as AccountData<PaymentManagerData>[]\n  );\n};\n\nexport const getAllPaymentManagers = async (\n  connection: Connection\n): Promise<AccountData<PaymentManagerData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    PAYMENT_MANAGER_ADDRESS\n  );\n\n  const paymentManagers: AccountData<PaymentManagerData>[] = [];\n  const coder = new BorshAccountsCoder(PAYMENT_MANAGER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const paymentManagerData: PaidClaimApproverData = coder.decode(\n        \"paymentManager\",\n        account.account.data\n      );\n      paymentManagers.push({\n        ...account,\n        parsed: paymentManagerData,\n      });\n    } catch (e) {\n      console.log(`Failed to decode claim approver data`);\n    }\n  });\n  return paymentManagers;\n};\n"]}