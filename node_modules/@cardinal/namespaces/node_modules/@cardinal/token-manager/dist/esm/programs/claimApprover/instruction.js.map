{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/claimApprover/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport {\n  DEFAULT_PAYMENT_MANAGER_NAME,\n  PAYMENT_MANAGER_ADDRESS,\n} from \"../paymentManager\";\nimport { findPaymentManagerAddress } from \"../paymentManager/pda\";\nimport { CRANK_KEY, TOKEN_MANAGER_ADDRESS } from \"../tokenManager\";\nimport { findClaimReceiptId } from \"../tokenManager/pda\";\nimport type { CLAIM_APPROVER_PROGRAM } from \"./constants\";\nimport { CLAIM_APPROVER_ADDRESS, CLAIM_APPROVER_IDL } from \"./constants\";\nimport { findClaimApproverAddress } from \"./pda\";\n\nexport type ClaimApproverParams = {\n  paymentMint: PublicKey;\n  paymentAmount: number;\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n};\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  params: ClaimApproverParams\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  const [claimApproverId, _claimApproverBump] = await findClaimApproverAddress(\n    tokenManagerId\n  );\n\n  const [defaultPaymentManagerId] = await findPaymentManagerAddress(\n    DEFAULT_PAYMENT_MANAGER_NAME\n  );\n\n  return [\n    claimApproverProgram.instruction.init(\n      {\n        paymentMint: params.paymentMint,\n        paymentAmount: new BN(params.paymentAmount),\n        collector: params.collector || CRANK_KEY,\n        paymentManager: params.paymentManager || defaultPaymentManagerId,\n      },\n      {\n        accounts: {\n          tokenManager: tokenManagerId,\n          claimApprover: claimApproverId,\n          issuer: wallet.publicKey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    claimApproverId,\n  ];\n};\n\nexport const pay = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  payerTokenAccountId: PublicKey,\n  paymentManager: PublicKey,\n  paymentAccounts: [PublicKey, PublicKey, AccountMeta[]]\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  const [claimReceiptId, _claimReceiptBump] = await findClaimReceiptId(\n    tokenManagerId,\n    wallet.publicKey\n  );\n\n  const [claimApproverId] = await findClaimApproverAddress(tokenManagerId);\n  const [paymentTokenAccountId, feeCollectorTokenAccount, remainingAccounts] =\n    paymentAccounts;\n  return claimApproverProgram.instruction.pay({\n    accounts: {\n      tokenManager: tokenManagerId,\n      paymentTokenAccount: paymentTokenAccountId,\n      feeCollectorTokenAccount: feeCollectorTokenAccount,\n      paymentManager: paymentManager,\n      claimApprover: claimApproverId,\n      payer: wallet.publicKey,\n      payerTokenAccount: payerTokenAccountId,\n      claimReceipt: claimReceiptId,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    },\n    remainingAccounts,\n  });\n};\n\nexport const close = (\n  connection: Connection,\n  wallet: Wallet,\n  claimApproverId: PublicKey,\n  tokenManagerId: PublicKey,\n  collector?: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  return claimApproverProgram.instruction.close({\n    accounts: {\n      tokenManager: tokenManagerId,\n      claimApprover: claimApproverId,\n      collector: collector || CRANK_KEY,\n      closer: wallet.publicKey,\n    },\n  });\n};\n"]}