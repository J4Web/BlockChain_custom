{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/timeInvalidator/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAC;AAI3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAGpD,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,gBAA+C,EAC/C,mBAAqD,EACrD,SAAiB,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EACzB,EAAE;IACX,OAAO,OAAO,CACZ,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,CAAC,KAAK,MAAK,iBAAiB,CAAC,WAAW;QAC9D,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,aAAa;YACxC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC7D,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU;gBACpC,gBAAgB,CAAC,MAAM,CAAC,KAAK,KAAK,iBAAiB,CAAC,OAAO;gBAC3D,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC5D,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU;gBACrC,gBAAgB,CAAC,MAAM,CAAC,KAAK,KAAK,iBAAiB,CAAC,OAAO;gBAC3D,mBAAmB,CAAC,MAAM,CAAC,eAAe;gBAC1C,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAChB,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CACxC,mBAAmB,CAAC,MAAM,CAAC,eAAe,CAC3C,CACF,CAAC,CAAC,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { BN } from \"@project-serum/anchor\";\n\nimport type { AccountData } from \"../..\";\nimport type { TokenManagerData } from \"../tokenManager\";\nimport { TokenManagerState } from \"../tokenManager\";\nimport type { TimeInvalidatorData } from \".\";\n\nexport const shouldTimeInvalidate = (\n  tokenManagerData: AccountData<TokenManagerData>,\n  timeInvalidatorData: AccountData<TimeInvalidatorData>,\n  UTCNow: number = Date.now() / 1000\n): boolean => {\n  return Boolean(\n    tokenManagerData?.parsed.state !== TokenManagerState.Invalidated &&\n      ((timeInvalidatorData.parsed.maxExpiration &&\n        new BN(UTCNow).gte(timeInvalidatorData.parsed.maxExpiration)) ||\n        (timeInvalidatorData.parsed.expiration &&\n          tokenManagerData.parsed.state === TokenManagerState.Claimed &&\n          new BN(UTCNow).gte(timeInvalidatorData.parsed.expiration)) ||\n        (!timeInvalidatorData.parsed.expiration &&\n          tokenManagerData.parsed.state === TokenManagerState.Claimed &&\n          timeInvalidatorData.parsed.durationSeconds &&\n          new BN(UTCNow).gte(\n            tokenManagerData.parsed.stateChangedAt.add(\n              timeInvalidatorData.parsed.durationSeconds\n            )\n          )))\n  );\n};\n"]}