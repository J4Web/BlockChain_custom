import { Edition, MetadataProgram, } from "@metaplex-foundation/mpl-token-metadata";
import { Token, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { Keypair } from "@solana/web3.js";
import { findAta, withFindOrInitAssociatedTokenAccount } from "../..";
import { tryGetAccount } from "../../utils";
import { getPaymentManager } from "../paymentManager/accounts";
import { InvalidationType, TokenManagerKind, TokenManagerState } from ".";
import { findMintManagerId } from "./pda";
export const getRemainingAccountsForKind = async (mintId, tokenManagerKind) => {
    if (tokenManagerKind === TokenManagerKind.Managed) {
        const [mintManagerId] = await findMintManagerId(mintId);
        return [
            {
                pubkey: mintManagerId,
                isSigner: false,
                isWritable: true,
            },
        ];
    }
    else if (tokenManagerKind === TokenManagerKind.Edition) {
        const editionId = await Edition.getPDA(mintId);
        return [
            {
                pubkey: editionId,
                isSigner: false,
                isWritable: false,
            },
            {
                pubkey: MetadataProgram.PUBKEY,
                isSigner: false,
                isWritable: false,
            },
        ];
    }
    else {
        return [];
    }
};
export const withRemainingAccountsForPayment = async (transaction, connection, wallet, paymentMint, issuerId, paymentManagerId, receiptMint, payer = wallet.publicKey) => {
    var _a;
    if (receiptMint) {
        const receiptMintLargestAccount = await connection.getTokenLargestAccounts(receiptMint);
        // get holder of receipt mint
        const receiptTokenAccountId = (_a = receiptMintLargestAccount.value[0]) === null || _a === void 0 ? void 0 : _a.address;
        if (!receiptTokenAccountId)
            throw new Error("No token accounts found");
        const receiptMintToken = new Token(connection, receiptMint, TOKEN_PROGRAM_ID, Keypair.generate());
        const receiptTokenAccount = await receiptMintToken.getAccountInfo(receiptTokenAccountId);
        // get ATA for this mint of receipt mint holder
        const returnTokenAccountId = receiptTokenAccount.owner.equals(wallet.publicKey)
            ? await findAta(paymentMint, receiptTokenAccount.owner, true)
            : await withFindOrInitAssociatedTokenAccount(transaction, connection, paymentMint, receiptTokenAccount.owner, payer, true);
        const paymentManager = await tryGetAccount(() => getPaymentManager(connection, paymentManagerId));
        const feeCollectorTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, connection, paymentMint, paymentManager ? paymentManager.parsed.feeCollector : paymentManagerId, payer, true);
        return [
            returnTokenAccountId,
            feeCollectorTokenAccountId,
            [
                {
                    pubkey: receiptTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
            ],
        ];
    }
    else {
        const issuerTokenAccountId = issuerId.equals(wallet.publicKey)
            ? await findAta(paymentMint, issuerId, true)
            : await withFindOrInitAssociatedTokenAccount(transaction, connection, paymentMint, issuerId, payer, true);
        const paymentManager = await tryGetAccount(() => getPaymentManager(connection, paymentManagerId));
        const feeCollectorTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, connection, paymentMint, paymentManager ? paymentManager.parsed.feeCollector : paymentManagerId, payer, true);
        return [issuerTokenAccountId, feeCollectorTokenAccountId, []];
    }
};
export const withRemainingAccountsForReturn = async (transaction, connection, wallet, tokenManagerData, allowOwnerOffCurve = true) => {
    var _a;
    const { issuer, mint, invalidationType, receiptMint, state } = tokenManagerData.parsed;
    if (invalidationType === InvalidationType.Return ||
        state === TokenManagerState.Issued) {
        if (receiptMint) {
            const receiptMintLargestAccount = await connection.getTokenLargestAccounts(receiptMint);
            // get holder of receipt mint
            const receiptTokenAccountId = (_a = receiptMintLargestAccount.value[0]) === null || _a === void 0 ? void 0 : _a.address;
            if (!receiptTokenAccountId)
                throw new Error("No token accounts found");
            const receiptMintToken = new Token(connection, receiptMint, TOKEN_PROGRAM_ID, Keypair.generate());
            const receiptTokenAccount = await receiptMintToken.getAccountInfo(receiptTokenAccountId);
            // get ATA for this mint of receipt mint holder
            const returnTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, connection, mint, receiptTokenAccount.owner, wallet.publicKey, allowOwnerOffCurve);
            return [
                {
                    pubkey: returnTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
                {
                    pubkey: receiptTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
            ];
        }
        else {
            const issuerTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, connection, mint, issuer, wallet.publicKey, allowOwnerOffCurve);
            return [
                {
                    pubkey: issuerTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
            ];
        }
    }
    else {
        return [];
    }
};
//# sourceMappingURL=utils.js.map