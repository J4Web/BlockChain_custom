{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/tokenManager/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AnchorProvider,\n  BN,\n  BorshAccountsCoder,\n  Program,\n  utils,\n} from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type { TokenManagerState } from \".\";\nimport type {\n  MintCounterData,\n  MintManagerData,\n  TOKEN_MANAGER_PROGRAM,\n  TokenManagerData,\n} from \"./constants\";\nimport { TOKEN_MANAGER_ADDRESS, TOKEN_MANAGER_IDL } from \"./constants\";\n\nexport const getTokenManager = async (\n  connection: Connection,\n  tokenManagerId: PublicKey\n): Promise<AccountData<TokenManagerData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const parsed = await tokenManagerProgram.account.tokenManager.fetch(\n    tokenManagerId\n  );\n  return {\n    parsed,\n    pubkey: tokenManagerId,\n  };\n};\n\nexport const getTokenManagers = async (\n  connection: Connection,\n  tokenManagerIds: PublicKey[]\n): Promise<AccountData<TokenManagerData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  let tokenManagers = [];\n  try {\n    tokenManagers =\n      await tokenManagerProgram.account.tokenManager.fetchMultiple(\n        tokenManagerIds\n      );\n  } catch (e) {\n    console.log(e);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return tokenManagers.map((tm, i) => ({\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    parsed: tm,\n    pubkey: tokenManagerIds[i],\n  }));\n};\n\nexport const getTokenManagersByState = async (\n  connection: Connection,\n  state: TokenManagerState | null\n): Promise<AccountData<TokenManagerData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TOKEN_MANAGER_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"tokenManager\")\n            ),\n          },\n        },\n        ...(state\n          ? [\n              {\n                memcmp: {\n                  offset: 92,\n                  bytes: utils.bytes.bs58.encode(\n                    new BN(state).toArrayLike(Buffer, \"le\", 1)\n                  ),\n                },\n              },\n            ]\n          : []),\n      ],\n    }\n  );\n  const tokenManagerDatas: AccountData<TokenManagerData>[] = [];\n  const coder = new BorshAccountsCoder(TOKEN_MANAGER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const tokenManagerData: TokenManagerData = coder.decode(\n        \"tokenManager\",\n        account.account.data\n      );\n      if (tokenManagerData) {\n        tokenManagerDatas.push({\n          ...account,\n          parsed: tokenManagerData,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode token manager data`);\n    }\n  });\n\n  return tokenManagerDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getMintManager = async (\n  connection: Connection,\n  mintManagerId: PublicKey\n): Promise<AccountData<MintManagerData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const parsed = await tokenManagerProgram.account.mintManager.fetch(\n    mintManagerId\n  );\n  return {\n    parsed,\n    pubkey: mintManagerId,\n  };\n};\n\nexport const getMintCounter = async (\n  connection: Connection,\n  mintCounterId: PublicKey\n): Promise<AccountData<MintCounterData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const parsed = await tokenManagerProgram.account.mintCounter.fetch(\n    mintCounterId\n  );\n  return {\n    parsed,\n    pubkey: mintCounterId,\n  };\n};\n\nexport const getTokenManagersForIssuer = async (\n  connection: Connection,\n  issuerId: PublicKey\n): Promise<AccountData<TokenManagerData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TOKEN_MANAGER_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"tokenManager\")\n            ),\n          },\n        },\n        { memcmp: { offset: 19, bytes: issuerId.toBase58() } },\n      ],\n    }\n  );\n\n  const tokenManagerDatas: AccountData<TokenManagerData>[] = [];\n  const coder = new BorshAccountsCoder(TOKEN_MANAGER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const tokenManagerData: TokenManagerData = coder.decode(\n        \"tokenManager\",\n        account.account.data\n      );\n      if (tokenManagerData) {\n        tokenManagerDatas.push({\n          ...account,\n          parsed: tokenManagerData,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode token manager data`);\n    }\n  });\n\n  return tokenManagerDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n"]}