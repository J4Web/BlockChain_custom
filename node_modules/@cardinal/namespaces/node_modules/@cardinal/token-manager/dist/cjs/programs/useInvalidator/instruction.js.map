{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/useInvalidator/instruction.ts"],"names":[],"mappings":";;;AAAA,kDAAoE;AAEpE,iDAAqD;AAOrD,6CAAoE;AAEpE,sDAG2B;AAC3B,+CAAkE;AAElE,kDAIyB;AACzB,iDAAoE;AAEpE,2CAA2E;AAC3E,+BAAkD;AAe3C,MAAM,IAAI,GAAG,KAAK,EACvB,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,MAA6B,EACiB,EAAE;;IAChD,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAC3C,MAAM,IAAA,+BAAyB,EAAC,cAAc,CAAC,CAAC;IAElD,MAAM,CAAC,uBAAuB,CAAC,GAAG,MAAM,IAAA,+BAAyB,EAC/D,6CAA4B,CAC7B,CAAC;IAEF,OAAO;QACL,qBAAqB,CAAC,WAAW,CAAC,IAAI,CACpC;YACE,SAAS,EAAE,MAAM,CAAC,SAAS,IAAI,wBAAS;YACxC,cAAc,EAAE,MAAM,CAAC,cAAc,IAAI,uBAAuB;YAChE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,WAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI;YACnE,SAAS,EAAE,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,SAAS;gBACpC,CAAC,CAAC,IAAI,WAAE,CAAC,MAAA,MAAM,CAAC,SAAS,0CAAE,SAAS,CAAC;gBACrC,CAAC,CAAC,IAAI;YACR,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,IAAI;YACzC,sBAAsB,EAAE,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,sBAAsB;gBAC9D,CAAC,CAAC,IAAI,WAAE,CAAC,MAAA,MAAM,CAAC,SAAS,0CAAE,sBAAsB,CAAC;gBAClD,CAAC,CAAC,IAAI;YACR,oBAAoB,EAAE,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,oBAAoB,KAAI,IAAI;YACpE,eAAe,EAAE,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,eAAe;gBAChD,CAAC,CAAC,IAAI,WAAE,CAAC,MAAA,MAAM,CAAC,SAAS,0CAAE,eAAe,CAAC;gBAC3C,CAAC,CAAC,IAAI;SACT,EACD;YACE,QAAQ,EAAE;gBACR,YAAY,EAAE,cAAc;gBAC5B,cAAc,EAAE,gBAAgB;gBAChC,MAAM,EAAE,MAAM,CAAC,SAAS;gBACxB,KAAK,EAAE,MAAM,CAAC,SAAS;gBACvB,aAAa,EAAE,uBAAa,CAAC,SAAS;aACvC;SACF,CACF;QACD,gBAAgB;KACjB,CAAC;AACJ,CAAC,CAAC;AAnDW,QAAA,IAAI,QAmDf;AAEK,MAAM,eAAe,GAAG,KAAK,EAClC,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,uBAAkC,EAClC,MAAc,EACmB,EAAE;IACnC,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,gBAAgB,CAAC,GAAG,MAAM,IAAA,+BAAyB,EAAC,cAAc,CAAC,CAAC;IAE3E,OAAO,qBAAqB,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,WAAE,CAAC,MAAM,CAAC,EAAE;QACvE,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,qBAAqB,EAAE,uBAAuB;YAC9C,IAAI,EAAE,MAAM,CAAC,SAAS;SACvB;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAzBW,QAAA,eAAe,mBAyB1B;AAEK,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,cAAyB,EACzB,gBAAkC,EAClC,iBAAoC,EACpC,0BAAqC,EACrC,uBAAkC,EAClC,cAA6B,EACI,EAAE;IACnC,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,CAAC,gBAAgB,CAAC,EAAE,gBAAgB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAC/D,IAAA,+BAAyB,EAAC,cAAc,CAAC;QACzC,IAAA,mCAA2B,EAAC,MAAM,EAAE,gBAAgB,CAAC;KACtD,CAAC,CAAC;IAEH,OAAO,qBAAqB,CAAC,WAAW,CAAC,UAAU,CAAC;QAClD,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,WAAW,EAAE,MAAM,CAAC,SAAS;YAC7B,oBAAoB,EAAE,oCAAqB;YAC3C,wBAAwB,EAAE,0BAA0B;YACpD,YAAY,EAAE,4BAAgB;YAC9B,IAAI,EAAE,MAAM;YACZ,qBAAqB,EAAE,uBAAuB;YAC9C,IAAI,EAAE,4BAAkB;SACzB;QACD,iBAAiB,EAAE;YACjB,GAAG,CAAC,iBAAiB,KAAK,gCAAiB,CAAC,OAAO;gBACjD,CAAC,CAAC,gBAAgB;gBAClB,CAAC,CAAC,EAAE,CAAC;YACP,GAAG,cAAc;SAClB;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AA3CW,QAAA,UAAU,cA2CrB;AAEK,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,cAAyB,EACzB,mBAA8B,EAC9B,gBAA2B,EAC3B,WAAmB,EACnB,eAAsD,EAC9B,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,qBAAqB,EAAE,wBAAwB,EAAE,iBAAiB,CAAC,GACxE,eAAe,CAAC;IAClB,OAAO,qBAAqB,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,WAAE,CAAC,WAAW,CAAC,EAAE;QACzE,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,cAAc,EAAE,cAAc;YAC9B,mBAAmB,EAAE,qBAAqB;YAC1C,wBAAwB,EAAE,wBAAwB;YAClD,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,iBAAiB,EAAE,mBAAmB;YACtC,YAAY,EAAE,4BAAgB;YAC9B,sBAAsB,EAAE,wCAAuB;SAChD;QACD,iBAAiB;KAClB,CAAC,CAAC;AACL,CAAC,CAAC;AAlCW,QAAA,YAAY,gBAkCvB;AAEK,MAAM,KAAK,GAAG,CACnB,UAAsB,EACtB,MAAc,EACd,gBAA2B,EAC3B,cAAyB,EACzB,SAAqB,EACG,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,OAAO,qBAAqB,CAAC,WAAW,CAAC,KAAK,CAAC;QAC7C,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,SAAS,EAAE,SAAS,IAAI,wBAAS;YACjC,MAAM,EAAE,MAAM,CAAC,SAAS;SACzB;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAvBW,QAAA,KAAK,SAuBhB","sourcesContent":["import { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport {\n  DEFAULT_PAYMENT_MANAGER_NAME,\n  PAYMENT_MANAGER_ADDRESS,\n} from \"../paymentManager\";\nimport { findPaymentManagerAddress } from \"../paymentManager/pda\";\nimport type { TokenManagerKind } from \"../tokenManager\";\nimport {\n  CRANK_KEY,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerState,\n} from \"../tokenManager\";\nimport { getRemainingAccountsForKind } from \"../tokenManager/utils\";\nimport type { USE_INVALIDATOR_PROGRAM } from \"./constants\";\nimport { USE_INVALIDATOR_ADDRESS, USE_INVALIDATOR_IDL } from \"./constants\";\nimport { findUseInvalidatorAddress } from \"./pda\";\n\nexport type UseInvalidationParams = {\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n  totalUsages?: number;\n  useAuthority?: PublicKey;\n  extension?: {\n    extensionUsages: number;\n    extensionPaymentMint: PublicKey;\n    extensionPaymentAmount: number;\n    maxUsages?: number;\n  };\n};\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  params: UseInvalidationParams\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [useInvalidatorId, _useInvalidatorBump] =\n    await findUseInvalidatorAddress(tokenManagerId);\n\n  const [defaultPaymentManagerId] = await findPaymentManagerAddress(\n    DEFAULT_PAYMENT_MANAGER_NAME\n  );\n\n  return [\n    useInvalidatorProgram.instruction.init(\n      {\n        collector: params.collector || CRANK_KEY,\n        paymentManager: params.paymentManager || defaultPaymentManagerId,\n        totalUsages: params.totalUsages ? new BN(params.totalUsages) : null,\n        maxUsages: params.extension?.maxUsages\n          ? new BN(params.extension?.maxUsages)\n          : null,\n        useAuthority: params.useAuthority || null,\n        extensionPaymentAmount: params.extension?.extensionPaymentAmount\n          ? new BN(params.extension?.extensionPaymentAmount)\n          : null,\n        extensionPaymentMint: params.extension?.extensionPaymentMint || null,\n        extensionUsages: params.extension?.extensionUsages\n          ? new BN(params.extension?.extensionUsages)\n          : null,\n      },\n      {\n        accounts: {\n          tokenManager: tokenManagerId,\n          useInvalidator: useInvalidatorId,\n          issuer: wallet.publicKey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    useInvalidatorId,\n  ];\n};\n\nexport const incrementUsages = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  recipientTokenAccountId: PublicKey,\n  usages: number\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [useInvalidatorId] = await findUseInvalidatorAddress(tokenManagerId);\n\n  return useInvalidatorProgram.instruction.incrementUsages(new BN(usages), {\n    accounts: {\n      tokenManager: tokenManagerId,\n      useInvalidator: useInvalidatorId,\n      recipientTokenAccount: recipientTokenAccountId,\n      user: wallet.publicKey,\n    },\n  });\n};\n\nexport const invalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  tokenManagerId: PublicKey,\n  tokenManagerKind: TokenManagerKind,\n  tokenManagerState: TokenManagerState,\n  tokenManagerTokenAccountId: PublicKey,\n  recipientTokenAccountId: PublicKey,\n  returnAccounts: AccountMeta[]\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [[useInvalidatorId], transferAccounts] = await Promise.all([\n    findUseInvalidatorAddress(tokenManagerId),\n    getRemainingAccountsForKind(mintId, tokenManagerKind),\n  ]);\n\n  return useInvalidatorProgram.instruction.invalidate({\n    accounts: {\n      tokenManager: tokenManagerId,\n      useInvalidator: useInvalidatorId,\n      invalidator: wallet.publicKey,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      mint: mintId,\n      recipientTokenAccount: recipientTokenAccountId,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: [\n      ...(tokenManagerState === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...returnAccounts,\n    ],\n  });\n};\n\nexport const extendUsages = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  paymentManager: PublicKey,\n  payerTokenAccountId: PublicKey,\n  useInvalidatorId: PublicKey,\n  usagesToAdd: number,\n  paymentAccounts: [PublicKey, PublicKey, AccountMeta[]]\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [paymentTokenAccountId, feeCollectorTokenAccount, remainingAccounts] =\n    paymentAccounts;\n  return useInvalidatorProgram.instruction.extendUsages(new BN(usagesToAdd), {\n    accounts: {\n      tokenManager: tokenManagerId,\n      useInvalidator: useInvalidatorId,\n      paymentManager: paymentManager,\n      paymentTokenAccount: paymentTokenAccountId,\n      feeCollectorTokenAccount: feeCollectorTokenAccount,\n      payer: wallet.publicKey,\n      payerTokenAccount: payerTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n    },\n    remainingAccounts,\n  });\n};\n\nexport const close = (\n  connection: Connection,\n  wallet: Wallet,\n  useInvalidatorId: PublicKey,\n  tokenManagerId: PublicKey,\n  collector?: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  return useInvalidatorProgram.instruction.close({\n    accounts: {\n      tokenManager: tokenManagerId,\n      useInvalidator: useInvalidatorId,\n      collector: collector || CRANK_KEY,\n      closer: wallet.publicKey,\n    },\n  });\n};\n"]}