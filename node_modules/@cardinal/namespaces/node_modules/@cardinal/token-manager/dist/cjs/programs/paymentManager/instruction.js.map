{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/paymentManager/instruction.ts"],"names":[],"mappings":";;;AACA,kDAAgE;AAEhE,iDAAqD;AAMrD,6CAAgD;AAEhD,kDAA4C;AAE5C,wBAAiE;AACjE,+BAAkD;AAE3C,MAAM,IAAI,GAAG,KAAK,EACvB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,MAKC,EAC6C,EAAE;IAChD,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,sBAAmB,EACnB,0BAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,gBAAgB,CAAC,GAAG,MAAM,IAAA,+BAAyB,EAAC,IAAI,CAAC,CAAC;IAEjE,OAAO;QACL,qBAAqB,CAAC,WAAW,CAAC,IAAI,CACpC;YACE,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,MAAM,CAAC,YAAY;YACjC,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;YAC/C,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;SAChD,EACD;YACE,QAAQ,EAAE;gBACR,cAAc,EAAE,gBAAgB;gBAChC,SAAS,EAAE,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS;gBAC/C,KAAK,EAAE,MAAM,CAAC,SAAS;gBACvB,aAAa,EAAE,uBAAa,CAAC,SAAS;aACvC;SACF,CACF;QACD,gBAAgB;KACjB,CAAC;AACJ,CAAC,CAAC;AAxCW,QAAA,IAAI,QAwCf;AAEK,MAAM,aAAa,GAAG,KAAK,EAChC,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,MAKC,EACgC,EAAE;IACnC,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,sBAAmB,EACnB,0BAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,gBAAgB,CAAC,GAAG,MAAM,IAAA,+BAAyB,EAAC,IAAI,CAAC,CAAC;IACjE,OAAO,qBAAqB,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE;QAC3E,QAAQ,EAAE;YACR,cAAc,EAAE,gBAAgB;YAChC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;YAC3C,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;YACzD,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;YAC/C,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,YAAY,EAAE,4BAAgB;SAC/B;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AA9BW,QAAA,aAAa,iBA8BxB;AAEK,MAAM,KAAK,GAAG,KAAK,EACxB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,SAAqB,EACY,EAAE;IACnC,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,sBAAmB,EACnB,0BAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,gBAAgB,CAAC,GAAG,MAAM,IAAA,+BAAyB,EAAC,IAAI,CAAC,CAAC;IACjE,OAAO,qBAAqB,CAAC,WAAW,CAAC,KAAK,CAAC;QAC7C,QAAQ,EAAE;YACR,cAAc,EAAE,gBAAgB;YAChC,SAAS,EAAE,SAAS,IAAI,wBAAS;YACjC,MAAM,EAAE,MAAM,CAAC,SAAS;SACzB;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAtBW,QAAA,KAAK,SAsBhB","sourcesContent":["import type { BN } from \"@project-serum/anchor\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { CRANK_KEY } from \"../tokenManager\";\nimport type { PAYMENT_MANAGER_PROGRAM } from \".\";\nimport { PAYMENT_MANAGER_ADDRESS, PAYMENT_MANAGER_IDL } from \".\";\nimport { findPaymentManagerAddress } from \"./pda\";\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  params: {\n    feeCollector: PublicKey;\n    authority?: PublicKey;\n    makerFeeBasisPoints: number;\n    takerFeeBasisPoints: number;\n  }\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [paymentManagerId] = await findPaymentManagerAddress(name);\n\n  return [\n    paymentManagerProgram.instruction.init(\n      {\n        name: name,\n        feeCollector: params.feeCollector,\n        makerFeeBasisPoints: params.makerFeeBasisPoints,\n        takerFeeBasisPoints: params.takerFeeBasisPoints,\n      },\n      {\n        accounts: {\n          paymentManager: paymentManagerId,\n          authority: params.authority || wallet.publicKey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    paymentManagerId,\n  ];\n};\n\nexport const managePayment = async (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  params: {\n    paymentAmount: BN;\n    payerTokenAccount: PublicKey;\n    feeCollectorTokenAccount: PublicKey;\n    paymentTokenAccount: PublicKey;\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [paymentManagerId] = await findPaymentManagerAddress(name);\n  return paymentManagerProgram.instruction.managePayment(params.paymentAmount, {\n    accounts: {\n      paymentManager: paymentManagerId,\n      payerTokenAccount: params.payerTokenAccount,\n      feeCollectorTokenAccount: params.feeCollectorTokenAccount,\n      paymentTokenAccount: params.paymentTokenAccount,\n      payer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n  });\n};\n\nexport const close = async (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  collector?: PublicKey\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const paymentManagerProgram = new Program<PAYMENT_MANAGER_PROGRAM>(\n    PAYMENT_MANAGER_IDL,\n    PAYMENT_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [paymentManagerId] = await findPaymentManagerAddress(name);\n  return paymentManagerProgram.instruction.close({\n    accounts: {\n      paymentManager: paymentManagerId,\n      collector: collector || CRANK_KEY,\n      closer: wallet.publicKey,\n    },\n  });\n};\n"]}