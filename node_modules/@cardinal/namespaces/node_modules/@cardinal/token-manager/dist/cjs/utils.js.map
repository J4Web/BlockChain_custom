{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAA,iDAI2B;AASpB,KAAK,UAAU,aAAa,CAAI,EAAgB;IACrD,IAAI;QACF,OAAO,MAAM,EAAE,EAAE,CAAC;KACnB;IAAC,MAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAND,sCAMC;AAEM,KAAK,UAAU,OAAO,CAC3B,IAAe,EACf,KAAgB,EAChB,kBAA4B;IAE5B,OAAO,iBAAK,CAAC,yBAAyB,CACpC,uCAA2B,EAC3B,4BAAgB,EAChB,IAAI,EACJ,KAAK,EACL,kBAAkB,CACnB,CAAC;AACJ,CAAC;AAZD,0BAYC;AAED;;;;;;;;;;GAUG;AACI,KAAK,UAAU,oCAAoC,CACxD,WAAwB,EACxB,UAAsB,EACtB,IAAe,EACf,KAAgB,EAChB,KAAgB,EAChB,kBAA4B;IAE5B,MAAM,iBAAiB,GAAG,MAAM,iBAAK,CAAC,yBAAyB,CAC7D,uCAA2B,EAC3B,4BAAgB,EAChB,IAAI,EACJ,KAAK,EACL,kBAAkB,CACnB,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;IACnE,IAAI,CAAC,OAAO,EAAE;QACZ,WAAW,CAAC,GAAG,CACb,iBAAK,CAAC,uCAAuC,CAC3C,uCAA2B,EAC3B,4BAAgB,EAChB,IAAI,EACJ,iBAAiB,EACjB,KAAK,EACL,KAAK,CACN,CACF,CAAC;KACH;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AA7BD,oFA6BC","sourcesContent":["import {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\n\nexport type AccountData<T> = {\n  pubkey: PublicKey;\n  parsed: T;\n};\n\ntype AccountFn<T> = () => Promise<AccountData<T>>;\nexport async function tryGetAccount<T>(fn: AccountFn<T>) {\n  try {\n    return await fn();\n  } catch {\n    return null;\n  }\n}\n\nexport async function findAta(\n  mint: PublicKey,\n  owner: PublicKey,\n  allowOwnerOffCurve?: boolean\n): Promise<PublicKey> {\n  return Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    owner,\n    allowOwnerOffCurve\n  );\n}\n\n/**\n * Utility function for adding a find or init associated token account instruction to a transaction\n * Useful when using associated token accounts so you can be sure they are created before hand\n * @param transaction\n * @param connection\n * @param mint\n * @param owner\n * @param payer\n * @param allowOwnerOffCurve\n * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found\n */\nexport async function withFindOrInitAssociatedTokenAccount(\n  transaction: Transaction,\n  connection: Connection,\n  mint: PublicKey,\n  owner: PublicKey,\n  payer: PublicKey,\n  allowOwnerOffCurve?: boolean\n): Promise<PublicKey> {\n  const associatedAddress = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    owner,\n    allowOwnerOffCurve\n  );\n  const account = await connection.getAccountInfo(associatedAddress);\n  if (!account) {\n    transaction.add(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mint,\n        associatedAddress,\n        owner,\n        payer\n      )\n    );\n  }\n  return associatedAddress;\n}\n"]}