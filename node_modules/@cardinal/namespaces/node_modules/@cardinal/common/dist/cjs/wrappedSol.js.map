{"version":3,"file":"wrappedSol.js","sourceRoot":"","sources":["../../src/wrappedSol.ts"],"names":[],"mappings":";;;;AACA,4EAAsD;AACtD,oEAA8C;AAC9C,8DAAwC;AAExC,iDAAsE;AAEtE,SAAsB,WAAW,CAC/B,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,QAAgB;;QAEhB,OAAO,CAAC,GAAG,CAAC,YAAY,QAAQ,WAAW,CAAC,CAAC;QAC7C,MAAM,8BAA8B,GAClC,MAAM,IAAA,mDAAoC,EACxC,WAAW,EACX,UAAU,EACV,QAAQ,CAAC,WAAW,EACpB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,SAAS,CACjB,CAAC;QACJ,WAAW,CAAC,GAAG,CACb,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;YAC1B,UAAU,EAAE,MAAM,CAAC,SAAS;YAC5B,QAAQ,EAAE,8BAA8B;YACxC,QAAQ;SACT,CAAC,CACH,CAAC;QACF,WAAW,CAAC,GAAG,CAAC,2BAA2B,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC7E,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AAxBD,kCAwBC;AAED,SAAgB,2BAA2B,CACzC,aAA6B;IAE7B,6DAA6D;IAC7D,aAAa;IACb,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACzE,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,EAAE,EAAE,yBAAyB;KAC3C,EACD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5E,OAAO,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACrC,IAAI;QACJ,SAAS,EAAE,QAAQ,CAAC,gBAAgB;QACpC,IAAI;KACL,CAAC,CAAC;AACL,CAAC;AApBD,kEAoBC","sourcesContent":["import type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as splToken from \"@solana/spl-token\";\nimport * as web3 from \"@solana/web3.js\";\n\nimport { withFindOrInitAssociatedTokenAccount } from \"./transactions\";\n\nexport async function withWrapSol(\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  lamports: number\n): Promise<web3.Transaction> {\n  console.log(`Wrapping ${lamports} lamports`);\n  const nativeAssociatedTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      splToken.NATIVE_MINT,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n  transaction.add(\n    web3.SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: nativeAssociatedTokenAccountId,\n      lamports,\n    })\n  );\n  transaction.add(createSyncNativeInstruction(nativeAssociatedTokenAccountId));\n  return transaction;\n}\n\nexport function createSyncNativeInstruction(\n  nativeAccount: web3.PublicKey\n): web3.TransactionInstruction {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 17, // SyncNative instruction\n    },\n    data\n  );\n\n  const keys = [{ pubkey: nativeAccount, isSigner: false, isWritable: true }];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: splToken.TOKEN_PROGRAM_ID,\n    data,\n  });\n}\n"]}