import { __awaiter } from "tslib";
import { findAta, withFindOrInitAssociatedTokenAccount, } from "@cardinal/common";
import { RewardDistributorKind } from "./constants";
export const withRemainingAccountsForKind = (transaction, connection, wallet, rewardDistributorId, kind, rewardMint) => __awaiter(void 0, void 0, void 0, function* () {
    switch (kind) {
        case RewardDistributorKind.Mint: {
            return [];
        }
        case RewardDistributorKind.Treasury: {
            const rewardDistributorRewardMintTokenAccountId = yield withFindOrInitAssociatedTokenAccount(transaction, connection, rewardMint, rewardDistributorId, wallet.publicKey, true);
            const userRewardMintTokenAccountId = yield findAta(rewardMint, wallet.publicKey, true);
            return [
                {
                    pubkey: rewardDistributorRewardMintTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
                {
                    pubkey: userRewardMintTokenAccountId,
                    isSigner: false,
                    isWritable: true,
                },
            ];
        }
        default:
            return [];
    }
});
//# sourceMappingURL=utils.js.map