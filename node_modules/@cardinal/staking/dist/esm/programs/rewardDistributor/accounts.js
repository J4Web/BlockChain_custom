import { __awaiter } from "tslib";
import { AnchorProvider, BorshAccountsCoder, Program, utils, } from "@project-serum/anchor";
import { REWARD_DISTRIBUTOR_ADDRESS, REWARD_DISTRIBUTOR_IDL } from ".";
export const getRewardEntry = (connection, rewardEntryId) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const parsed = (yield rewardDistributorProgram.account.rewardEntry.fetch(rewardEntryId));
    return {
        parsed,
        pubkey: rewardEntryId,
    };
});
export const getRewardEntries = (connection, rewardEntryIds) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const stakeEntries = (yield rewardDistributorProgram.account.rewardEntry.fetchMultiple(rewardEntryIds));
    return stakeEntries.map((tm, i) => ({
        parsed: tm,
        pubkey: rewardEntryIds[i],
    }));
});
export const getRewardDistributor = (connection, rewardDistributorId) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const parsed = (yield rewardDistributorProgram.account.rewardDistributor.fetch(rewardDistributorId));
    return {
        parsed,
        pubkey: rewardDistributorId,
    };
});
export const getRewardDistributors = (connection, rewardDistributorIds) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const stakeEntries = (yield rewardDistributorProgram.account.rewardDistributor.fetchMultiple(rewardDistributorIds));
    return stakeEntries.map((tm, i) => ({
        parsed: tm,
        pubkey: rewardDistributorIds[i],
    }));
});
export const getRewardEntriesForRewardDistributor = (connection, rewardDistributorId) => __awaiter(void 0, void 0, void 0, function* () {
    const programAccounts = yield connection.getProgramAccounts(REWARD_DISTRIBUTOR_ADDRESS, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: utils.bytes.bs58.encode(BorshAccountsCoder.accountDiscriminator("rewardEntry")),
                },
            },
            {
                memcmp: {
                    offset: 41,
                    bytes: rewardDistributorId.toBase58(),
                },
            },
        ],
    });
    const rewardEntryDatas = [];
    const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);
    programAccounts.forEach((account) => {
        try {
            const rewardEntryData = coder.decode("rewardEntry", account.account.data);
            if (rewardEntryData) {
                rewardEntryDatas.push(Object.assign(Object.assign({}, account), { parsed: rewardEntryData }));
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    });
    return rewardEntryDatas.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
});
export const getAllRewardEntries = (connection) => __awaiter(void 0, void 0, void 0, function* () {
    const programAccounts = yield connection.getProgramAccounts(REWARD_DISTRIBUTOR_ADDRESS, {
        filters: [
            {
                memcmp: {
                    offset: 0,
                    bytes: utils.bytes.bs58.encode(BorshAccountsCoder.accountDiscriminator("rewardEntry")),
                },
            },
        ],
    });
    const rewardEntryDatas = [];
    const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);
    programAccounts.forEach((account) => {
        try {
            const rewardEntryData = coder.decode("rewardEntry", account.account.data);
            if (rewardEntryData) {
                rewardEntryDatas.push(Object.assign(Object.assign({}, account), { parsed: rewardEntryData }));
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    });
    return rewardEntryDatas.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
});
//# sourceMappingURL=accounts.js.map