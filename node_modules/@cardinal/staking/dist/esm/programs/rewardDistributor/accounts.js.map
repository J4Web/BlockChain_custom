{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  utils,\n} from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { REWARD_DISTRIBUTOR_PROGRAM } from \".\";\nimport { REWARD_DISTRIBUTOR_ADDRESS, REWARD_DISTRIBUTOR_IDL } from \".\";\nimport type { RewardDistributorData, RewardEntryData } from \"./constants\";\n\nexport const getRewardEntry = async (\n  connection: Connection,\n  rewardEntryId: PublicKey\n): Promise<AccountData<RewardEntryData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const parsed = (await rewardDistributorProgram.account.rewardEntry.fetch(\n    rewardEntryId\n  )) as RewardEntryData;\n  return {\n    parsed,\n    pubkey: rewardEntryId,\n  };\n};\n\nexport const getRewardEntries = async (\n  connection: Connection,\n  rewardEntryIds: PublicKey[]\n): Promise<AccountData<RewardEntryData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const stakeEntries =\n    (await rewardDistributorProgram.account.rewardEntry.fetchMultiple(\n      rewardEntryIds\n    )) as RewardEntryData[];\n  return stakeEntries.map((tm, i) => ({\n    parsed: tm,\n    pubkey: rewardEntryIds[i]!,\n  }));\n};\n\nexport const getRewardDistributor = async (\n  connection: Connection,\n  rewardDistributorId: PublicKey\n): Promise<AccountData<RewardDistributorData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const parsed =\n    (await rewardDistributorProgram.account.rewardDistributor.fetch(\n      rewardDistributorId\n    )) as RewardDistributorData;\n  return {\n    parsed,\n    pubkey: rewardDistributorId,\n  };\n};\n\nexport const getRewardDistributors = async (\n  connection: Connection,\n  rewardDistributorIds: PublicKey[]\n): Promise<AccountData<RewardDistributorData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const stakeEntries =\n    (await rewardDistributorProgram.account.rewardDistributor.fetchMultiple(\n      rewardDistributorIds\n    )) as RewardDistributorData[];\n  return stakeEntries.map((tm, i) => ({\n    parsed: tm,\n    pubkey: rewardDistributorIds[i]!,\n  }));\n};\n\nexport const getRewardEntriesForRewardDistributor = async (\n  connection: Connection,\n  rewardDistributorId: PublicKey\n): Promise<AccountData<RewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"rewardEntry\")\n            ),\n          },\n        },\n        {\n          memcmp: {\n            offset: 41,\n            bytes: rewardDistributorId.toBase58(),\n          },\n        },\n      ],\n    }\n  );\n  const rewardEntryDatas: AccountData<RewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const rewardEntryData: RewardEntryData = coder.decode(\n        \"rewardEntry\",\n        account.account.data\n      );\n      if (rewardEntryData) {\n        rewardEntryDatas.push({\n          ...account,\n          parsed: rewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return rewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllRewardEntries = async (\n  connection: Connection\n): Promise<AccountData<RewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"rewardEntry\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const rewardEntryDatas: AccountData<RewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const rewardEntryData: RewardEntryData = coder.decode(\n        \"rewardEntry\",\n        account.account.data\n      );\n      if (rewardEntryData) {\n        rewardEntryDatas.push({\n          ...account,\n          parsed: rewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return rewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n"]}