{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport {\n  CRANK_KEY,\n  getRemainingAccountsForKind,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerKind,\n  TokenManagerState,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport {\n  findMintCounterId,\n  findTokenManagerAddress,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport { MetadataProgram } from \"@metaplex-foundation/mpl-token-metadata\";\nimport type { BN } from \"@project-serum/anchor\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport type { STAKE_POOL_PROGRAM } from \".\";\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\nimport { ReceiptType } from \"./constants\";\nimport { findStakeAuthorizationId } from \"./pda\";\nimport { remainingAccountsForInitStakeEntry } from \"./utils\";\n\nexport const initPoolIdentifier = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    identifierId: PublicKey;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.initIdentifier({\n    accounts: {\n      identifier: params.identifierId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n};\n\nexport const initStakePool = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    identifierId: PublicKey;\n    stakePoolId: PublicKey;\n    requiresCreators: PublicKey[];\n    requiresCollections: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText: string;\n    imageUri: string;\n    authority: PublicKey;\n    resetOnStake: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    endDate?: BN;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.initPool(\n    {\n      overlayText: params.overlayText,\n      imageUri: params.imageUri,\n      requiresCollections: params.requiresCollections,\n      requiresCreators: params.requiresCreators,\n      requiresAuthorization: params.requiresAuthorization ?? false,\n      authority: params.authority,\n      resetOnStake: params.resetOnStake,\n      cooldownSeconds: params.cooldownSeconds ?? null,\n      minStakeSeconds: params.minStakeSeconds ?? null,\n      endDate: params.endDate ?? null,\n    },\n    {\n      accounts: {\n        stakePool: params.stakePoolId,\n        identifier: params.identifierId,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const authorizeStakeEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  const [stakeAuthorizationId] = await findStakeAuthorizationId(\n    params.stakePoolId,\n    params.originalMintId\n  );\n  return stakePoolProgram.instruction.authorizeMint(params.originalMintId, {\n    accounts: {\n      stakePool: params.stakePoolId,\n      stakeAuthorizationRecord: stakeAuthorizationId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n};\n\nexport const initStakeEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    originalMintMetadatId: PublicKey;\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  const remainingAccounts = await remainingAccountsForInitStakeEntry(\n    params.stakePoolId,\n    params.originalMintId\n  );\n  return stakePoolProgram.instruction.initEntry(wallet.publicKey, {\n    accounts: {\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      originalMint: params.originalMintId,\n      originalMintMetadata: params.originalMintMetadatId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n    remainingAccounts,\n  });\n};\n\nexport const initStakeMint = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    originalMintMetadatId: PublicKey;\n    stakeEntryStakeMintTokenAccountId: PublicKey;\n    stakeMintMetadataId: PublicKey;\n    stakeMintId: PublicKey;\n    mintManagerId: PublicKey;\n    name: string;\n    symbol: string;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  return stakePoolProgram.instruction.initStakeMint(\n    { name: params.name, symbol: params.symbol },\n    {\n      accounts: {\n        stakeEntry: params.stakeEntryId,\n        stakePool: params.stakePoolId,\n        originalMint: params.originalMintId,\n        originalMintMetadata: params.originalMintMetadatId,\n        stakeMint: params.stakeMintId,\n        stakeMintMetadata: params.stakeMintMetadataId,\n        stakeEntryStakeMintTokenAccount:\n          params.stakeEntryStakeMintTokenAccountId,\n        mintManager: params.mintManagerId,\n        payer: wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n        associatedToken: ASSOCIATED_TOKEN_PROGRAM_ID,\n        tokenMetadataProgram: MetadataProgram.PUBKEY,\n        systemProgram: SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const claimReceiptMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    tokenManagerReceiptMintTokenAccountId: PublicKey;\n    originalMintId: PublicKey;\n    receiptMintId: PublicKey;\n    receiptType: ReceiptType;\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  const [\n    [tokenManagerId],\n    [mintCounterId],\n    stakeEntryReceiptMintTokenAccountId,\n    userReceiptMintTokenAccountId,\n    remainingAccounts,\n  ] = await Promise.all([\n    findTokenManagerAddress(params.receiptMintId),\n    findMintCounterId(params.receiptMintId),\n    findAta(params.receiptMintId, params.stakeEntryId, true),\n    findAta(params.receiptMintId, wallet.publicKey, true),\n    getRemainingAccountsForKind(\n      params.receiptMintId,\n      params.receiptType === ReceiptType.Original\n        ? TokenManagerKind.Edition\n        : TokenManagerKind.Managed\n    ),\n  ]);\n\n  return stakePoolProgram.instruction.claimReceiptMint({\n    accounts: {\n      stakeEntry: params.stakeEntryId,\n      originalMint: params.originalMintId,\n      receiptMint: params.receiptMintId,\n      stakeEntryReceiptMintTokenAccount: stakeEntryReceiptMintTokenAccountId,\n      user: wallet.publicKey,\n      userReceiptMintTokenAccount: userReceiptMintTokenAccountId,\n      mintCounter: mintCounterId,\n      tokenManager: tokenManagerId,\n      tokenManagerReceiptMintTokenAccount:\n        params.tokenManagerReceiptMintTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      systemProgram: SystemProgram.programId,\n      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts,\n  });\n};\n\nexport const stake = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    originalMint: PublicKey;\n    stakeEntryId: PublicKey;\n    stakePoolId: PublicKey;\n    stakeEntryOriginalMintTokenAccountId: PublicKey;\n    userOriginalMintTokenAccountId: PublicKey;\n    amount: BN;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  return stakePoolProgram.instruction.stake(params.amount, {\n    accounts: {\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      stakeEntryOriginalMintTokenAccount:\n        params.stakeEntryOriginalMintTokenAccountId,\n      originalMint: params.originalMint,\n      user: wallet.publicKey,\n      userOriginalMintTokenAccount: params.userOriginalMintTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n  });\n};\n\nexport const unstake = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    stakeEntryOriginalMintTokenAccount: PublicKey;\n    userOriginalMintTokenAccount: PublicKey;\n    user: PublicKey;\n    remainingAccounts: AccountMeta[];\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.unstake({\n    accounts: {\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      originalMint: params.originalMintId,\n      stakeEntryOriginalMintTokenAccount:\n        params.stakeEntryOriginalMintTokenAccount,\n      user: params.user,\n      userOriginalMintTokenAccount: params.userOriginalMintTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: params.remainingAccounts,\n  });\n};\n\nexport const updateStakePool = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    requiresCreators: PublicKey[];\n    requiresCollections: PublicKey[];\n    requiresAuthorization: boolean;\n    overlayText: string;\n    imageUri: string;\n    authority: PublicKey;\n    resetOnStake: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    endDate?: BN;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.updatePool(\n    {\n      overlayText: params.overlayText,\n      imageUri: params.imageUri,\n      requiresCollections: params.requiresCollections,\n      requiresCreators: params.requiresCreators,\n      requiresAuthorization: params.requiresAuthorization,\n      authority: params.authority,\n      resetOnStake: params.resetOnStake,\n      cooldownSeconds: params.cooldownSeconds ?? null,\n      minStakeSeconds: params.minStakeSeconds ?? null,\n      endDate: params.endDate ?? null,\n    },\n    {\n      accounts: {\n        stakePool: params.stakePoolId,\n        payer: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const updateTotalStakeSeconds = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakEntryId: PublicKey;\n    lastStaker: PublicKey;\n  }\n) => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.updateTotalStakeSeconds({\n    accounts: {\n      stakeEntry: params.stakEntryId,\n      lastStaker: params.lastStaker,\n    },\n  });\n};\n\nexport const returnReceiptMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntry: PublicKey;\n    receiptMint: PublicKey;\n    tokenManagerKind: TokenManagerKind;\n    tokenManagerState: TokenManagerState;\n    returnAccounts: AccountMeta[];\n  }\n) => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  const [tokenManagerId] = await findTokenManagerAddress(params.receiptMint);\n  const tokenManagerTokenAccountId = await findAta(\n    params.receiptMint,\n    (\n      await findTokenManagerAddress(params.receiptMint)\n    )[0],\n    true\n  );\n\n  const userReceiptMintTokenAccount = await findAta(\n    params.receiptMint,\n    wallet.publicKey,\n    true\n  );\n\n  const transferAccounts = await getRemainingAccountsForKind(\n    params.receiptMint,\n    params.tokenManagerKind\n  );\n\n  return stakePoolProgram.instruction.returnReceiptMint({\n    accounts: {\n      stakeEntry: params.stakeEntry,\n      receiptMint: params.receiptMint,\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      userReceiptMintTokenAccount: userReceiptMintTokenAccount,\n      user: wallet.publicKey,\n      collector: CRANK_KEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: [\n      ...(params.tokenManagerState === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...params.returnAccounts,\n    ],\n  });\n};\n\nexport const closeStakePool = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    authority: PublicKey;\n  }\n) => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.closeStakePool({\n    accounts: {\n      stakePool: params.stakePoolId,\n      authority: params.authority,\n    },\n  });\n};\n\nexport const closeStakeEntry = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    authority: PublicKey;\n  }\n) => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  return stakePoolProgram.instruction.closeStakeEntry({\n    accounts: {\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      authority: params.authority,\n    },\n  });\n};\n"]}