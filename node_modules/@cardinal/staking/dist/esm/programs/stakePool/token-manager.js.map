{"version":3,"file":"token-manager.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/token-manager.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,aAAa,EACb,oCAAoC,GACrC,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAE,MAAM,2CAA2C,CAAC;AACzE,OAAO,EAAE,8BAA8B,EAAE,MAAM,wDAAwD,CAAC;AACxG,OAAO,EAAE,2BAA2B,EAAE,MAAM,4DAA4D,CAAC;AAIzG,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE;IACxB,MAAM,cAAc,GAAG,MAAM,2BAA2B,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE7E,MAAM,gBAAgB,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,CAChD,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,EAAE,cAAc,CAAC,CAClE,CAAC;IAEF,IAAI,CAAC,gBAAgB;QAAE,OAAO,WAAW,CAAC;IAE1C,MAAM,0BAA0B,GAAG,MAAM,oCAAoC,CAC3E,WAAW,EACX,UAAU,EACV,MAAM,EACN,cAAc,EACd,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEF,MAAM,0BAA0B,GAAG,MAAM,8BAA8B,CACrE,WAAW,EACX,UAAU,EACV,MAAM,EACN,gBAAgB,CACjB,CAAC;IAEF,WAAW,CAAC,GAAG,CACb,MAAM,YAAY,CAAC,WAAW,CAAC,UAAU,CACvC,UAAU,EACV,MAAM,EACN,MAAM,EACN,cAAc,EACd,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAC5B,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAC7B,0BAA0B,EAC1B,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,CAAC,qBAAqB,EAC9C,0BAA0B,CAC3B,CACF,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC","sourcesContent":["import {\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { tokenManager } from \"@cardinal/token-manager/dist/cjs/programs\";\nimport { withRemainingAccountsForReturn } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport { tokenManagerAddressFromMint } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\n\nexport const withInvalidate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> => {\n  const tokenManagerId = await tokenManagerAddressFromMint(connection, mintId);\n\n  const tokenManagerData = await tryGetAccount(() =>\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId)\n  );\n\n  if (!tokenManagerData) return transaction;\n\n  const tokenManagerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    tokenManagerId,\n    wallet.publicKey,\n    true\n  );\n\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData\n  );\n\n  transaction.add(\n    await tokenManager.instruction.invalidate(\n      connection,\n      wallet,\n      mintId,\n      tokenManagerId,\n      tokenManagerData.parsed.kind,\n      tokenManagerData.parsed.state,\n      tokenManagerTokenAccountId,\n      tokenManagerData?.parsed.recipientTokenAccount,\n      remainingAccountsForReturn\n    )\n  );\n  return transaction;\n};\n"]}