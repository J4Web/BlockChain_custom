{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { findAta } from \"@cardinal/common\";\nimport type { web3 } from \"@project-serum/anchor\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as splToken from \"@solana/spl-token\";\nimport type {\n  ConfirmOptions,\n  Connection,\n  PublicKey,\n  SendTransactionError,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\n\nimport type {\n  RewardDistributorData,\n  RewardEntryData,\n} from \"./programs/rewardDistributor\";\nimport { getRewardEntries } from \"./programs/rewardDistributor/accounts\";\nimport { findRewardEntryId } from \"./programs/rewardDistributor/pda\";\nimport type { StakeEntryData } from \"./programs/stakePool\";\nimport { getStakeEntries } from \"./programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"./programs/stakePool/utils\";\n\nexport const executeTransaction = async (\n  connection: Connection,\n  wallet: Wallet,\n  transaction: Transaction,\n  config: {\n    silent?: boolean;\n    signers?: Signer[];\n    confirmOptions?: ConfirmOptions;\n    callback?: (success: boolean) => void;\n  }\n): Promise<string> => {\n  let txid = \"\";\n  try {\n    transaction.feePayer = wallet.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash(\"max\")\n    ).blockhash;\n    await wallet.signTransaction(transaction);\n    if (config.signers && config.signers.length > 0) {\n      transaction.partialSign(...config.signers);\n    }\n    txid = await sendAndConfirmRawTransaction(\n      connection,\n      transaction.serialize(),\n      config.confirmOptions\n    );\n    config.callback && config.callback(true);\n    console.log(\"Successful tx\", txid);\n  } catch (e: unknown) {\n    console.log(\"Failed transaction: \", (e as SendTransactionError).logs, e);\n    config.callback && config.callback(false);\n    if (!config.silent) {\n      throw e;\n    }\n  }\n  return txid;\n};\n\n/**\n * Get total supply of mint\n * @param connection\n * @param originalMintId\n * @returns\n */\nexport const getMintSupply = async (\n  connection: web3.Connection,\n  originalMintId: web3.PublicKey\n): Promise<BN> => {\n  const mint = new splToken.Token(\n    connection,\n    originalMintId,\n    splToken.TOKEN_PROGRAM_ID,\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    null\n  );\n  return (await mint.getMintInfo()).supply;\n};\n\n/**\n * Get pending rewards of mintIds for a given reward distributor\n * @param connection\n * @param wallet\n * @param mintIds\n * @param rewardDistributor\n * @returns\n */\nexport const getPendingRewardsForPool = async (\n  connection: Connection,\n  wallet: PublicKey,\n  mintIds: PublicKey[],\n  rewardDistributor: AccountData<RewardDistributorData>,\n  UTCNow: number\n): Promise<{\n  rewardMap: {\n    [mintId: string]: { claimableRewards: BN; nextRewardsIn: BN };\n  };\n  claimableRewards: BN;\n}> => {\n  const rewardDistributorTokenAccount = await findAta(\n    rewardDistributor.parsed.rewardMint,\n    rewardDistributor.pubkey,\n    true\n  );\n  const rewardMint = new splToken.Token(\n    connection,\n    rewardDistributor.parsed.rewardMint,\n    splToken.TOKEN_PROGRAM_ID,\n    Keypair.generate() // not used\n  );\n\n  const rewardDistributorTokenAccountInfo = await rewardMint.getAccountInfo(\n    rewardDistributorTokenAccount\n  );\n\n  const stakeEntryIds: PublicKey[] = await Promise.all(\n    mintIds.map(\n      async (mintId) =>\n        (\n          await findStakeEntryIdFromMint(\n            connection,\n            wallet,\n            rewardDistributor.parsed.stakePool,\n            mintId\n          )\n        )[0]\n    )\n  );\n\n  const rewardEntryIds = await Promise.all(\n    stakeEntryIds.map(\n      async (stakeEntryId) =>\n        (\n          await findRewardEntryId(rewardDistributor.pubkey, stakeEntryId)\n        )[0]\n    )\n  );\n\n  const [stakeEntries, rewardEntries] = await Promise.all([\n    getStakeEntries(connection, stakeEntryIds),\n    getRewardEntries(connection, rewardEntryIds),\n  ]);\n\n  return getRewardMap(\n    stakeEntries,\n    rewardEntries,\n    rewardDistributor,\n    rewardDistributorTokenAccountInfo.amount,\n    UTCNow\n  );\n};\n\n/**\n * Get the map of rewards for stakeEntry to rewards and next reward time\n * Also return the total claimable rewards from this map\n * @param stakeEntries\n * @param rewardEntries\n * @param rewardDistributor\n * @param remainingRewardAmount\n * @returns\n */\nexport const getRewardMap = (\n  stakeEntries: AccountData<StakeEntryData>[],\n  rewardEntries: AccountData<RewardEntryData>[],\n  rewardDistributor: AccountData<RewardDistributorData>,\n  remainingRewardAmount: BN,\n  UTCNow: number\n): {\n  rewardMap: {\n    [stakeEntryId: string]: { claimableRewards: BN; nextRewardsIn: BN };\n  };\n  claimableRewards: BN;\n} => {\n  const rewardMap: {\n    [stakeEntryId: string]: { claimableRewards: BN; nextRewardsIn: BN };\n  } = {};\n\n  for (let i = 0; i < stakeEntries.length; i++) {\n    const stakeEntry = stakeEntries[i]!;\n    const rewardEntry = rewardEntries.find((rewardEntry) =>\n      rewardEntry?.parsed?.stakeEntry.equals(stakeEntry?.pubkey)\n    );\n\n    if (stakeEntry) {\n      const [claimableRewards, nextRewardsIn] = calculatePendingRewards(\n        rewardDistributor,\n        stakeEntry,\n        rewardEntry,\n        remainingRewardAmount,\n        UTCNow\n      );\n      rewardMap[stakeEntry.pubkey.toString()] = {\n        claimableRewards,\n        nextRewardsIn,\n      };\n    }\n  }\n\n  // Compute too many rewards\n  let claimableRewards = Object.values(rewardMap).reduce(\n    (acc, { claimableRewards }) => acc.add(claimableRewards),\n    new BN(0)\n  );\n  if (\n    rewardDistributor.parsed.maxSupply &&\n    rewardDistributor.parsed.rewardsIssued\n      .add(claimableRewards)\n      .gte(rewardDistributor.parsed.maxSupply)\n  ) {\n    claimableRewards = rewardDistributor.parsed.maxSupply.sub(\n      rewardDistributor.parsed.rewardsIssued\n    );\n  }\n\n  if (claimableRewards.gt(remainingRewardAmount)) {\n    claimableRewards = remainingRewardAmount;\n  }\n  return { rewardMap, claimableRewards };\n};\n\n/**\n * Calculate claimable rewards and next reward time for a give mint and reward and stake entry\n * @param rewardDistributor\n * @param stakeEntry\n * @param rewardEntry\n * @param remainingRewardAmount\n * @param UTCNow\n * @returns\n */\nexport const calculatePendingRewards = (\n  rewardDistributor: AccountData<RewardDistributorData>,\n  stakeEntry: AccountData<StakeEntryData>,\n  rewardEntry: AccountData<RewardEntryData> | undefined,\n  remainingRewardAmount: BN,\n  UTCNow: number\n): [BN, BN] => {\n  if (\n    !stakeEntry ||\n    stakeEntry.parsed.pool.toString() !==\n      rewardDistributor.parsed.stakePool.toString()\n  ) {\n    return [new BN(0), new BN(0)];\n  }\n\n  const rewardSecondsReceived =\n    rewardEntry?.parsed.rewardSecondsReceived || new BN(0);\n  const multiplier =\n    rewardEntry?.parsed?.multiplier ||\n    rewardDistributor.parsed.defaultMultiplier;\n\n  let rewardAmountToReceive = (\n    stakeEntry.parsed.cooldownStartSeconds || new BN(UTCNow)\n  )\n    .sub(stakeEntry.parsed.lastStakedAt)\n    .mul(stakeEntry.parsed.amount)\n    .add(stakeEntry.parsed.totalStakeSeconds)\n    .sub(rewardSecondsReceived)\n    .div(rewardDistributor.parsed.rewardDurationSeconds)\n    .mul(rewardDistributor.parsed.rewardAmount)\n    .mul(multiplier)\n    .div(new BN(10).pow(new BN(rewardDistributor.parsed.multiplierDecimals)));\n\n  if (\n    rewardDistributor.parsed.maxSupply &&\n    rewardDistributor.parsed.rewardsIssued\n      .add(rewardAmountToReceive)\n      .gte(rewardDistributor.parsed.maxSupply)\n  ) {\n    rewardAmountToReceive = rewardDistributor.parsed.maxSupply.sub(\n      rewardDistributor.parsed.rewardsIssued\n    );\n  }\n\n  if (rewardAmountToReceive.gt(remainingRewardAmount)) {\n    rewardAmountToReceive = remainingRewardAmount;\n  }\n\n  const nextRewardsIn = rewardDistributor.parsed.rewardDurationSeconds.sub(\n    (stakeEntry.parsed.cooldownStartSeconds || new BN(UTCNow))\n      .sub(stakeEntry.parsed.lastStakedAt)\n      .add(stakeEntry.parsed.totalStakeSeconds)\n      .mod(rewardDistributor.parsed.rewardDurationSeconds)\n  );\n\n  return [rewardAmountToReceive, nextRewardsIn];\n};\n"]}