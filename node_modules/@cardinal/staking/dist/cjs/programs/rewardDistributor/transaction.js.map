{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport type { web3 } from \"@project-serum/anchor\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { getRewardDistributor, getRewardEntry } from \"./accounts\";\nimport { RewardDistributorKind } from \"./constants\";\nimport {\n  claimRewards,\n  closeRewardDistributor,\n  closeRewardEntry,\n  initRewardDistributor,\n  initRewardEntry,\n  reclaimFunds,\n  updateRewardDistributor,\n  updateRewardEntry,\n} from \"./instruction\";\nimport { findRewardDistributorId, findRewardEntryId } from \"./pda\";\nimport { withRemainingAccountsForKind } from \"./utils\";\n\nexport const withInitRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardMintId: PublicKey;\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    kind?: RewardDistributorKind;\n    maxSupply?: BN;\n    supply?: BN;\n    defaultMultiplier?: BN;\n    multiplierDecimals?: number;\n  }\n): Promise<[Transaction, web3.PublicKey]> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  const remainingAccountsForKind = await withRemainingAccountsForKind(\n    transaction,\n    connection,\n    wallet,\n    rewardDistributorId,\n    params.kind || RewardDistributorKind.Mint,\n    params.rewardMintId\n  );\n  transaction.add(\n    initRewardDistributor(connection, wallet, {\n      rewardDistributorId,\n      stakePoolId: params.stakePoolId,\n      rewardMintId: params.rewardMintId,\n      rewardAmount: params.rewardAmount || new BN(1),\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(1),\n      kind: params.kind || RewardDistributorKind.Mint,\n      remainingAccountsForKind,\n      maxSupply: params.maxSupply,\n      supply: params.supply,\n      defaultMultiplier: params.defaultMultiplier,\n      multiplierDecimals: params.multiplierDecimals,\n    })\n  );\n  return [transaction, rewardDistributorId];\n};\n\nexport const withInitRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    rewardDistributorId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const [rewardEntryId] = await findRewardEntryId(\n    params.rewardDistributorId,\n    params.stakeEntryId\n  );\n  transaction.add(\n    initRewardEntry(connection, wallet, {\n      stakeEntryId: params.stakeEntryId,\n      rewardDistributor: params.rewardDistributorId,\n      rewardEntryId: rewardEntryId,\n    })\n  );\n  return [transaction, rewardEntryId];\n};\n\nexport const withClaimRewards = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n\n  if (rewardDistributorData) {\n    const rewardMintTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      rewardDistributorData.parsed.rewardMint,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\n      transaction,\n      connection,\n      wallet,\n      rewardDistributorId,\n      rewardDistributorData.parsed.kind,\n      rewardDistributorData.parsed.rewardMint\n    );\n\n    const [rewardEntryId] = await findRewardEntryId(\n      rewardDistributorData.pubkey,\n      params.stakeEntryId\n    );\n    const rewardEntryData = await tryGetAccount(() =>\n      getRewardEntry(connection, rewardEntryId)\n    );\n\n    if (!rewardEntryData) {\n      transaction.add(\n        initRewardEntry(connection, wallet, {\n          stakeEntryId: params.stakeEntryId,\n          rewardDistributor: rewardDistributorData.pubkey,\n          rewardEntryId: rewardEntryId,\n        })\n      );\n    }\n\n    transaction.add(\n      await claimRewards(connection, wallet, {\n        stakePoolId: params.stakePoolId,\n        stakeEntryId: params.stakeEntryId,\n        rewardMintId: rewardDistributorData.parsed.rewardMint,\n        rewardMintTokenAccountId: rewardMintTokenAccountId,\n        remainingAccountsForKind,\n      })\n    );\n  }\n  return transaction;\n};\n\nexport const withCloseRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n\n  if (rewardDistributorData) {\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\n      transaction,\n      connection,\n      wallet,\n      rewardDistributorId,\n      rewardDistributorData.parsed.kind,\n      rewardDistributorData.parsed.rewardMint\n    );\n\n    transaction.add(\n      await closeRewardDistributor(connection, wallet, {\n        stakePoolId: params.stakePoolId,\n        rewardMintId: rewardDistributorData.parsed.rewardMint,\n        remainingAccountsForKind,\n      })\n    );\n  }\n  return transaction;\n};\n\nexport const withUpdateRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardDistributorId: PublicKey;\n    stakeEntryId: PublicKey;\n    multiplier: BN;\n  }\n): Promise<Transaction> => {\n  return transaction.add(\n    await updateRewardEntry(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: params.stakeEntryId,\n      multiplier: params.multiplier,\n    })\n  );\n};\n\nexport const withCloseRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n\n  const [rewardEntryId] = await findRewardEntryId(\n    rewardDistributorId,\n    params.stakeEntryId\n  );\n\n  return transaction.add(\n    closeRewardEntry(connection, wallet, {\n      rewardDistributorId: rewardDistributorId,\n      rewardEntryId: rewardEntryId,\n    })\n  );\n};\n\nexport const withUpdateRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    defaultMultiplier?: BN;\n    multiplierDecimals?: number;\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n  }\n): Promise<Transaction> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n\n  return transaction.add(\n    updateRewardDistributor(connection, wallet, {\n      rewardDistributorId: rewardDistributorId,\n      defaultMultiplier: params.defaultMultiplier || new BN(1),\n      multiplierDecimals: params.multiplierDecimals || 0,\n      rewardAmount: params.rewardAmount || new BN(0),\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(0),\n    })\n  );\n};\nexport const withReclaimFunds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    amount: BN;\n  }\n): Promise<Transaction> => {\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n  if (!rewardDistributorData) {\n    throw new Error(\"No reward distrbutor found\");\n  }\n\n  const rewardDistributorTokenAccountId = await findAta(\n    rewardDistributorData.parsed.rewardMint,\n    rewardDistributorData.pubkey,\n    true\n  );\n\n  const authorityTokenAccountId = await findAta(\n    rewardDistributorData.parsed.rewardMint,\n    wallet.publicKey,\n    true\n  );\n\n  return transaction.add(\n    reclaimFunds(connection, wallet, {\n      rewardDistributorId: rewardDistributorId,\n      rewardDistributorTokenAccountId: rewardDistributorTokenAccountId,\n      authorityTokenAccountId: authorityTokenAccountId,\n      authority: wallet.publicKey,\n      amount: params.amount,\n    })\n  );\n};\n"]}