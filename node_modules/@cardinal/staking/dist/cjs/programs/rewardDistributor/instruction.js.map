{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BN } from \"@project-serum/anchor\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport type { REWARD_DISTRIBUTOR_PROGRAM } from \".\";\nimport { REWARD_DISTRIBUTOR_ADDRESS, REWARD_DISTRIBUTOR_IDL } from \".\";\nimport type { RewardDistributorKind } from \"./constants\";\nimport { REWARD_MANAGER } from \"./constants\";\nimport { findRewardDistributorId, findRewardEntryId } from \"./pda\";\n\nexport const initRewardDistributor = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardDistributorId: PublicKey;\n    stakePoolId: PublicKey;\n    rewardMintId: PublicKey;\n    rewardAmount: BN;\n    rewardDurationSeconds: BN;\n    kind: RewardDistributorKind;\n    remainingAccountsForKind: AccountMeta[];\n    maxSupply?: BN;\n    supply?: BN;\n    defaultMultiplier?: BN;\n    multiplierDecimals?: number;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n  return rewardDistributorProgram.instruction.initRewardDistributor(\n    {\n      rewardAmount: params.rewardAmount,\n      rewardDurationSeconds: params.rewardDurationSeconds,\n      maxSupply: params.maxSupply || null,\n      supply: params.supply || null,\n      kind: params.kind,\n      defaultMultiplier: params.defaultMultiplier || null,\n      multiplierDecimals: params.multiplierDecimals || null,\n    },\n    {\n      accounts: {\n        rewardDistributor: params.rewardDistributorId,\n        stakePool: params.stakePoolId,\n        rewardMint: params.rewardMintId,\n        authority: wallet.publicKey,\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n      },\n      remainingAccounts: params.remainingAccountsForKind,\n    }\n  );\n};\n\nexport const initRewardEntry = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    rewardDistributor: PublicKey;\n    rewardEntryId: PublicKey;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n  return rewardDistributorProgram.instruction.initRewardEntry({\n    accounts: {\n      rewardEntry: params.rewardEntryId,\n      stakeEntry: params.stakeEntryId,\n      rewardDistributor: params.rewardDistributor,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n};\n\nexport const claimRewards = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    rewardMintId: PublicKey;\n    rewardMintTokenAccountId: PublicKey;\n    remainingAccountsForKind: AccountMeta[];\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  const [rewardEntryId] = await findRewardEntryId(\n    rewardDistributorId,\n    params.stakeEntryId\n  );\n\n  return rewardDistributorProgram.instruction.claimRewards({\n    accounts: {\n      rewardEntry: rewardEntryId,\n      rewardDistributor: rewardDistributorId,\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      rewardMint: params.rewardMintId,\n      userRewardMintTokenAccount: params.rewardMintTokenAccountId,\n      rewardManager: REWARD_MANAGER,\n      user: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    },\n    remainingAccounts: params.remainingAccountsForKind,\n  });\n};\n\nexport const closeRewardDistributor = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardMintId: PublicKey;\n    remainingAccountsForKind: AccountMeta[];\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  return rewardDistributorProgram.instruction.closeRewardDistributor({\n    accounts: {\n      rewardDistributor: rewardDistributorId,\n      stakePool: params.stakePoolId,\n      rewardMint: params.rewardMintId,\n      signer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: params.remainingAccountsForKind,\n  });\n};\n\nexport const updateRewardEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    multiplier: BN;\n  }\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n\n  const [rewardEntryId] = await findRewardEntryId(\n    rewardDistributorId,\n    params.stakeEntryId\n  );\n\n  return rewardDistributorProgram.instruction.updateRewardEntry(\n    {\n      multiplier: params.multiplier,\n    },\n    {\n      accounts: {\n        rewardEntry: rewardEntryId,\n        rewardDistributor: rewardDistributorId,\n        authority: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const closeRewardEntry = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardDistributorId: PublicKey;\n    rewardEntryId: PublicKey;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  return rewardDistributorProgram.instruction.closeRewardEntry({\n    accounts: {\n      rewardDistributor: params.rewardDistributorId,\n      rewardEntry: params.rewardEntryId,\n      authority: wallet.publicKey,\n    },\n  });\n};\n\nexport const updateRewardDistributor = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardDistributorId: PublicKey;\n    defaultMultiplier: BN;\n    multiplierDecimals: number;\n    rewardAmount: BN;\n    rewardDurationSeconds: BN;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  return rewardDistributorProgram.instruction.updateRewardDistributor(\n    {\n      defaultMultiplier: params.defaultMultiplier,\n      multiplierDecimals: params.multiplierDecimals,\n      rewardAmount: params.rewardAmount,\n      rewardDurationSeconds: params.rewardDurationSeconds,\n    },\n    {\n      accounts: {\n        rewardDistributor: params.rewardDistributorId,\n        authority: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const reclaimFunds = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardDistributorId: PublicKey;\n    rewardDistributorTokenAccountId: PublicKey;\n    authorityTokenAccountId: PublicKey;\n    authority: PublicKey;\n    amount: BN;\n  }\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const rewardDistributorProgram = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  return rewardDistributorProgram.instruction.reclaimFunds(params.amount, {\n    accounts: {\n      rewardDistributor: params.rewardDistributorId,\n      rewardDistributorTokenAccount: params.rewardDistributorTokenAccountId,\n      authorityTokenAccount: params.authorityTokenAccountId,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n  });\n};\n"]}