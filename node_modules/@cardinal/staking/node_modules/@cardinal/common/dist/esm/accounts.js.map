{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../src/accounts.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAC;AAC9C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAIxC;;;;;GAKG;AACH,MAAM,UAAgB,aAAa,CAAI,EAAgB;;QACrD,IAAI;YACF,OAAO,MAAM,EAAE,EAAE,CAAC;SACnB;QAAC,WAAM;YACN,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CAAA;AAED;;;;;;GAMG;AACH,MAAM,UAAgB,OAAO,CAC3B,IAAoB,EACpB,KAAqB,EACrB,kBAA4B;;QAE5B,OAAO,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CAC7C,QAAQ,CAAC,2BAA2B,EACpC,QAAQ,CAAC,gBAAgB,EACzB,IAAI,EACJ,KAAK,EACL,kBAAkB,CACnB,CAAC;IACJ,CAAC;CAAA;AAED;;;;;GAKG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,UAA2B,EAC3B,MAAc,EACuB,EAAE;;IACvC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACtE,MAAM,oBAAoB,GAAG,IAAI,QAAQ,CAAC,KAAK,CAC7C,UAAU,EACV,IAAI,EACJ,QAAQ,CAAC,gBAAgB;IACzB,WAAW;IACX,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CACxB,CAAC;IAEF,MAAM,mBAAmB,GACvB,CAAA,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,CAAC,CAAC,0CAAE,OAAO;QACjC,CAAC,MAAM,oBAAoB,CAAC,cAAc,CACxC,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,CAAC,CAAC,0CAAE,OAAO,CAClC,CAAC,CAAC;IACL,OAAO,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,KAAK,CAAC;AACpC,CAAC,CAAA,CAAC","sourcesContent":["import * as splToken from \"@solana/spl-token\";\nimport * as web3 from \"@solana/web3.js\";\n\nimport type { AccountFn } from \"./\";\n\n/**\n * Tries to get account based on function fn\n * Return null if account doesn't exist\n * @param fn\n * @returns\n */\nexport async function tryGetAccount<T>(fn: AccountFn<T>) {\n  try {\n    return await fn();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Utility function to get associated token address\n * @param mint\n * @param owner\n * @param allowOwnerOffCurve\n * @returns\n */\nexport async function findAta(\n  mint: web3.PublicKey,\n  owner: web3.PublicKey,\n  allowOwnerOffCurve?: boolean\n): Promise<web3.PublicKey> {\n  return splToken.Token.getAssociatedTokenAddress(\n    splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n    splToken.TOKEN_PROGRAM_ID,\n    mint,\n    owner,\n    allowOwnerOffCurve\n  );\n}\n\n/**\n * Gets owner of mintId\n * @param connection\n * @param mintId\n * @returns\n */\nexport const getOwner = async (\n  connection: web3.Connection,\n  mintId: string\n): Promise<web3.PublicKey | undefined> => {\n  const mint = new web3.PublicKey(mintId);\n  const largestHolders = await connection.getTokenLargestAccounts(mint);\n  const certificateMintToken = new splToken.Token(\n    connection,\n    mint,\n    splToken.TOKEN_PROGRAM_ID,\n    // not used\n    web3.Keypair.generate()\n  );\n\n  const largestTokenAccount =\n    largestHolders?.value[0]?.address &&\n    (await certificateMintToken.getAccountInfo(\n      largestHolders?.value[0]?.address\n    ));\n  return largestTokenAccount?.owner;\n};\n"]}