import { __awaiter } from "tslib";
import { deprecated, withSetNamespaceReverseEntry } from '@cardinal/namespaces';
import { PublicKey, sendAndConfirmRawTransaction, Transaction, } from '@solana/web3.js';
import { useMutation } from 'react-query';
import { nameFromMint } from '../components/NameManager';
export const useHandleSetDefault = (connection, wallet, namespaceName) => {
    return useMutation(({ tokenData }) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        if (!tokenData)
            return '';
        const transaction = new Transaction();
        const entryMint = new PublicKey((_a = tokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.mint);
        const [, entryName] = nameFromMint(((_b = tokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.name) || '', ((_c = tokenData.metaplexData) === null || _c === void 0 ? void 0 : _c.parsed.data.uri) || '');
        if (tokenData.certificate) {
            yield deprecated.withSetReverseEntry(connection, wallet, namespaceName, entryName, entryMint, transaction);
        }
        else if (tokenData.tokenManager) {
            yield withSetNamespaceReverseEntry(transaction, connection, wallet, namespaceName, entryName, entryMint);
        }
        transaction.feePayer = wallet.publicKey;
        transaction.recentBlockhash = (yield connection.getRecentBlockhash('max')).blockhash;
        yield wallet.signTransaction(transaction);
        const txid = yield sendAndConfirmRawTransaction(connection, transaction.serialize(), {
            skipPreflight: true,
        });
        return txid;
    }));
};
//# sourceMappingURL=useHandleSetDefault.js.map