import { __awaiter } from "tslib";
import { sendAndConfirmRawTransaction, Transaction } from '@solana/web3.js';
import { useMutation } from 'react-query';
import { apiBase } from '../utils/constants';
export const useHandleClaimTransaction = (connection, wallet, cluster, dev) => {
    return useMutation([wallet.publicKey.toString()], ({ tweetId, handle, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (!handle || !tweetId)
            return '';
        const response = yield fetch(`${apiBase(dev)}/namespaces/twitter/claim?tweetId=${tweetId}&publicKey=${wallet === null || wallet === void 0 ? void 0 : wallet.publicKey.toString()}&handle=${handle}&namespace=twitter${cluster && `&cluster=${cluster}`}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                account: wallet.publicKey.toString(),
            }),
        });
        const json = yield response.json();
        if (response.status !== 200 || json.error)
            throw new Error(json.error);
        const { transaction } = json;
        const buffer = Buffer.from(decodeURIComponent(transaction), 'base64');
        const tx = Transaction.from(buffer);
        yield wallet.signTransaction(tx);
        return sendAndConfirmRawTransaction(connection, tx.serialize(), {
            skipPreflight: true,
        });
    }));
};
//# sourceMappingURL=useHandleClaimTransaction.js.map