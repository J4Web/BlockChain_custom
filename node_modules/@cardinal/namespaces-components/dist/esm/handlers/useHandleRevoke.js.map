{"version":3,"file":"useHandleRevoke.js","sourceRoot":"","sources":["../../../src/handlers/useHandleRevoke.ts"],"names":[],"mappings":";AAMA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAA;AAEzC,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAA;AAW5C,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,MAAc,EACd,OAAgB,EAChB,GAAY,EACZ,EAAE;IACF,OAAO,WAAW,CAChB,CAAO,EACL,OAAO,EACP,MAAM,GAIP,EAAiB,EAAE;QAClB,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO;YAAE,OAAM;QAC/B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,OAAO,CACR,GAAG,CACJ,sCAAsC,OAAO,cAAc,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC,QAAQ,EAAE,WAAW,MAAM,GACvG,OAAO,IAAI,YAAY,OAAO,EAChC,EAAE,CACH,CAAA;QACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC1D,CAAC,CAAA,CACF,CAAA;AACH,CAAC,CAAA","sourcesContent":["import type { CertificateData } from '@cardinal/certificates'\nimport type { AccountData } from '@cardinal/common'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport type * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Cluster, PublicKey } from '@solana/web3.js'\nimport { useMutation } from 'react-query'\n\nimport { apiBase } from '../utils/constants'\n\nexport interface HandleSetParam {\n  metaplexData?: {\n    pubkey: PublicKey\n    parsed: metaplex.MetadataData\n  } | null\n  tokenManager?: AccountData<TokenManagerData>\n  certificate?: AccountData<CertificateData> | null\n}\n\nexport const useHandleRevoke = (\n  wallet: Wallet,\n  cluster: Cluster,\n  dev: boolean\n) => {\n  return useMutation(\n    async ({\n      tweetId,\n      handle,\n    }: {\n      tweetId?: string\n      handle?: string\n    }): Promise<void> => {\n      if (!handle || !tweetId) return\n      const response = await fetch(\n        `${apiBase(\n          dev\n        )}/namespaces/twitter/revoke?tweetId=${tweetId}&publicKey=${wallet?.publicKey.toString()}&handle=${handle}${\n          cluster && `&cluster=${cluster}`\n        }`\n      )\n      const json = await response.json()\n      if (response.status !== 200) throw new Error(json.error)\n    }\n  )\n}\n"]}