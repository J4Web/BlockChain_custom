import { __awaiter } from "tslib";
import { useMutation } from 'react-query';
import { apiBase } from '../utils/constants';
export const useHandleVerify = (wallet, cluster, dev) => {
    return useMutation([wallet.publicKey.toString()], ({ tweetId, handle, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (!handle || !tweetId)
            return;
        const response = yield fetch(`${apiBase(dev)}/namespaces/twitter/verify?tweetId=${tweetId}&publicKey=${wallet === null || wallet === void 0 ? void 0 : wallet.publicKey.toString()}&handle=${handle}${cluster && `&cluster=${cluster}`}`);
        const json = yield response.json();
        if (response.status !== 200)
            throw new Error(json.message);
        console.log('Verification response: ', json);
        return;
    }), {
        onError: (e) => {
            console.log(e);
        },
    });
};
//# sourceMappingURL=useHandleVerify.js.map