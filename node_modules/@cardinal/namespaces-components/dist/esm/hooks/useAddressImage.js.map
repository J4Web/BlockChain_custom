{"version":3,"file":"useAddressImage.js","sourceRoot":"","sources":["../../../src/hooks/useAddressImage.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAEhD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEzC,OAAO,EAAE,sBAAsB,EAAE,MAAM,oBAAoB,CAAA;AAC3D,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAA;AAChD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAA;AAEjD,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,UAAsB,EACtB,OAA8B,EAC9B,aAAa,GAAG,sBAAsB,EACtC,GAAa,EACgD,EAAE;IAC/D,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAC9C,SAAS,CACV,CAAA;IACD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAU,IAAI,CAAC,CAAA;IAC/D,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,cAAc,CACjD,UAAU,EACV,OAAO,EACP,aAAa,CACd,CAAA;IAED,MAAM,YAAY,GAAG,CAAO,WAA+B,EAAE,EAAE;QAC7D,IAAI;YACF,eAAe,CAAC,IAAI,CAAC,CAAA;YACrB,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;YACtE,IAAI,MAAM,EAAE;gBACV,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAA;gBACjE,eAAe,CAAC,QAAQ,CAAC,CAAA;aAC1B;iBAAM;gBACL,eAAe,CAAC,SAAS,CAAC,CAAA;aAC3B;SACF;gBAAS;YACR,eAAe,CAAC,KAAK,CAAC,CAAA;SACvB;IACH,CAAC,CAAA,CAAA;IAED,OAAO,CAAC,GAAG,EAAE;QACX,KAAK,YAAY,CAAC,WAAW,CAAC,CAAA;IAChC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAEjB,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,IAAI,WAAW,EAAE,CAAA;AACpE,CAAC,CAAA","sourcesContent":["import { breakName } from '@cardinal/namespaces'\nimport type { Connection, PublicKey } from '@solana/web3.js'\nimport { useMemo, useState } from 'react'\n\nimport { TWITTER_NAMESPACE_NAME } from '../utils/constants'\nimport { tryGetImageUrl } from '../utils/format'\nimport { useAddressName } from './useAddressName'\n\nexport const useAddressImage = (\n  connection: Connection,\n  address: PublicKey | undefined,\n  namespaceName = TWITTER_NAMESPACE_NAME,\n  dev?: boolean\n): { addressImage: string | undefined; loadingImage: boolean } => {\n  const [addressImage, setAddressImage] = useState<string | undefined>(\n    undefined\n  )\n  const [loadingImage, setLoadingImage] = useState<boolean>(true)\n  const { displayName, loadingName } = useAddressName(\n    connection,\n    address,\n    namespaceName\n  )\n\n  const refreshImage = async (displayName: string | undefined) => {\n    try {\n      setLoadingImage(true)\n      const [_namespace, handle] = displayName ? breakName(displayName) : []\n      if (handle) {\n        const imageUrl = await tryGetImageUrl(namespaceName, handle, dev)\n        setAddressImage(imageUrl)\n      } else {\n        setAddressImage(undefined)\n      }\n    } finally {\n      setLoadingImage(false)\n    }\n  }\n\n  useMemo(() => {\n    void refreshImage(displayName)\n  }, [displayName])\n\n  return { addressImage, loadingImage: loadingImage || loadingName }\n}\n"]}