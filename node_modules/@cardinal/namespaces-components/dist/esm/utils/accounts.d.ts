/// <reference types="node" />
import type { CertificateData } from '@cardinal/certificates';
import type { AccountData } from '@cardinal/token-manager';
import type { PaidClaimApproverData } from '@cardinal/token-manager/dist/cjs/programs/claimApprover';
import type { TimeInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/timeInvalidator';
import type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager';
import type { UseInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/useInvalidator';
import * as metaplex from '@metaplex-foundation/mpl-token-metadata';
import * as spl from '@solana/spl-token';
import type { AccountInfo, Connection, ParsedAccountData, PublicKey } from '@solana/web3.js';
export declare type AccountType = 'metaplexMetadata' | 'editionData' | 'certificate' | 'tokenManager' | 'mint' | 'tokenAccount' | 'timeInvalidator' | 'paidClaimApprover' | 'useInvalidator' | 'stakePool';
export declare type AccountTypeData = {
    type: AccountType;
    displayName?: string;
};
export declare type AccountDataById = {
    [accountId: string]: (AccountData<CertificateData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<TokenManagerData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<PaidClaimApproverData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<TimeInvalidatorData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<UseInvalidatorData> & AccountInfo<Buffer> & AccountTypeData) | (spl.AccountInfo & AccountTypeData) | (spl.MintInfo & AccountInfo<Buffer> & AccountTypeData) | (AccountData<metaplex.MetadataData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<metaplex.EditionData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<metaplex.MasterEditionData> & AccountInfo<Buffer> & AccountTypeData) | (AccountData<undefined> & AccountInfo<Buffer> & AccountTypeData);
};
export declare const deserializeAccountInfos: (accountIds: (PublicKey | null)[], accountInfos: (AccountInfo<Buffer | ParsedAccountData> | null)[]) => AccountDataById;
export declare const accountDataById: (connection: Connection, ids: (PublicKey | null)[]) => Promise<AccountDataById>;
//# sourceMappingURL=accounts.d.ts.map