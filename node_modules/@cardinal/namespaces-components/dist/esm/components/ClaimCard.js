import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@emotion/react/jsx-runtime";
import styled from '@emotion/styled';
import { useState } from 'react';
import { Alert } from '../common/Alert';
import { ButtonLight } from '../common/Button';
import { useReverseEntry } from '../hooks/useReverseEntry';
import { TWITTER_NAMESPACE_NAME } from '../utils/constants';
import { formatTwitterLink } from '../utils/format';
import { NameEntryClaim } from './NameEntryClaim';
import { NameManager } from './NameManager';
import { PoweredByFooter } from './PoweredByFooter';
export const ClaimCard = ({ appName, appTwitter, dev, cluster, connection, secondaryConnection, wallet, notify, onComplete, showManage: showManageDefault, namespaceName = TWITTER_NAMESPACE_NAME, }) => {
    var _a, _b;
    const [showManage, setShowManage] = useState(showManageDefault);
    const reverseEntry = useReverseEntry(connection, namespaceName, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    return (_jsx(_Fragment, { children: _jsx(ClaimCardOuter, { children: _jsxs("div", Object.assign({ className: "relative px-2 pb-8 md:px-8 md:pt-2" }, { children: [_jsxs(Instruction, { children: [appName ? `${appName} uses` : 'Use', " Cardinal to link your Twitter identity to your ", _jsx("strong", { children: "Solana" }), " address."] }), (!(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) || !connection) && (_jsx(Alert, { style: { marginBottom: '20px' }, message: _jsx(_Fragment, { children: _jsx("div", { children: "Connect wallet to continue" }) }), type: "warning", showIcon: true })), !reverseEntry.isFetching && ((_a = reverseEntry.data) === null || _a === void 0 ? void 0 : _a.parsed.entryName) && (_jsx(Alert, { style: { marginBottom: '20px', width: '100%' }, message: _jsx(_Fragment, { children: _jsxs("div", { children: ["Your address is linked to", ' ', formatTwitterLink((_b = reverseEntry.data) === null || _b === void 0 ? void 0 : _b.parsed.entryName), ". Link a new Twitter handle below."] }) }), type: "info", showIcon: true })), connection && (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) && (_jsx(ButtonLight, Object.assign({ className: "absolute right-8 z-10", onClick: () => setShowManage((m) => !m) }, { children: showManage ? 'Back to linking' : 'Manage linked accounts' }))), connection &&
                        wallet &&
                        (showManage ? (_jsx(NameManager, { cluster: cluster, connection: connection, wallet: wallet, namespaceName: namespaceName })) : (_jsx(NameEntryClaim, { dev: dev, cluster: cluster, wallet: wallet, connection: connection, secondaryConnection: secondaryConnection, appName: appName, appTwitter: appTwitter, setShowManage: setShowManage, notify: notify, onComplete: onComplete }))), _jsx(PoweredByFooter, {})] })) }) }));
};
export const ClaimCardOuter = styled.div `
  width 100%;
  height: 100%;
  position: relative;
  margin: 0px auto;
  min-height: 200px;
  padding: 0px 20px;
`;
const Instruction = styled.h2 `
  margin-top: 0px;
  margin-bottom: 20px;
  font-weight: normal;
  font-size: 24px;
  line-height: 30px;
  text-align: center;
  letter-spacing: -0.02em;
  color: #000000;
`;
//# sourceMappingURL=ClaimCard.js.map