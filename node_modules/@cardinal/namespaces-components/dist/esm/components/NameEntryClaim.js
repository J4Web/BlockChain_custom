import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import styled from '@emotion/styled';
import { useMemo, useState } from 'react';
import { Alert } from '../common/Alert';
import { ButtonLight } from '../common/Button';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { useHandleClaimTransaction } from '../handlers/useHandleClaimTransaction';
import { useHandleRevoke } from '../handlers/useHandleRevoke';
import { useHandleVerify } from '../handlers/useHandleVerify';
import { useClaimRequest } from '../hooks/useClaimRequest';
import { useNameEntryData } from '../hooks/useNameEntryData';
import { useReverseEntry } from '../hooks/useReverseEntry';
import { TWITTER_NAMESPACE_NAME } from '../utils/constants';
import { formatShortAddress, formatTwitterLink } from '../utils/format';
import { ButtonWithFooter } from './ButtonWithFooter';
import { Link, Megaphone, Verified } from './icons';
import { LabeledInput } from './LabeledInput';
import { PostTweet } from './PostTweet';
import { StepDetail } from './StepDetail';
import { TwitterHandleNFT } from './TwitterHandleNFT';
const handleFromTweetUrl = (raw) => {
    if (!raw)
        return undefined;
    return raw.split('/')[3];
};
const tweetIdFromTweetUrl = (raw) => {
    var _a;
    if (!raw)
        return undefined;
    return (_a = raw.split('/')[5]) === null || _a === void 0 ? void 0 : _a.split('?')[0];
};
export const NameEntryClaim = ({ dev = false, cluster = 'mainnet-beta', wallet, connection, secondaryConnection, namespaceName = TWITTER_NAMESPACE_NAME, appName, appTwitter, setShowManage, notify, onComplete, }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const [tweetSent, setTweetSent] = useState(false);
    const [tweetUrl, setTweetUrl] = useState(undefined);
    const handle = handleFromTweetUrl(tweetUrl);
    const tweetId = tweetIdFromTweetUrl(tweetUrl);
    const [claimed, setClaimed] = useState(false);
    const reverseEntry = useReverseEntry(connection, namespaceName, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    const nameEntryData = useNameEntryData(secondaryConnection || connection, namespaceName, handle);
    const claimRequest = useClaimRequest(connection, namespaceName, handle, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    const handleVerify = useHandleVerify(wallet, cluster, dev);
    const handleRevoke = useHandleRevoke(wallet, cluster, dev);
    const handleClaimTransaction = useHandleClaimTransaction(connection, wallet, cluster, dev);
    useMemo(() => {
        var _a, _b;
        if (tweetUrl && tweetSent && !((_b = (_a = claimRequest === null || claimRequest === void 0 ? void 0 : claimRequest.data) === null || _a === void 0 ? void 0 : _a.parsed) === null || _b === void 0 ? void 0 : _b.isApproved)) {
            handleVerify.mutate({ tweetId, handle }, {
                onSuccess: () => claimRequest === null || claimRequest === void 0 ? void 0 : claimRequest.refetch(),
            });
        }
    }, [
        wallet.publicKey.toString(),
        tweetUrl,
        handle,
        tweetSent,
        tweetId,
        (_a = claimRequest.data) === null || _a === void 0 ? void 0 : _a.pubkey.toString(),
    ]);
    const alreadyOwned = ((_c = (_b = nameEntryData.data) === null || _b === void 0 ? void 0 : _b.owner) === null || _c === void 0 ? void 0 : _c.toString()) && !((_d = nameEntryData.data) === null || _d === void 0 ? void 0 : _d.isOwnerPDA)
        ? true
        : false;
    return (_jsxs(_Fragment, { children: [_jsxs(DetailsWrapper, { children: [_jsx(StepDetail, { disabled: !(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) || !connection, icon: _jsx(Megaphone, {}), title: "Tweet!", description: _jsxs(_Fragment, { children: [_jsx("div", { children: "Tweet your public key" }), _jsx(PostTweet, { wallet: wallet, appName: appName, appTwitter: appTwitter, disabled: false, callback: () => setTweetSent(true), cluster: cluster })] }) }), _jsx(StepDetail, { disabled: !tweetSent, icon: _jsx(Link, {}), title: "Paste the URL of the tweet", description: _jsx("div", { children: _jsx(LabeledInput, { disabled: !tweetSent, label: "Tweet", name: "tweet", onChange: (e) => setTweetUrl(e.target.value) }) }) }), _jsx(StepDetail, { disabled: !handle, icon: _jsx(Verified, {}), title: "Claim your handle", description: _jsxs(_Fragment, { children: [_jsx("div", { children: "You will receive a non-tradeable NFT to prove you own your Twitter handle." }), handle && (_jsxs("div", Object.assign({ style: {
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '20px',
                                        paddingTop: '20px',
                                    } }, { children: [_jsx(TwitterHandleNFT, { handle: handle, cluster: cluster, dev: dev }), _jsxs("div", Object.assign({ style: {
                                                padding: '10px',
                                                width: 'calc(100% - 120px - 20px)',
                                            } }, { children: [handleVerify.isLoading ? (_jsx("div", { className: "mb-2 h-8 w-full animate-pulse rounded-lg bg-gray-200" })) : handleVerify.error ? (_jsx(Alert, { style: {
                                                        margin: '10px 0px',
                                                        height: 'auto',
                                                        wordBreak: 'break-word',
                                                    }, message: _jsx(_Fragment, { children: `${handleVerify.error}` }), type: "error", showIcon: true })) : (_jsx(Alert, { style: {
                                                        margin: '10px 0px',
                                                        height: 'auto',
                                                        wordBreak: 'break-word',
                                                    }, message: _jsx(_Fragment, { children: _jsxs("div", { children: ["Verified ownership of ", formatTwitterLink(handle)] }) }), type: "success", showIcon: true })), nameEntryData.isFetching || claimRequest.isFetching ? (_jsx("div", { className: "mb-2 h-8 min-w-full animate-pulse rounded-lg bg-gray-200" })) : (alreadyOwned &&
                                                    !((_e = claimRequest.data) === null || _e === void 0 ? void 0 : _e.parsed.isApproved) && (_jsxs(_Fragment, { children: [_jsx(Alert, { style: {
                                                                marginBottom: '10px',
                                                                height: 'auto',
                                                                wordBreak: 'break-word',
                                                            }, message: _jsx(_Fragment, { children: _jsxs("div", { children: ["Owned by", ' ', formatShortAddress((_f = nameEntryData === null || nameEntryData === void 0 ? void 0 : nameEntryData.data) === null || _f === void 0 ? void 0 : _f.owner)] }) }), type: "warning", showIcon: true }), ((_h = (_g = nameEntryData === null || nameEntryData === void 0 ? void 0 : nameEntryData.data) === null || _g === void 0 ? void 0 : _g.owner) === null || _h === void 0 ? void 0 : _h.toString()) ===
                                                            ((_j = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) === null || _j === void 0 ? void 0 : _j.toString()) ? (_jsx(_Fragment, { children: _jsxs("div", { children: ["You already own this handle! If you want to set it as your default, visit the", ' ', _jsx("span", Object.assign({ className: "cursor-pointer text-blue-500", onClick: () => setShowManage(true) }, { children: "manage" })), ' ', "tab."] }) })) : (_jsxs(_Fragment, { children: [_jsx("div", { children: "If you wish to continue, you will revoke this handle from them." }), _jsx(ButtonWrapper, { children: _jsx(ButtonLight, Object.assign({ onClick: () => handleRevoke.mutate({ tweetId, handle }, {
                                                                            onSuccess: () => {
                                                                                notify &&
                                                                                    notify({
                                                                                        message: 'Revoke successful',
                                                                                    });
                                                                                nameEntryData.refetch();
                                                                                claimRequest.refetch();
                                                                            },
                                                                        }) }, { children: handleRevoke.isLoading ? (_jsx(LoadingSpinner, { height: "15px", fill: "#000" })) : (_jsx(_Fragment, { children: "Revoke" })) })) })] })), handleRevoke.error && (_jsx(Alert, { style: {
                                                                marginTop: '10px',
                                                                height: 'auto',
                                                                wordBreak: 'break-word',
                                                            }, message: _jsx(_Fragment, { children: _jsx("div", { children: `${handleRevoke.error}` }) }), type: "error", showIcon: true }))] })))] }))] })))] }) }), handleClaimTransaction.error && (_jsx(Alert, { style: {
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: _jsx(_Fragment, { children: _jsx("div", { children: `${handleClaimTransaction.error}` }) }), type: "error", showIcon: true }))] }), _jsxs(ButtonWithFooter, Object.assign({ loading: handleClaimTransaction.isLoading, complete: claimed, disabled: !handleVerify.isSuccess ||
                    (tweetUrl === null || tweetUrl === void 0 ? void 0 : tweetUrl.length) === 0 ||
                    !nameEntryData.isFetched ||
                    (alreadyOwned && !((_k = claimRequest.data) === null || _k === void 0 ? void 0 : _k.parsed.isApproved)), onClick: () => handleClaimTransaction.mutate({
                    tweetId,
                    handle,
                }, {
                    onSuccess: () => {
                        nameEntryData.remove();
                        reverseEntry.remove();
                        onComplete && onComplete(handle || '');
                    },
                }) }, { children: ["Claim ", handle && `@${handle}`] }))] }));
};
const ButtonWrapper = styled.div `
  display: flex;
  margin-top: 5px;
  justify-content: center;
`;
const DetailsWrapper = styled.div `
  display: grid;
  grid-row-gap: 28px;
`;
//# sourceMappingURL=NameEntryClaim.js.map