import { __awaiter } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@emotion/react/jsx-runtime";
import { getQueryParam } from '@cardinal/common';
import { breakName, formatName } from '@cardinal/namespaces';
import { useEffect, useState } from 'react';
import { AiFillStar } from 'react-icons/ai';
import { BiUnlink } from 'react-icons/bi';
import { Alert } from '../common/Alert';
import { ButtonLight } from '../common/Button';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { useHandleSetDefault } from '../handlers/useHandleSetDefault';
import { useHandleUnlink } from '../handlers/useHandleUnlink';
import { useReverseEntry } from '../hooks/useReverseEntry';
import { useUserNamesForNamespace } from '../hooks/useUserNamesForNamespace';
import { formatTwitterLink } from '../utils/format';
import { BoltIcon } from './icons';
import { StepDetail } from './StepDetail';
export const nameFromMint = (name, uri) => {
    if (uri.includes('name')) {
        return [name, getQueryParam(uri, 'name') || ''];
    }
    return [breakName(name || '')[0], breakName(name || '')[1]];
};
export const NameEntryRow = ({ cluster, connection, wallet, namespaceName, userTokenData, setError, setSuccess, }) => {
    var _a, _b, _c, _d, _e, _f;
    const userNamesForNamespace = useUserNamesForNamespace(connection, wallet.publicKey, namespaceName);
    const reverseEntry = useReverseEntry(connection, namespaceName, wallet.publicKey);
    const handleUnlink = useHandleUnlink(connection, wallet, namespaceName, userTokenData);
    const handleSetDefault = useHandleSetDefault(connection, wallet, namespaceName);
    useEffect(() => {
        if (handleUnlink.isLoading || handleSetDefault.isLoading) {
            setError(undefined);
        }
    }, [handleUnlink.isLoading, handleSetDefault.isLoading]);
    return (_jsxs("div", Object.assign({ className: "flex items-center justify-between gap-5 px-2" }, { children: [_jsxs("div", Object.assign({ className: "cursor-point flex cursor-pointer items-center gap-1", style: { fontSize: '14px' } }, { children: [formatTwitterLink(nameFromMint(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || '')[1]), reverseEntry.data &&
                        formatName(namespaceName, reverseEntry.data.parsed.entryName) ===
                            formatName(...nameFromMint(((_c = userTokenData.metaplexData) === null || _c === void 0 ? void 0 : _c.parsed.data.name) || '', ((_d = userTokenData.metaplexData) === null || _d === void 0 ? void 0 : _d.parsed.data.uri) || '')) && _jsx(AiFillStar, {})] })), _jsxs("div", Object.assign({ className: "flex items-center gap-2" }, { children: [(!reverseEntry.data ||
                        (reverseEntry.data &&
                            formatName(namespaceName, reverseEntry.data.parsed.entryName) !==
                                formatName(...nameFromMint(((_e = userTokenData.metaplexData) === null || _e === void 0 ? void 0 : _e.parsed.data.name) || '', ((_f = userTokenData.metaplexData) === null || _f === void 0 ? void 0 : _f.parsed.data.uri) || '')))) && (_jsx(ButtonLight, Object.assign({ onClick: () => handleSetDefault.mutate({
                            tokenData: userTokenData,
                        }, {
                            onSuccess: (txid) => {
                                userNamesForNamespace.remove();
                                reverseEntry.refetch();
                                setSuccess(_jsxs("div", { children: ["Succesfully set default with", ' ', _jsx("a", Object.assign({ className: "cursor-pointer text-blue-500", target: `_blank`, href: `https://explorer.solana.com/tx/${txid}?cluster=${cluster}` }, { children: "transaction" })), ". Changes will be reflected shortly."] }));
                            },
                            onError: (e) => setError(e),
                        }) }, { children: handleSetDefault.isLoading ? (_jsx(LoadingSpinner, { height: "15px", fill: "#000" })) : (_jsx(_Fragment, { children: "Set Default" })) }))), _jsx(ButtonLight, Object.assign({ className: "flex items-center gap-1", onClick: () => __awaiter(void 0, void 0, void 0, function* () {
                            var _g, _h;
                            return handleUnlink.mutate({
                                reverseNameEntryData: reverseEntry.data &&
                                    formatName(namespaceName, reverseEntry.data.parsed.entryName) ===
                                        formatName(...nameFromMint(((_g = userTokenData.metaplexData) === null || _g === void 0 ? void 0 : _g.parsed.data.name) || '', ((_h = userTokenData.metaplexData) === null || _h === void 0 ? void 0 : _h.parsed.data.uri) || ''))
                                    ? reverseEntry.data
                                    : undefined,
                            }, {
                                onSuccess: (txid) => {
                                    var _a, _b;
                                    userNamesForNamespace.remove();
                                    reverseEntry.refetch();
                                    setSuccess(_jsxs("div", { children: ["Succesfully unlinked", ' ', formatTwitterLink(nameFromMint(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || '')[1]), ". Changes will be reflected shortly.", ' ', _jsx("a", Object.assign({ className: "cursor-pointer text-blue-500", target: `_blank`, href: `https://explorer.solana.com/tx/${txid}?cluster=${cluster}` }, { children: "transaction" }))] }));
                                },
                                onError: (e) => setError(e),
                            });
                        }) }, { children: handleUnlink.isLoading ? (_jsx(LoadingSpinner, { height: "15px", fill: "#000" })) : (_jsxs(_Fragment, { children: [_jsx(BiUnlink, {}), "Unlink"] })) }))] }))] })));
};
export const NameManager = ({ connection, wallet, namespaceName, }) => {
    var _a, _b;
    const [error, setError] = useState();
    const [success, setSuccess] = useState();
    const handleSetDefault = useHandleSetDefault(connection, wallet, namespaceName);
    const userNamesForNamespace = useUserNamesForNamespace(connection, wallet.publicKey, namespaceName);
    const reverseEntry = useReverseEntry(connection, namespaceName, wallet.publicKey);
    return (_jsxs("div", Object.assign({ className: "mb-10 flex flex-col gap-2" }, { children: [_jsx(StepDetail, { icon: _jsx(BoltIcon, {}), title: "Manage existing handles", description: _jsx(_Fragment, {}) }), _jsx("div", { className: "my-1 h-[1px] bg-gray-200" }), !userNamesForNamespace.isFetched || !reverseEntry.isFetched ? (_jsxs(_Fragment, { children: [_jsx("div", { className: "h-8 w-full animate-pulse rounded-lg bg-gray-200" }), _jsx("div", { className: "h-8 w-full animate-pulse rounded-lg bg-gray-200" })] })) : ((_a = userNamesForNamespace.data) === null || _a === void 0 ? void 0 : _a.length) === 0 ? (_jsx("div", Object.assign({ className: "px-2 text-gray-400" }, { children: "No names found" }))) : (_jsxs(_Fragment, { children: [(_b = userNamesForNamespace.data) === null || _b === void 0 ? void 0 : _b.sort((userTokenData) => {
                        var _a, _b;
                        return reverseEntry.data &&
                            formatName(namespaceName, reverseEntry.data.parsed.entryName) ===
                                formatName(...nameFromMint(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || ''))
                            ? -1
                            : 1;
                    }).map((userTokenData) => {
                        var _a;
                        return (_jsx(NameEntryRow, { connection: connection, wallet: wallet, namespaceName: namespaceName, userTokenData: userTokenData, setError: setError, setSuccess: setSuccess }, (_a = userTokenData.tokenAccount) === null || _a === void 0 ? void 0 : _a.pubkey.toString()));
                    }), handleSetDefault.error && (_jsx(Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: _jsx(_Fragment, { children: _jsx("div", { children: `${handleSetDefault.error}` }) }), type: "error", showIcon: true })), error && (_jsx(Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: _jsx(_Fragment, { children: _jsx("div", { children: `${error}` }) }), type: "error", showIcon: true })), success && (_jsx(Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: success, type: "success", showIcon: true }))] }))] })));
};
//# sourceMappingURL=NameManager.js.map