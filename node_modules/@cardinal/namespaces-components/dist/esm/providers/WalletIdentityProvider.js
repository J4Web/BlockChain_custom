import { jsx as _jsx, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import React, { useContext, useState } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';
import { ClaimCard } from '..';
import { Modal } from '../modal';
import { withSleep } from '../utils/transactions';
const DEBUG = false;
export const WalletIdentityContext = React.createContext(null);
export const WalletIdentityProvider = ({ appName, appTwitter, children, }) => {
    const [wallet, setWallet] = useState();
    const [connection, setConnection] = useState();
    const [secondaryConnection, setSecondaryConnection] = useState();
    const [showManageDefault, setShowManageDefault] = useState(false);
    const [cluster, setCluster] = useState(undefined);
    const [dev, setDev] = useState(undefined);
    const [onClose, setOnClose] = useState();
    const [showIdentityModal, setShowIdentityModal] = useState(false);
    const [handle, setHandle] = useState(undefined);
    return (_jsx(WalletIdentityContext.Provider, Object.assign({ value: {
            show: ({ wallet, connection, cluster, secondaryConnection, dev, onClose, showManage: showManageDefault, }) => {
                setWallet(wallet);
                setConnection(connection);
                setCluster(cluster);
                setSecondaryConnection(secondaryConnection);
                setDev(dev);
                onClose && setOnClose(() => onClose);
                setShowIdentityModal(true);
                setShowManageDefault(showManageDefault || false);
            },
            handle,
            wallet,
            connection,
            cluster,
            dev,
            showIdentityModal,
        } }, { children: _jsxs(QueryClientProvider, Object.assign({ client: new QueryClient() }, { children: [_jsx(Modal, Object.assign({ isOpen: showIdentityModal, onDismiss: () => {
                        setShowIdentityModal(false);
                        onClose && onClose();
                    }, darkenOverlay: true }, { children: _jsx(ClaimCard, { dev: dev, cluster: cluster, wallet: wallet, connection: connection, secondaryConnection: secondaryConnection, appName: appName, appTwitter: appTwitter, showManage: showManageDefault, onComplete: (handle) => {
                            setHandle(handle);
                            withSleep(() => {
                                setShowIdentityModal(false);
                                onClose && onClose();
                            }, 1000);
                        } }) })), children, DEBUG && _jsx(ReactQueryDevtools, { initialIsOpen: false })] })) })));
};
export const useWalletIdentity = () => {
    const identity = useContext(WalletIdentityContext);
    if (!identity) {
        throw new Error('Not in WalletIdentity context');
    }
    return identity;
};
//# sourceMappingURL=WalletIdentityProvider.js.map