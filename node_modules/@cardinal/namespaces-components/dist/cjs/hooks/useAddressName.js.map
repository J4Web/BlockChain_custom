{"version":3,"file":"useAddressName.js","sourceRoot":"","sources":["../../../src/hooks/useAddressName.ts"],"names":[],"mappings":";;;;AAAA,qDAAkE;AAElE,iCAAyC;AAEzC,gFAAuE;AACvE,kDAA2D;AAEpD,MAAM,cAAc,GAAG,CAC5B,UAAsB,EACtB,OAA8B,EAC9B,aAAa,GAAG,kCAAsB,EAKtC,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,0CAAiB,GAAE,CAAA;IACtC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAA;IACpE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,EAAU,IAAI,CAAC,CAAA;IAE7D,MAAM,WAAW,GAAG,GAAS,EAAE;QAC7B,IAAI;YACF,cAAc,CAAC,IAAI,CAAC,CAAA;YACpB,IAAI,OAAO,EAAE;gBACX,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,IAAA,4BAAe,EAAC,aAAa,CAAC,CAAA;gBAC1D,MAAM,CAAC,GAAG,MAAM,IAAA,uBAAU,EAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,CAAA;gBAC5D,cAAc,CAAC,CAAC,CAAC,CAAA;aAClB;SACF;gBAAS;YACR,cAAc,CAAC,KAAK,CAAC,CAAA;SACtB;IACH,CAAC,CAAA,CAAA;IAED,IAAA,eAAO,EAAC,GAAG,EAAE;QACX,KAAK,WAAW,EAAE,CAAA;IACpB,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC,CAAA;IAE5D,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAA;AAClD,CAAC,CAAA;AA/BY,QAAA,cAAc,kBA+B1B","sourcesContent":["import { findNamespaceId, tryGetName } from '@cardinal/namespaces'\nimport type { Connection, PublicKey } from '@solana/web3.js'\nimport { useMemo, useState } from 'react'\n\nimport { useWalletIdentity } from '../providers/WalletIdentityProvider'\nimport { TWITTER_NAMESPACE_NAME } from '../utils/constants'\n\nexport const useAddressName = (\n  connection: Connection,\n  address: PublicKey | undefined,\n  namespaceName = TWITTER_NAMESPACE_NAME\n): {\n  displayName: string | undefined\n  loadingName: boolean\n  refreshName: () => void\n} => {\n  const { handle } = useWalletIdentity()\n  const [displayName, setDisplayName] = useState<string | undefined>()\n  const [loadingName, setLoadingName] = useState<boolean>(true)\n\n  const refreshName = async () => {\n    try {\n      setLoadingName(true)\n      if (address) {\n        const [namespaceId] = await findNamespaceId(namespaceName)\n        const n = await tryGetName(connection, address, namespaceId)\n        setDisplayName(n)\n      }\n    } finally {\n      setLoadingName(false)\n    }\n  }\n\n  useMemo(() => {\n    void refreshName()\n  }, [connection, address?.toString(), namespaceName, handle])\n\n  return { displayName, loadingName, refreshName }\n}\n"]}