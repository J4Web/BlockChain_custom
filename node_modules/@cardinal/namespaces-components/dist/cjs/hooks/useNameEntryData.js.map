{"version":3,"file":"useNameEntryData.js","sourceRoot":"","sources":["../../../src/hooks/useNameEntryData.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData, CertificateData } from '@cardinal/certificates'\nimport { certificateIdForMint, getCertificate } from '@cardinal/certificates'\nimport { tryGetAccount } from '@cardinal/common'\nimport type { EntryData } from '@cardinal/namespaces'\nimport { getNameEntry, NAMESPACES_PROGRAM_ID } from '@cardinal/namespaces'\nimport * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport * as anchor from '@project-serum/anchor'\nimport * as splToken from '@solana/spl-token'\nimport type { Connection, TokenAccountBalancePair } from '@solana/web3.js'\nimport { PublicKey } from '@solana/web3.js'\nimport { useQuery } from 'react-query'\n\nexport type NameEntryData = {\n  nameEntry: AccountData<EntryData>\n  certificate?: AccountData<CertificateData>\n  metaplexData?: AccountData<metaplex.MetadataData>\n  arweaveData?: AccountData<any>\n  largestHolders: TokenAccountBalancePair[]\n  owner: PublicKey | undefined\n  isOwnerPDA: boolean\n}\n\nexport async function getNameEntryData(\n  connection: Connection,\n  namespaceName: string,\n  entryName: string\n): Promise<NameEntryData> {\n  const nameEntry = await getNameEntry(connection, namespaceName, entryName)\n  const { mint } = nameEntry.parsed\n\n  const [[metaplexId], [certificateId]] = await Promise.all([\n    metaplex.MetadataProgram.findMetadataAccount(new PublicKey(mint)),\n    certificateIdForMint(mint),\n  ])\n  const [metaplexData, certificate] = await Promise.all([\n    metaplex.Metadata.load(connection, metaplexId),\n    tryGetAccount(() => getCertificate(connection, certificateId)),\n  ])\n  let json\n  try {\n    json =\n      metaplexData.data.data.uri &&\n      (await fetch(metaplexData.data.data.uri).then((r) => r.json()))\n  } catch (e) {\n    console.log('Failed to get json', json)\n  }\n\n  const largestHolders = await connection.getTokenLargestAccounts(mint)\n  const certificateMintToken = new splToken.Token(\n    connection,\n    mint,\n    splToken.TOKEN_PROGRAM_ID,\n    // not used\n    anchor.web3.Keypair.generate()\n  )\n\n  const largestTokenAccount =\n    largestHolders?.value[0]?.address &&\n    (await certificateMintToken.getAccountInfo(\n      largestHolders?.value[0]?.address\n    ))\n\n  let isOwnerPDA = false\n  if (largestTokenAccount?.owner) {\n    const ownerAccountInfo = await connection.getAccountInfo(\n      largestTokenAccount?.owner\n    )\n    isOwnerPDA =\n      ownerAccountInfo?.owner.toString() === NAMESPACES_PROGRAM_ID.toString()\n  }\n\n  return {\n    nameEntry,\n    certificate: certificate ?? undefined,\n    metaplexData: { pubkey: metaplexData.pubkey, parsed: metaplexData.data },\n    arweaveData: { pubkey: metaplexId, parsed: json },\n    largestHolders: largestHolders.value,\n    owner: largestTokenAccount?.owner,\n    isOwnerPDA,\n  }\n}\n\nexport const useNameEntryData = (\n  connection: Connection | undefined,\n  namespaceName: string,\n  entryName: string | undefined\n) => {\n  return useQuery<NameEntryData | undefined>(\n    ['useNameEntryData', namespaceName, entryName],\n    async () => {\n      if (!entryName || !connection) return\n      return getNameEntryData(connection, namespaceName, entryName)\n    },\n    {\n      enabled: !!entryName && !!connection,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }\n  )\n}\n"]}