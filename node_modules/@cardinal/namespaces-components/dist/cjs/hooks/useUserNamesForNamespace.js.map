{"version":3,"file":"useUserNamesForNamespace.js","sourceRoot":"","sources":["../../../src/hooks/useUserNamesForNamespace.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CertificateData } from '@cardinal/certificates'\nimport type { AccountData } from '@cardinal/common'\nimport { getBatchedMultipleAccounts } from '@cardinal/common'\nimport { findNamespaceId } from '@cardinal/namespaces'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport * as spl from '@solana/spl-token'\nimport type {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n} from '@solana/web3.js'\nimport { PublicKey } from '@solana/web3.js'\nimport { useQuery } from 'react-query'\n\nimport { accountDataById } from '../utils/accounts'\nimport { TWITTER_NAMESPACE_NAME } from '../utils/constants'\nimport { tryPublicKey } from '../utils/format'\n\nexport type UserTokenData = {\n  tokenAccount?: {\n    pubkey: PublicKey\n    account: AccountInfo<ParsedAccountData>\n  }\n  metaplexData?: AccountData<metaplex.MetadataData>\n  tokenManager?: AccountData<TokenManagerData>\n  certificate?: AccountData<CertificateData> | null\n}\n\nexport const useUserNamesForNamespace = (\n  connection: Connection,\n  walletId: PublicKey | undefined,\n  namespaceName: string\n) => {\n  return useQuery<UserTokenData[]>(\n    ['useUserNamesForNamespace', walletId?.toString()],\n    async () => {\n      if (!walletId) return []\n      const [namespaceId] = await findNamespaceId(namespaceName)\n\n      const allTokenAccounts = await connection.getParsedTokenAccountsByOwner(\n        new PublicKey(walletId),\n        { programId: spl.TOKEN_PROGRAM_ID }\n      )\n      let tokenAccounts = allTokenAccounts.value\n        .filter(\n          (tokenAccount) =>\n            tokenAccount.account.data.parsed.info.tokenAmount.uiAmount > 0\n        )\n        .sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()))\n\n      // lookup metaplex data\n      const metaplexIds = await Promise.all(\n        tokenAccounts.map(\n          async (tokenAccount) =>\n            (\n              await metaplex.MetadataProgram.findMetadataAccount(\n                new PublicKey(tokenAccount.account.data.parsed.info.mint)\n              )\n            )[0]\n        )\n      )\n\n      const metaplexAccountInfos = await getBatchedMultipleAccounts(\n        connection,\n        metaplexIds\n      )\n      const metaplexData = metaplexAccountInfos.reduce(\n        (acc, accountInfo, i) => {\n          try {\n            acc[tokenAccounts[i]!.pubkey.toString()] = {\n              pubkey: metaplexIds[i]!,\n              ...accountInfo,\n              parsed: metaplex.MetadataData.deserialize(\n                accountInfo?.data as Buffer\n              ) as metaplex.MetadataData,\n            }\n          } catch (e) {}\n          return acc\n        },\n        {} as {\n          [tokenAccountId: string]: {\n            pubkey: PublicKey\n            parsed: metaplex.MetadataData\n          }\n        }\n      )\n\n      // filter by creators\n      tokenAccounts = tokenAccounts.filter(\n        (tokenAccount) =>\n          metaplexData[\n            tokenAccount.pubkey.toString()\n          ]?.parsed?.data?.creators?.some(\n            (creator) =>\n              creator.address.toString() === namespaceId.toString() &&\n              creator.verified\n          ) ||\n          (metaplexData[tokenAccount.pubkey.toString()]?.parsed?.data\n            ?.symbol === 'NAME' &&\n            metaplexData[\n              tokenAccount.pubkey.toString()\n            ]?.parsed?.data?.name.includes(TWITTER_NAMESPACE_NAME))\n      )\n\n      // lookup delegates\n      const delegateIds = tokenAccounts.map((tokenAccount) =>\n        tryPublicKey(tokenAccount.account.data.parsed.info.delegate)\n      )\n      const accountsById = await accountDataById(connection, delegateIds)\n\n      return tokenAccounts.map((tokenAccount, i) => {\n        const delegateData =\n          accountsById[tokenAccount.account.data.parsed.info.delegate]\n\n        let tokenManagerData: AccountData<TokenManagerData> | undefined\n        let certificateData: AccountData<CertificateData> | undefined\n        if (delegateData?.type === 'tokenManager') {\n          tokenManagerData = delegateData as AccountData<TokenManagerData>\n        } else if (delegateData?.type === 'certificate') {\n          certificateData = delegateData as AccountData<CertificateData>\n        }\n        return {\n          tokenAccount,\n          metaplexData: metaplexData[tokenAccount.pubkey.toString()],\n          tokenManager: tokenManagerData,\n          certificate: certificateData,\n        }\n      })\n    },\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }\n  )\n}\n"]}