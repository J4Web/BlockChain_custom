{"version":3,"file":"useHandleClaimTransaction.js","sourceRoot":"","sources":["../../../src/handlers/useHandleClaimTransaction.ts"],"names":[],"mappings":";;;;AAMA,6CAA2E;AAC3E,6CAAyC;AAEzC,kDAA4C;AAWrC,MAAM,yBAAyB,GAAG,CACvC,UAAsB,EACtB,MAAc,EACd,OAAgB,EAChB,GAAY,EACZ,EAAE;IACF,OAAO,IAAA,yBAAW,EAChB,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,EAC7B,CAAO,EACL,OAAO,EACP,MAAM,GAIP,EAAmB,EAAE;QACpB,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAA;QAClC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,IAAA,mBAAO,EACR,GAAG,CACJ,qCAAqC,OAAO,cAAc,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC,QAAQ,EAAE,WAAW,MAAM,qBACtG,OAAO,IAAI,YAAY,OAAO,EAChC,EAAE,EACF;YACE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;YAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;aACrC,CAAC;SACH,CACF,CAAA;QACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACtE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAA;QAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,CAAA;QACrE,MAAM,EAAE,GAAG,qBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnC,MAAM,MAAM,CAAC,eAAgB,CAAC,EAAE,CAAC,CAAA;QACjC,OAAO,IAAA,sCAA4B,EAAC,UAAU,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE;YAC9D,aAAa,EAAE,IAAI;SACpB,CAAC,CAAA;IACJ,CAAC,CAAA,CACF,CAAA;AACH,CAAC,CAAA;AAzCY,QAAA,yBAAyB,6BAyCrC","sourcesContent":["import type { CertificateData } from '@cardinal/certificates'\nimport type { AccountData } from '@cardinal/common'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport type * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Cluster, Connection, PublicKey } from '@solana/web3.js'\nimport { sendAndConfirmRawTransaction, Transaction } from '@solana/web3.js'\nimport { useMutation } from 'react-query'\n\nimport { apiBase } from '../utils/constants'\n\nexport interface HandleSetParam {\n  metaplexData?: {\n    pubkey: PublicKey\n    parsed: metaplex.MetadataData\n  } | null\n  tokenManager?: AccountData<TokenManagerData>\n  certificate?: AccountData<CertificateData> | null\n}\n\nexport const useHandleClaimTransaction = (\n  connection: Connection,\n  wallet: Wallet,\n  cluster: Cluster,\n  dev: boolean\n) => {\n  return useMutation(\n    [wallet.publicKey.toString()],\n    async ({\n      tweetId,\n      handle,\n    }: {\n      tweetId?: string\n      handle?: string\n    }): Promise<string> => {\n      if (!handle || !tweetId) return ''\n      const response = await fetch(\n        `${apiBase(\n          dev\n        )}/namespaces/twitter/claim?tweetId=${tweetId}&publicKey=${wallet?.publicKey.toString()}&handle=${handle}&namespace=twitter${\n          cluster && `&cluster=${cluster}`\n        }`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            account: wallet.publicKey.toString(),\n          }),\n        }\n      )\n      const json = await response.json()\n      if (response.status !== 200 || json.error) throw new Error(json.error)\n      const { transaction } = json\n      const buffer = Buffer.from(decodeURIComponent(transaction), 'base64')\n      const tx = Transaction.from(buffer)\n      await wallet.signTransaction!(tx)\n      return sendAndConfirmRawTransaction(connection, tx.serialize(), {\n        skipPreflight: true,\n      })\n    }\n  )\n}\n"]}