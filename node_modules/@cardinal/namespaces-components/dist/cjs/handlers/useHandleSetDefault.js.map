{"version":3,"file":"useHandleSetDefault.js","sourceRoot":"","sources":["../../../src/handlers/useHandleSetDefault.ts"],"names":[],"mappings":";;;;AAEA,qDAA+E;AAK/E,6CAIwB;AACxB,6CAAyC;AAEzC,2DAAwD;AAWjD,MAAM,mBAAmB,GAAG,CACjC,UAAsB,EACtB,MAAc,EACd,aAAqB,EACrB,EAAE;IACF,OAAO,IAAA,yBAAW,EAChB,CAAO,EAAE,SAAS,EAAkC,EAAmB,EAAE;;QACvE,IAAI,CAAC,SAAS;YAAE,OAAO,EAAE,CAAA;QACzB,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAA;QACrC,MAAM,SAAS,GAAG,IAAI,mBAAS,CAAC,MAAA,SAAS,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAK,CAAC,CAAA;QACrE,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,IAAA,0BAAY,EAChC,CAAA,MAAA,SAAS,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAI,CAAC,IAAI,KAAI,EAAE,EAC9C,CAAA,MAAA,SAAS,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAI,CAAC,GAAG,KAAI,EAAE,CAC9C,CAAA;QACD,IAAI,SAAS,CAAC,WAAW,EAAE;YACzB,MAAM,uBAAU,CAAC,mBAAmB,CAClC,UAAU,EACV,MAAM,EACN,aAAa,EACb,SAAS,EACT,SAAS,EACT,WAAW,CACZ,CAAA;SACF;aAAM,IAAI,SAAS,CAAC,YAAY,EAAE;YACjC,MAAM,IAAA,yCAA4B,EAChC,WAAW,EACX,UAAU,EACV,MAAM,EACN,aAAa,EACb,SAAS,EACT,SAAS,CACV,CAAA;SACF;QACD,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAA;QACvC,WAAW,CAAC,eAAe,GAAG,CAC5B,MAAM,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAC3C,CAAC,SAAS,CAAA;QACX,MAAM,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,IAAI,GAAG,MAAM,IAAA,sCAA4B,EAC7C,UAAU,EACV,WAAW,CAAC,SAAS,EAAE,EACvB;YACE,aAAa,EAAE,IAAI;SACpB,CACF,CAAA;QACD,OAAO,IAAI,CAAA;IACb,CAAC,CAAA,CACF,CAAA;AACH,CAAC,CAAA;AAhDY,QAAA,mBAAmB,uBAgD/B","sourcesContent":["import type { CertificateData } from '@cardinal/certificates'\nimport type { AccountData } from '@cardinal/common'\nimport { deprecated, withSetNamespaceReverseEntry } from '@cardinal/namespaces'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport type * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Connection } from '@solana/web3.js'\nimport {\n  PublicKey,\n  sendAndConfirmRawTransaction,\n  Transaction,\n} from '@solana/web3.js'\nimport { useMutation } from 'react-query'\n\nimport { nameFromMint } from '../components/NameManager'\n\nexport interface HandleSetParam {\n  metaplexData?: {\n    pubkey: PublicKey\n    parsed: metaplex.MetadataData\n  } | null\n  tokenManager?: AccountData<TokenManagerData>\n  certificate?: AccountData<CertificateData> | null\n}\n\nexport const useHandleSetDefault = (\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string\n) => {\n  return useMutation(\n    async ({ tokenData }: { tokenData?: HandleSetParam }): Promise<string> => {\n      if (!tokenData) return ''\n      const transaction = new Transaction()\n      const entryMint = new PublicKey(tokenData.metaplexData?.parsed.mint!)\n      const [, entryName] = nameFromMint(\n        tokenData.metaplexData?.parsed.data.name || '',\n        tokenData.metaplexData?.parsed.data.uri || ''\n      )\n      if (tokenData.certificate) {\n        await deprecated.withSetReverseEntry(\n          connection,\n          wallet,\n          namespaceName,\n          entryName,\n          entryMint,\n          transaction\n        )\n      } else if (tokenData.tokenManager) {\n        await withSetNamespaceReverseEntry(\n          transaction,\n          connection,\n          wallet,\n          namespaceName,\n          entryName,\n          entryMint\n        )\n      }\n      transaction.feePayer = wallet.publicKey\n      transaction.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash\n      await wallet.signTransaction(transaction)\n      const txid = await sendAndConfirmRawTransaction(\n        connection,\n        transaction.serialize(),\n        {\n          skipPreflight: true,\n        }\n      )\n      return txid\n    }\n  )\n}\n"]}