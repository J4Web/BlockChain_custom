{"version":3,"file":"useHandleUnlink.js","sourceRoot":"","sources":["../../../src/handlers/useHandleUnlink.ts"],"names":[],"mappings":";;;;AAAA,yDAAgE;AAGhE,qDAG6B;AAC7B,yEAAkD;AAGlD,6CAIwB;AACxB,6CAAyC;AAEzC,2DAAwD;AAGjD,MAAM,eAAe,GAAG,CAC7B,UAAsB,EACtB,MAAc,EACd,aAAqB,EACrB,aAA4B,EAC5B,EAAE;IACF,OAAO,IAAA,yBAAW,EAChB,CAAO,EACL,oBAAoB,GAGrB,EAAmB,EAAE;;QACpB,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,UAAU,CAAC,eAAe,CAAC,aAAa,CAAC,CAAA;QACrE,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAA;QACrC,MAAM,SAAS,GAAG,IAAI,mBAAS,CAAC,MAAA,aAAa,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAK,CAAC,CAAA;QACzE,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,IAAA,0BAAY,EAChC,MAAA,aAAa,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAI,CAAC,IAAK,EAC7C,MAAA,aAAa,CAAC,YAAY,0CAAE,MAAM,CAAC,IAAI,CAAC,GAAI,CAC7C,CAAA;QACD,IAAI,aAAa,CAAC,WAAW,EAAE;YAC7B,MAAM,IAAA,sCAAuB,EAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE;gBAC7D,eAAe,EAAE,SAAS;gBAC1B,eAAe,EAAE,WAAW;aAC7B,CAAC,CAAA;SACH;aAAM,IAAI,aAAa,CAAC,YAAY,EAAE;YACrC,2BAA2B;SAC5B;QACD,IAAI,oBAAoB,EAAE;YACxB,MAAM,IAAA,8CAAiC,EACrC,WAAW,EACX,UAAU,EACV,MAAM,EACN;gBACE,aAAa;gBACb,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,oBAAoB,CAAC,MAAM,CAAC,SAAS;gBAChD,cAAc,EAAE,oBAAoB,CAAC,MAAM;aAC5C,CACF,CAAA;SACF;QACD,MAAM,IAAA,2CAA8B,EAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE;YACpE,aAAa;YACb,MAAM,EAAE,SAAS;YACjB,SAAS;SACV,CAAC,CAAA;QACF,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAA;QACvC,WAAW,CAAC,eAAe,GAAG,CAC5B,MAAM,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAC3C,CAAC,SAAS,CAAA;QACX,MAAM,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;QACzC,OAAO,IAAA,sCAA4B,EAAC,UAAU,EAAE,WAAW,CAAC,SAAS,EAAE,EAAE;YACvE,aAAa,EAAE,IAAI;SACpB,CAAC,CAAA;IACJ,CAAC,CAAA,CACF,CAAA;AACH,CAAC,CAAA;AAvDY,QAAA,eAAe,mBAuD3B","sourcesContent":["import { withRevokeCertificateV2 } from '@cardinal/certificates'\nimport type { AccountData } from '@cardinal/common'\nimport type { ReverseEntryData } from '@cardinal/namespaces'\nimport {\n  withInvalidateExpiredNameEntry,\n  withInvalidateExpiredReverseEntry,\n} from '@cardinal/namespaces'\nimport * as namespaces from '@cardinal/namespaces'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Connection } from '@solana/web3.js'\nimport {\n  PublicKey,\n  sendAndConfirmRawTransaction,\n  Transaction,\n} from '@solana/web3.js'\nimport { useMutation } from 'react-query'\n\nimport { nameFromMint } from '../components/NameManager'\nimport type { UserTokenData } from '../hooks/useUserNamesForNamespace'\n\nexport const useHandleUnlink = (\n  connection: Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  userTokenData: UserTokenData\n) => {\n  return useMutation(\n    async ({\n      reverseNameEntryData,\n    }: {\n      reverseNameEntryData?: AccountData<ReverseEntryData>\n    }): Promise<string> => {\n      const [namespaceId] = await namespaces.findNamespaceId(namespaceName)\n      const transaction = new Transaction()\n      const entryMint = new PublicKey(userTokenData.metaplexData?.parsed.mint!)\n      const [, entryName] = nameFromMint(\n        userTokenData.metaplexData?.parsed.data.name!,\n        userTokenData.metaplexData?.parsed.data.uri!\n      )\n      if (userTokenData.certificate) {\n        await withRevokeCertificateV2(connection, wallet, transaction, {\n          certificateMint: entryMint,\n          revokeRecipient: namespaceId,\n        })\n      } else if (userTokenData.tokenManager) {\n        // invalidate token manager\n      }\n      if (reverseNameEntryData) {\n        await withInvalidateExpiredReverseEntry(\n          transaction,\n          connection,\n          wallet,\n          {\n            namespaceName,\n            mintId: entryMint,\n            entryName: reverseNameEntryData.parsed.entryName,\n            reverseEntryId: reverseNameEntryData.pubkey,\n          }\n        )\n      }\n      await withInvalidateExpiredNameEntry(transaction, connection, wallet, {\n        namespaceName,\n        mintId: entryMint,\n        entryName,\n      })\n      transaction.feePayer = wallet.publicKey\n      transaction.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash\n      await wallet.signTransaction(transaction)\n      return sendAndConfirmRawTransaction(connection, transaction.serialize(), {\n        skipPreflight: true,\n      })\n    }\n  )\n}\n"]}