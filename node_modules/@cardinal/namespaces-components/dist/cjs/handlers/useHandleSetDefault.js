"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHandleSetDefault = void 0;
const tslib_1 = require("tslib");
const namespaces_1 = require("@cardinal/namespaces");
const web3_js_1 = require("@solana/web3.js");
const react_query_1 = require("react-query");
const NameManager_1 = require("../components/NameManager");
const useHandleSetDefault = (connection, wallet, namespaceName) => {
    return (0, react_query_1.useMutation)(({ tokenData }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        if (!tokenData)
            return '';
        const transaction = new web3_js_1.Transaction();
        const entryMint = new web3_js_1.PublicKey((_a = tokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.mint);
        const [, entryName] = (0, NameManager_1.nameFromMint)(((_b = tokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.name) || '', ((_c = tokenData.metaplexData) === null || _c === void 0 ? void 0 : _c.parsed.data.uri) || '');
        if (tokenData.certificate) {
            yield namespaces_1.deprecated.withSetReverseEntry(connection, wallet, namespaceName, entryName, entryMint, transaction);
        }
        else if (tokenData.tokenManager) {
            yield (0, namespaces_1.withSetNamespaceReverseEntry)(transaction, connection, wallet, namespaceName, entryName, entryMint);
        }
        transaction.feePayer = wallet.publicKey;
        transaction.recentBlockhash = (yield connection.getRecentBlockhash('max')).blockhash;
        yield wallet.signTransaction(transaction);
        const txid = yield (0, web3_js_1.sendAndConfirmRawTransaction)(connection, transaction.serialize(), {
            skipPreflight: true,
        });
        return txid;
    }));
};
exports.useHandleSetDefault = useHandleSetDefault;
//# sourceMappingURL=useHandleSetDefault.js.map