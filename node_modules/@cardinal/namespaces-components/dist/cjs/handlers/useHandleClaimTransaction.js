"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHandleClaimTransaction = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const react_query_1 = require("react-query");
const constants_1 = require("../utils/constants");
const useHandleClaimTransaction = (connection, wallet, cluster, dev) => {
    return (0, react_query_1.useMutation)([wallet.publicKey.toString()], ({ tweetId, handle, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (!handle || !tweetId)
            return '';
        const response = yield fetch(`${(0, constants_1.apiBase)(dev)}/namespaces/twitter/claim?tweetId=${tweetId}&publicKey=${wallet === null || wallet === void 0 ? void 0 : wallet.publicKey.toString()}&handle=${handle}&namespace=twitter${cluster && `&cluster=${cluster}`}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                account: wallet.publicKey.toString(),
            }),
        });
        const json = yield response.json();
        if (response.status !== 200 || json.error)
            throw new Error(json.error);
        const { transaction } = json;
        const buffer = Buffer.from(decodeURIComponent(transaction), 'base64');
        const tx = web3_js_1.Transaction.from(buffer);
        yield wallet.signTransaction(tx);
        return (0, web3_js_1.sendAndConfirmRawTransaction)(connection, tx.serialize(), {
            skipPreflight: true,
        });
    }));
};
exports.useHandleClaimTransaction = useHandleClaimTransaction;
//# sourceMappingURL=useHandleClaimTransaction.js.map