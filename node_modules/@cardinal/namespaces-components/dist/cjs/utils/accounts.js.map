{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../src/utils/accounts.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { CertificateData } from '@cardinal/certificates'\nimport { CERTIFICATE_IDL, CERTIFICATE_PROGRAM_ID } from '@cardinal/certificates'\nimport { getBatchedMultipleAccounts } from '@cardinal/common'\nimport type { AccountData } from '@cardinal/token-manager'\nimport type { PaidClaimApproverData } from '@cardinal/token-manager/dist/cjs/programs/claimApprover'\nimport {\n  CLAIM_APPROVER_ADDRESS,\n  CLAIM_APPROVER_IDL,\n} from '@cardinal/token-manager/dist/cjs/programs/claimApprover'\nimport type { TimeInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/timeInvalidator'\nimport {\n  TIME_INVALIDATOR_ADDRESS,\n  TIME_INVALIDATOR_IDL,\n} from '@cardinal/token-manager/dist/cjs/programs/timeInvalidator'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport {\n  TOKEN_MANAGER_ADDRESS,\n  TOKEN_MANAGER_IDL,\n} from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport type { UseInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/useInvalidator'\nimport {\n  USE_INVALIDATOR_ADDRESS,\n  USE_INVALIDATOR_IDL,\n} from '@cardinal/token-manager/dist/cjs/programs/useInvalidator'\nimport * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport {\n  EditionData,\n  MasterEditionV2Data,\n  MetadataKey,\n} from '@metaplex-foundation/mpl-token-metadata'\nimport { BorshAccountsCoder } from '@project-serum/anchor'\nimport * as spl from '@solana/spl-token'\nimport type {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from '@solana/web3.js'\n\nexport type AccountType =\n  | 'metaplexMetadata'\n  | 'editionData'\n  | 'certificate'\n  | 'tokenManager'\n  | 'mint'\n  | 'tokenAccount'\n  | 'timeInvalidator'\n  | 'paidClaimApprover'\n  | 'useInvalidator'\n  | 'stakePool'\n\nexport type AccountTypeData = {\n  type: AccountType\n  displayName?: string\n}\n\nexport type AccountDataById = {\n  [accountId: string]:\n    | (AccountData<CertificateData> & AccountInfo<Buffer> & AccountTypeData)\n    | (AccountData<TokenManagerData> & AccountInfo<Buffer> & AccountTypeData)\n    | (AccountData<PaidClaimApproverData> &\n        AccountInfo<Buffer> &\n        AccountTypeData)\n    | (AccountData<TimeInvalidatorData> & AccountInfo<Buffer> & AccountTypeData)\n    | (AccountData<UseInvalidatorData> & AccountInfo<Buffer> & AccountTypeData)\n    | (spl.AccountInfo & AccountTypeData)\n    | (spl.MintInfo & AccountInfo<Buffer> & AccountTypeData)\n    | (AccountData<metaplex.MetadataData> &\n        AccountInfo<Buffer> &\n        AccountTypeData)\n    | (AccountData<metaplex.EditionData> &\n        AccountInfo<Buffer> &\n        AccountTypeData)\n    | (AccountData<metaplex.MasterEditionData> &\n        AccountInfo<Buffer> &\n        AccountTypeData)\n    | (AccountData<undefined> & AccountInfo<Buffer> & AccountTypeData)\n}\n\nexport const deserializeAccountInfos = (\n  accountIds: (PublicKey | null)[],\n  accountInfos: (AccountInfo<Buffer | ParsedAccountData> | null)[]\n): AccountDataById => {\n  return accountInfos.reduce((acc, accountInfo, i) => {\n    const ownerString = accountInfo?.owner.toString()\n    switch (ownerString) {\n      case CERTIFICATE_PROGRAM_ID.toString():\n        try {\n          const type = 'certificate'\n          const coder = new BorshAccountsCoder(CERTIFICATE_IDL)\n          const parsed = coder.decode(\n            type,\n            accountInfo?.data as Buffer\n          ) as CertificateData\n          acc[accountIds[i]!.toString()] = {\n            type,\n            pubkey: accountIds[i]!,\n            ...(accountInfo as AccountInfo<Buffer>),\n            parsed,\n          }\n        } catch (e) {}\n        return acc\n      case TOKEN_MANAGER_ADDRESS.toString():\n        try {\n          const type = 'tokenManager'\n          const coder = new BorshAccountsCoder(TOKEN_MANAGER_IDL)\n          const parsed = coder.decode(\n            type,\n            accountInfo?.data as Buffer\n          ) as TokenManagerData\n          acc[accountIds[i]!.toString()] = {\n            type,\n            pubkey: accountIds[i]!,\n            ...(accountInfo as AccountInfo<Buffer>),\n            parsed,\n          }\n        } catch (e) {}\n        return acc\n      case TIME_INVALIDATOR_ADDRESS.toString():\n        try {\n          const type = 'timeInvalidator'\n          const coder = new BorshAccountsCoder(TIME_INVALIDATOR_IDL)\n          const parsed = coder.decode(\n            type,\n            accountInfo?.data as Buffer\n          ) as TimeInvalidatorData\n          acc[accountIds[i]!.toString()] = {\n            type,\n            pubkey: accountIds[i]!,\n            ...(accountInfo as AccountInfo<Buffer>),\n            parsed,\n          }\n        } catch (e) {}\n        return acc\n      case USE_INVALIDATOR_ADDRESS.toString():\n        try {\n          const type = 'useInvalidator'\n          const coder = new BorshAccountsCoder(USE_INVALIDATOR_IDL)\n          const parsed = coder.decode(\n            type,\n            accountInfo?.data as Buffer\n          ) as UseInvalidatorData\n          acc[accountIds[i]!.toString()] = {\n            type,\n            pubkey: accountIds[i]!,\n            ...(accountInfo as AccountInfo<Buffer>),\n            parsed,\n          }\n        } catch (e) {}\n        return acc\n      case CLAIM_APPROVER_ADDRESS.toString():\n        try {\n          const type = 'paidClaimApprover'\n          const coder = new BorshAccountsCoder(CLAIM_APPROVER_IDL)\n          const parsed = coder.decode(\n            type,\n            accountInfo?.data as Buffer\n          ) as PaidClaimApproverData\n          acc[accountIds[i]!.toString()] = {\n            type,\n            pubkey: accountIds[i]!,\n            ...(accountInfo as AccountInfo<Buffer>),\n            parsed,\n          }\n        } catch (e) {}\n        return acc\n      case spl.TOKEN_PROGRAM_ID.toString():\n        const accountData = accountInfo?.data as ParsedAccountData\n        acc[accountIds[i]!.toString()] =\n          accountData.space === spl.MintLayout.span\n            ? {\n                type: 'mint',\n                ...(accountInfo as AccountInfo<Buffer>),\n                ...(accountData.parsed?.info as spl.MintInfo),\n              }\n            : {\n                type: 'tokenAccount',\n                ...(accountInfo as AccountInfo<Buffer>),\n                ...(accountData.parsed?.info as spl.AccountInfo),\n              }\n        return acc\n      case metaplex.MetadataProgram.PUBKEY.toString():\n        try {\n          acc[accountIds[i]!.toString()] = {\n            type: 'metaplexMetadata',\n            pubkey: accountIds[i]!,\n            parsed: metaplex.MetadataData.deserialize(\n              accountInfo?.data as Buffer\n            ) as metaplex.MetadataData,\n            ...(accountInfo as AccountInfo<Buffer>),\n          }\n        } catch (e) {}\n        try {\n          const key =\n            accountInfo === null || accountInfo === void 0\n              ? void 0\n              : (accountInfo.data as Buffer)[0]\n          let parsed\n          if (key === MetadataKey.EditionV1) {\n            parsed = EditionData.deserialize(accountInfo?.data as Buffer)\n          } else if (\n            key === MetadataKey.MasterEditionV1 ||\n            key === MetadataKey.MasterEditionV2\n          ) {\n            parsed = MasterEditionV2Data.deserialize(\n              accountInfo?.data as Buffer\n            )\n          }\n          if (parsed) {\n            acc[accountIds[i]!.toString()] = {\n              type: 'editionData',\n              pubkey: accountIds[i]!,\n              parsed,\n              ...(accountInfo as AccountInfo<Buffer>),\n            }\n          }\n        } catch (e) {}\n        return acc\n      default:\n        return acc\n    }\n  }, {} as AccountDataById)\n}\n\nexport const accountDataById = async (\n  connection: Connection,\n  ids: (PublicKey | null)[]\n): Promise<AccountDataById> => {\n  const filteredIds = ids.filter((id): id is PublicKey => id !== null)\n  const accountInfos = await getBatchedMultipleAccounts(\n    connection,\n    filteredIds,\n    { encoding: 'jsonParsed' }\n  )\n  return deserializeAccountInfos(filteredIds, accountInfos)\n}\n"]}