/// <reference types="react" />
export declare type ButtonProps = {
    variant: 'primary' | 'secondary' | 'tertiary';
    boxShadow?: boolean;
    disabled?: boolean;
    bgColor?: string;
};
export declare const Button: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & ButtonProps, import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
export declare const ButtonLight: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const hexColor: (colorString: string) => string;
export declare const getColorByBgColor: (bgColor: string) => "#fff" | "" | "#000";
export declare const AsyncButton: ({ children, handleClick, className, color, ...buttonProps }: {
    children: JSX.Element | JSX.Element[] | string;
    className?: string | undefined;
    color?: string | undefined;
    handleClick: () => void;
} & ButtonProps) => import("@emotion/react/jsx-runtime").JSX.Element;
export declare const AsyncButtonLight: ({ children, handleClick, className, color, }: {
    children: JSX.Element | JSX.Element[] | string;
    className?: string | undefined;
    color?: string | undefined;
    handleClick: () => void;
}) => import("@emotion/react/jsx-runtime").JSX.Element;
//# sourceMappingURL=Button.d.ts.map