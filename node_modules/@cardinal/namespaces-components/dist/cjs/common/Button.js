"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncButtonLight = exports.AsyncButton = exports.getColorByBgColor = exports.hexColor = exports.ButtonLight = exports.Button = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = tslib_1.__importDefault(require("@emotion/styled"));
const polished_1 = require("polished");
const react_2 = require("react");
const LoadingSpinner_1 = require("./LoadingSpinner");
exports.Button = styled_1.default.button `
  display: flex;
  align-items: center;
  gap: 5px;
  cursor: ${({ disabled }) => !disabled && 'pointer'};
  opacity: ${({ disabled }) => (disabled ? '0.5' : '1')};
  border: none;
  outline: none;
  height: 26px;
  font-size: 12px;
  mix-blend-mode: normal;
  box-shadow: ${({ boxShadow }) => boxShadow ? '0px 4px 4px rgba(0, 0, 0, 0.25)' : ''};
  border-radius: 4px;
  padding: 0 12px;
  transition: 0.2s background;
  ${({ variant = 'primary', disabled, bgColor = undefined }) => {
    return bgColor
        ? (0, react_1.css) `
          background: ${bgColor};
          color: ${(0, exports.getColorByBgColor)(bgColor)};
          &:hover {
            background: ${!disabled && (0, polished_1.lighten)(0.1, bgColor)}};
          }
        `
        : variant === 'primary'
            ? (0, react_1.css) `
          background: rgb(29, 155, 240);
          color: #fff;
          &:hover {
            background: ${!disabled && (0, polished_1.lighten)(0.1, 'rgb(29, 155, 240)')}};
          }
        `
            : variant === 'secondary'
                ? (0, react_1.css) `
          background: #000;
          color: #fff;
          &:hover {
            background: ${!disabled && (0, polished_1.lighten)(0.1, '#000')};
          }
        `
                : (0, react_1.css) `
          background: rgb(255, 255, 255, 0.15);
          color: #fff;
          &:hover {
            background: ${!disabled && (0, polished_1.lighten)(0.05, '#000')};
          }
        `;
}}
  & > span {
    font-size: 14px;
  }
`;
exports.ButtonLight = styled_1.default.div `
  border-radius: 5px;
  padding: 5px 8px;
  border: none;
  background: #eee;
  color: #777;
  cursor: pointer;
  transition: 0.1s all;
  &:hover {
    background: #ddd;
  }
`;
const hexColor = (colorString) => {
    if (colorString.includes('#'))
        return colorString;
    const [r, g, b] = colorString
        .replace('rgb(', '')
        .replace('rgba(', '')
        .replace(')', '')
        .replace(' ', '')
        .split(',');
    return ('#' +
        [r, g, b]
            .map((x) => {
            const hex = parseInt(x || '').toString(16);
            return hex.length === 1 ? '0' + hex : hex;
        })
            .join(''));
};
exports.hexColor = hexColor;
const getColorByBgColor = (bgColor) => {
    if (!bgColor) {
        return '';
    }
    return parseInt((0, exports.hexColor)(bgColor).replace('#', ''), 16) > 0xffffff / 2
        ? '#000'
        : '#fff';
};
exports.getColorByBgColor = getColorByBgColor;
const AsyncButton = (_a) => {
    var { children, handleClick, className, color } = _a, buttonProps = tslib_1.__rest(_a, ["children", "handleClick", "className", "color"]);
    const [loading, setLoading] = (0, react_2.useState)(false);
    return ((0, jsx_runtime_1.jsx)(exports.Button, Object.assign({}, buttonProps, { className: className, onClick: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            try {
                setLoading(true);
                yield handleClick();
            }
            finally {
                setLoading(false);
            }
        }) }, { children: loading ? ((0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { fill: color ? color : '#FFF', height: "15px" })) : (children) })));
};
exports.AsyncButton = AsyncButton;
const AsyncButtonLight = ({ children, handleClick, className, color, }) => {
    const [loading, setLoading] = (0, react_2.useState)(false);
    return ((0, jsx_runtime_1.jsx)(exports.ButtonLight, Object.assign({ className: className, onClick: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            try {
                setLoading(true);
                yield handleClick();
            }
            finally {
                setLoading(false);
            }
        }) }, { children: loading ? ((0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { fill: color ? color : '#FFF', height: "15px" })) : (children) })));
};
exports.AsyncButtonLight = AsyncButtonLight;
//# sourceMappingURL=Button.js.map