{"version":3,"file":"WalletIdentityProvider.js","sourceRoot":"","sources":["../../../src/providers/WalletIdentityProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Wallet } from '@saberhq/solana-contrib'\nimport type { Cluster, Connection } from '@solana/web3.js'\nimport React, { useContext, useState } from 'react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport { ClaimCard } from '..'\nimport { Modal } from '../modal'\nimport { withSleep } from '../utils/transactions'\n\nconst DEBUG = false\n\nexport type ShowParams = {\n  connection: Connection\n  cluster: Cluster\n  wallet: Wallet\n  showManage?: boolean\n  onClose?: () => void\n  secondaryConnection?: Connection\n  dev?: boolean\n}\n\nexport interface WalletIdentity {\n  show: (arg: ShowParams) => void\n  handle?: string\n  wallet?: Wallet\n  connection?: Connection\n  secondaryConnection?: Connection\n  cluster?: Cluster\n  dev?: boolean\n  showIdentityModal: boolean\n}\n\nexport const WalletIdentityContext = React.createContext<WalletIdentity | null>(\n  null\n)\n\ninterface Props {\n  appName?: string\n  appTwitter?: string\n  children: React.ReactNode\n}\n\nexport const WalletIdentityProvider: React.FC<Props> = ({\n  appName,\n  appTwitter,\n  children,\n}: Props) => {\n  const [wallet, setWallet] = useState<Wallet>()\n  const [connection, setConnection] = useState<Connection>()\n  const [secondaryConnection, setSecondaryConnection] = useState<Connection>()\n  const [showManageDefault, setShowManageDefault] = useState<boolean>(false)\n  const [cluster, setCluster] = useState<Cluster | undefined>(undefined)\n  const [dev, setDev] = useState<boolean | undefined>(undefined)\n  const [onClose, setOnClose] = useState<(() => void) | undefined>()\n  const [showIdentityModal, setShowIdentityModal] = useState<boolean>(false)\n  const [handle, setHandle] = useState<string | undefined>(undefined)\n\n  return (\n    <WalletIdentityContext.Provider\n      value={{\n        show: ({\n          wallet,\n          connection,\n          cluster,\n          secondaryConnection,\n          dev,\n          onClose,\n          showManage: showManageDefault,\n        }) => {\n          setWallet(wallet)\n          setConnection(connection)\n          setCluster(cluster)\n          setSecondaryConnection(secondaryConnection)\n          setDev(dev)\n          onClose && setOnClose(() => onClose)\n          setShowIdentityModal(true)\n          setShowManageDefault(showManageDefault || false)\n        },\n        handle,\n        wallet,\n        connection,\n        cluster,\n        dev,\n        showIdentityModal,\n      }}\n    >\n      <QueryClientProvider client={new QueryClient()}>\n        <Modal\n          isOpen={showIdentityModal}\n          onDismiss={() => {\n            setShowIdentityModal(false)\n            onClose && onClose()\n          }}\n          darkenOverlay={true}\n        >\n          <ClaimCard\n            dev={dev}\n            cluster={cluster}\n            wallet={wallet}\n            connection={connection}\n            secondaryConnection={secondaryConnection}\n            appName={appName}\n            appTwitter={appTwitter}\n            showManage={showManageDefault}\n            onComplete={(handle: string) => {\n              setHandle(handle)\n              withSleep(() => {\n                setShowIdentityModal(false)\n                onClose && onClose()\n              }, 1000)\n            }}\n          />\n        </Modal>\n        {children}\n        {DEBUG && <ReactQueryDevtools initialIsOpen={false} />}\n      </QueryClientProvider>\n    </WalletIdentityContext.Provider>\n  )\n}\n\nexport const useWalletIdentity = (): WalletIdentity => {\n  const identity = useContext(WalletIdentityContext)\n  if (!identity) {\n    throw new Error('Not in WalletIdentity context')\n  }\n  return identity\n}\n"]}