"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimCardOuter = exports.ClaimCard = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const styled_1 = tslib_1.__importDefault(require("@emotion/styled"));
const react_1 = require("react");
const Alert_1 = require("../common/Alert");
const Button_1 = require("../common/Button");
const useReverseEntry_1 = require("../hooks/useReverseEntry");
const constants_1 = require("../utils/constants");
const format_1 = require("../utils/format");
const NameEntryClaim_1 = require("./NameEntryClaim");
const NameManager_1 = require("./NameManager");
const PoweredByFooter_1 = require("./PoweredByFooter");
const ClaimCard = ({ appName, appTwitter, dev, cluster, connection, secondaryConnection, wallet, notify, onComplete, showManage: showManageDefault, namespaceName = constants_1.TWITTER_NAMESPACE_NAME, }) => {
    var _a, _b;
    const [showManage, setShowManage] = (0, react_1.useState)(showManageDefault);
    const reverseEntry = (0, useReverseEntry_1.useReverseEntry)(connection, namespaceName, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    return ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(exports.ClaimCardOuter, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "relative px-2 pb-8 md:px-8 md:pt-2" }, { children: [(0, jsx_runtime_1.jsxs)(Instruction, { children: [appName ? `${appName} uses` : 'Use', " Cardinal to link your Twitter identity to your ", (0, jsx_runtime_1.jsx)("strong", { children: "Solana" }), " address."] }), (!(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) || !connection) && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: { marginBottom: '20px' }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { children: "Connect wallet to continue" }) }), type: "warning", showIcon: true })), !reverseEntry.isFetching && ((_a = reverseEntry.data) === null || _a === void 0 ? void 0 : _a.parsed.entryName) && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: { marginBottom: '20px', width: '100%' }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { children: ["Your address is linked to", ' ', (0, format_1.formatTwitterLink)((_b = reverseEntry.data) === null || _b === void 0 ? void 0 : _b.parsed.entryName), ". Link a new Twitter handle below."] }) }), type: "info", showIcon: true })), connection && (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) && ((0, jsx_runtime_1.jsx)(Button_1.ButtonLight, Object.assign({ className: "absolute right-8 z-10", onClick: () => setShowManage((m) => !m) }, { children: showManage ? 'Back to linking' : 'Manage linked accounts' }))), connection &&
                        wallet &&
                        (showManage ? ((0, jsx_runtime_1.jsx)(NameManager_1.NameManager, { cluster: cluster, connection: connection, wallet: wallet, namespaceName: namespaceName })) : ((0, jsx_runtime_1.jsx)(NameEntryClaim_1.NameEntryClaim, { dev: dev, cluster: cluster, wallet: wallet, connection: connection, secondaryConnection: secondaryConnection, appName: appName, appTwitter: appTwitter, setShowManage: setShowManage, notify: notify, onComplete: onComplete }))), (0, jsx_runtime_1.jsx)(PoweredByFooter_1.PoweredByFooter, {})] })) }) }));
};
exports.ClaimCard = ClaimCard;
exports.ClaimCardOuter = styled_1.default.div `
  width 100%;
  height: 100%;
  position: relative;
  margin: 0px auto;
  min-height: 200px;
  padding: 0px 20px;
`;
const Instruction = styled_1.default.h2 `
  margin-top: 0px;
  margin-bottom: 20px;
  font-weight: normal;
  font-size: 24px;
  line-height: 30px;
  text-align: center;
  letter-spacing: -0.02em;
  color: #000000;
`;
//# sourceMappingURL=ClaimCard.js.map