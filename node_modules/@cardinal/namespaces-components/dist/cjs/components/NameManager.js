"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameManager = exports.NameEntryRow = exports.nameFromMint = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const common_1 = require("@cardinal/common");
const namespaces_1 = require("@cardinal/namespaces");
const react_1 = require("react");
const ai_1 = require("react-icons/ai");
const bi_1 = require("react-icons/bi");
const Alert_1 = require("../common/Alert");
const Button_1 = require("../common/Button");
const LoadingSpinner_1 = require("../common/LoadingSpinner");
const useHandleSetDefault_1 = require("../handlers/useHandleSetDefault");
const useHandleUnlink_1 = require("../handlers/useHandleUnlink");
const useReverseEntry_1 = require("../hooks/useReverseEntry");
const useUserNamesForNamespace_1 = require("../hooks/useUserNamesForNamespace");
const format_1 = require("../utils/format");
const icons_1 = require("./icons");
const StepDetail_1 = require("./StepDetail");
const nameFromMint = (name, uri) => {
    if (uri.includes('name')) {
        return [name, (0, common_1.getQueryParam)(uri, 'name') || ''];
    }
    return [(0, namespaces_1.breakName)(name || '')[0], (0, namespaces_1.breakName)(name || '')[1]];
};
exports.nameFromMint = nameFromMint;
const NameEntryRow = ({ cluster, connection, wallet, namespaceName, userTokenData, setError, setSuccess, }) => {
    var _a, _b, _c, _d, _e, _f;
    const userNamesForNamespace = (0, useUserNamesForNamespace_1.useUserNamesForNamespace)(connection, wallet.publicKey, namespaceName);
    const reverseEntry = (0, useReverseEntry_1.useReverseEntry)(connection, namespaceName, wallet.publicKey);
    const handleUnlink = (0, useHandleUnlink_1.useHandleUnlink)(connection, wallet, namespaceName, userTokenData);
    const handleSetDefault = (0, useHandleSetDefault_1.useHandleSetDefault)(connection, wallet, namespaceName);
    (0, react_1.useEffect)(() => {
        if (handleUnlink.isLoading || handleSetDefault.isLoading) {
            setError(undefined);
        }
    }, [handleUnlink.isLoading, handleSetDefault.isLoading]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "flex items-center justify-between gap-5 px-2" }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "cursor-point flex cursor-pointer items-center gap-1", style: { fontSize: '14px' } }, { children: [(0, format_1.formatTwitterLink)((0, exports.nameFromMint)(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || '')[1]), reverseEntry.data &&
                        (0, namespaces_1.formatName)(namespaceName, reverseEntry.data.parsed.entryName) ===
                            (0, namespaces_1.formatName)(...(0, exports.nameFromMint)(((_c = userTokenData.metaplexData) === null || _c === void 0 ? void 0 : _c.parsed.data.name) || '', ((_d = userTokenData.metaplexData) === null || _d === void 0 ? void 0 : _d.parsed.data.uri) || '')) && (0, jsx_runtime_1.jsx)(ai_1.AiFillStar, {})] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "flex items-center gap-2" }, { children: [(!reverseEntry.data ||
                        (reverseEntry.data &&
                            (0, namespaces_1.formatName)(namespaceName, reverseEntry.data.parsed.entryName) !==
                                (0, namespaces_1.formatName)(...(0, exports.nameFromMint)(((_e = userTokenData.metaplexData) === null || _e === void 0 ? void 0 : _e.parsed.data.name) || '', ((_f = userTokenData.metaplexData) === null || _f === void 0 ? void 0 : _f.parsed.data.uri) || '')))) && ((0, jsx_runtime_1.jsx)(Button_1.ButtonLight, Object.assign({ onClick: () => handleSetDefault.mutate({
                            tokenData: userTokenData,
                        }, {
                            onSuccess: (txid) => {
                                userNamesForNamespace.remove();
                                reverseEntry.refetch();
                                setSuccess((0, jsx_runtime_1.jsxs)("div", { children: ["Succesfully set default with", ' ', (0, jsx_runtime_1.jsx)("a", Object.assign({ className: "cursor-pointer text-blue-500", target: `_blank`, href: `https://explorer.solana.com/tx/${txid}?cluster=${cluster}` }, { children: "transaction" })), ". Changes will be reflected shortly."] }));
                            },
                            onError: (e) => setError(e),
                        }) }, { children: handleSetDefault.isLoading ? ((0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { height: "15px", fill: "#000" })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: "Set Default" })) }))), (0, jsx_runtime_1.jsx)(Button_1.ButtonLight, Object.assign({ className: "flex items-center gap-1", onClick: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                            var _g, _h;
                            return handleUnlink.mutate({
                                reverseNameEntryData: reverseEntry.data &&
                                    (0, namespaces_1.formatName)(namespaceName, reverseEntry.data.parsed.entryName) ===
                                        (0, namespaces_1.formatName)(...(0, exports.nameFromMint)(((_g = userTokenData.metaplexData) === null || _g === void 0 ? void 0 : _g.parsed.data.name) || '', ((_h = userTokenData.metaplexData) === null || _h === void 0 ? void 0 : _h.parsed.data.uri) || ''))
                                    ? reverseEntry.data
                                    : undefined,
                            }, {
                                onSuccess: (txid) => {
                                    var _a, _b;
                                    userNamesForNamespace.remove();
                                    reverseEntry.refetch();
                                    setSuccess((0, jsx_runtime_1.jsxs)("div", { children: ["Succesfully unlinked", ' ', (0, format_1.formatTwitterLink)((0, exports.nameFromMint)(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || '')[1]), ". Changes will be reflected shortly.", ' ', (0, jsx_runtime_1.jsx)("a", Object.assign({ className: "cursor-pointer text-blue-500", target: `_blank`, href: `https://explorer.solana.com/tx/${txid}?cluster=${cluster}` }, { children: "transaction" }))] }));
                                },
                                onError: (e) => setError(e),
                            });
                        }) }, { children: handleUnlink.isLoading ? ((0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { height: "15px", fill: "#000" })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(bi_1.BiUnlink, {}), "Unlink"] })) }))] }))] })));
};
exports.NameEntryRow = NameEntryRow;
const NameManager = ({ connection, wallet, namespaceName, }) => {
    var _a, _b;
    const [error, setError] = (0, react_1.useState)();
    const [success, setSuccess] = (0, react_1.useState)();
    const handleSetDefault = (0, useHandleSetDefault_1.useHandleSetDefault)(connection, wallet, namespaceName);
    const userNamesForNamespace = (0, useUserNamesForNamespace_1.useUserNamesForNamespace)(connection, wallet.publicKey, namespaceName);
    const reverseEntry = (0, useReverseEntry_1.useReverseEntry)(connection, namespaceName, wallet.publicKey);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "mb-10 flex flex-col gap-2" }, { children: [(0, jsx_runtime_1.jsx)(StepDetail_1.StepDetail, { icon: (0, jsx_runtime_1.jsx)(icons_1.BoltIcon, {}), title: "Manage existing handles", description: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {}) }), (0, jsx_runtime_1.jsx)("div", { className: "my-1 h-[1px] bg-gray-200" }), !userNamesForNamespace.isFetched || !reverseEntry.isFetched ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: "h-8 w-full animate-pulse rounded-lg bg-gray-200" }), (0, jsx_runtime_1.jsx)("div", { className: "h-8 w-full animate-pulse rounded-lg bg-gray-200" })] })) : ((_a = userNamesForNamespace.data) === null || _a === void 0 ? void 0 : _a.length) === 0 ? ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "px-2 text-gray-400" }, { children: "No names found" }))) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(_b = userNamesForNamespace.data) === null || _b === void 0 ? void 0 : _b.sort((userTokenData) => {
                        var _a, _b;
                        return reverseEntry.data &&
                            (0, namespaces_1.formatName)(namespaceName, reverseEntry.data.parsed.entryName) ===
                                (0, namespaces_1.formatName)(...(0, exports.nameFromMint)(((_a = userTokenData.metaplexData) === null || _a === void 0 ? void 0 : _a.parsed.data.name) || '', ((_b = userTokenData.metaplexData) === null || _b === void 0 ? void 0 : _b.parsed.data.uri) || ''))
                            ? -1
                            : 1;
                    }).map((userTokenData) => {
                        var _a;
                        return ((0, jsx_runtime_1.jsx)(exports.NameEntryRow, { connection: connection, wallet: wallet, namespaceName: namespaceName, userTokenData: userTokenData, setError: setError, setSuccess: setSuccess }, (_a = userTokenData.tokenAccount) === null || _a === void 0 ? void 0 : _a.pubkey.toString()));
                    }), handleSetDefault.error && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { children: `${handleSetDefault.error}` }) }), type: "error", showIcon: true })), error && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { children: `${error}` }) }), type: "error", showIcon: true })), success && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                            marginTop: '10px',
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: success, type: "success", showIcon: true }))] }))] })));
};
exports.NameManager = NameManager;
//# sourceMappingURL=NameManager.js.map