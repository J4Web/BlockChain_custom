"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameEntryClaim = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const styled_1 = tslib_1.__importDefault(require("@emotion/styled"));
const react_1 = require("react");
const Alert_1 = require("../common/Alert");
const Button_1 = require("../common/Button");
const LoadingSpinner_1 = require("../common/LoadingSpinner");
const useHandleClaimTransaction_1 = require("../handlers/useHandleClaimTransaction");
const useHandleRevoke_1 = require("../handlers/useHandleRevoke");
const useHandleVerify_1 = require("../handlers/useHandleVerify");
const useClaimRequest_1 = require("../hooks/useClaimRequest");
const useNameEntryData_1 = require("../hooks/useNameEntryData");
const useReverseEntry_1 = require("../hooks/useReverseEntry");
const constants_1 = require("../utils/constants");
const format_1 = require("../utils/format");
const ButtonWithFooter_1 = require("./ButtonWithFooter");
const icons_1 = require("./icons");
const LabeledInput_1 = require("./LabeledInput");
const PostTweet_1 = require("./PostTweet");
const StepDetail_1 = require("./StepDetail");
const TwitterHandleNFT_1 = require("./TwitterHandleNFT");
const handleFromTweetUrl = (raw) => {
    if (!raw)
        return undefined;
    return raw.split('/')[3];
};
const tweetIdFromTweetUrl = (raw) => {
    var _a;
    if (!raw)
        return undefined;
    return (_a = raw.split('/')[5]) === null || _a === void 0 ? void 0 : _a.split('?')[0];
};
const NameEntryClaim = ({ dev = false, cluster = 'mainnet-beta', wallet, connection, secondaryConnection, namespaceName = constants_1.TWITTER_NAMESPACE_NAME, appName, appTwitter, setShowManage, notify, onComplete, }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const [tweetSent, setTweetSent] = (0, react_1.useState)(false);
    const [tweetUrl, setTweetUrl] = (0, react_1.useState)(undefined);
    const handle = handleFromTweetUrl(tweetUrl);
    const tweetId = tweetIdFromTweetUrl(tweetUrl);
    const [claimed, setClaimed] = (0, react_1.useState)(false);
    const reverseEntry = (0, useReverseEntry_1.useReverseEntry)(connection, namespaceName, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    const nameEntryData = (0, useNameEntryData_1.useNameEntryData)(secondaryConnection || connection, namespaceName, handle);
    const claimRequest = (0, useClaimRequest_1.useClaimRequest)(connection, namespaceName, handle, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey);
    const handleVerify = (0, useHandleVerify_1.useHandleVerify)(wallet, cluster, dev);
    const handleRevoke = (0, useHandleRevoke_1.useHandleRevoke)(wallet, cluster, dev);
    const handleClaimTransaction = (0, useHandleClaimTransaction_1.useHandleClaimTransaction)(connection, wallet, cluster, dev);
    (0, react_1.useMemo)(() => {
        var _a, _b;
        if (tweetUrl && tweetSent && !((_b = (_a = claimRequest === null || claimRequest === void 0 ? void 0 : claimRequest.data) === null || _a === void 0 ? void 0 : _a.parsed) === null || _b === void 0 ? void 0 : _b.isApproved)) {
            handleVerify.mutate({ tweetId, handle }, {
                onSuccess: () => claimRequest === null || claimRequest === void 0 ? void 0 : claimRequest.refetch(),
            });
        }
    }, [
        wallet.publicKey.toString(),
        tweetUrl,
        handle,
        tweetSent,
        tweetId,
        (_a = claimRequest.data) === null || _a === void 0 ? void 0 : _a.pubkey.toString(),
    ]);
    const alreadyOwned = ((_c = (_b = nameEntryData.data) === null || _b === void 0 ? void 0 : _b.owner) === null || _c === void 0 ? void 0 : _c.toString()) && !((_d = nameEntryData.data) === null || _d === void 0 ? void 0 : _d.isOwnerPDA)
        ? true
        : false;
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(DetailsWrapper, { children: [(0, jsx_runtime_1.jsx)(StepDetail_1.StepDetail, { disabled: !(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) || !connection, icon: (0, jsx_runtime_1.jsx)(icons_1.Megaphone, {}), title: "Tweet!", description: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { children: "Tweet your public key" }), (0, jsx_runtime_1.jsx)(PostTweet_1.PostTweet, { wallet: wallet, appName: appName, appTwitter: appTwitter, disabled: false, callback: () => setTweetSent(true), cluster: cluster })] }) }), (0, jsx_runtime_1.jsx)(StepDetail_1.StepDetail, { disabled: !tweetSent, icon: (0, jsx_runtime_1.jsx)(icons_1.Link, {}), title: "Paste the URL of the tweet", description: (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(LabeledInput_1.LabeledInput, { disabled: !tweetSent, label: "Tweet", name: "tweet", onChange: (e) => setTweetUrl(e.target.value) }) }) }), (0, jsx_runtime_1.jsx)(StepDetail_1.StepDetail, { disabled: !handle, icon: (0, jsx_runtime_1.jsx)(icons_1.Verified, {}), title: "Claim your handle", description: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { children: "You will receive a non-tradeable NFT to prove you own your Twitter handle." }), handle && ((0, jsx_runtime_1.jsxs)("div", Object.assign({ style: {
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '20px',
                                        paddingTop: '20px',
                                    } }, { children: [(0, jsx_runtime_1.jsx)(TwitterHandleNFT_1.TwitterHandleNFT, { handle: handle, cluster: cluster, dev: dev }), (0, jsx_runtime_1.jsxs)("div", Object.assign({ style: {
                                                padding: '10px',
                                                width: 'calc(100% - 120px - 20px)',
                                            } }, { children: [handleVerify.isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: "mb-2 h-8 w-full animate-pulse rounded-lg bg-gray-200" })) : handleVerify.error ? ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                                                        margin: '10px 0px',
                                                        height: 'auto',
                                                        wordBreak: 'break-word',
                                                    }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: `${handleVerify.error}` }), type: "error", showIcon: true })) : ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                                                        margin: '10px 0px',
                                                        height: 'auto',
                                                        wordBreak: 'break-word',
                                                    }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { children: ["Verified ownership of ", (0, format_1.formatTwitterLink)(handle)] }) }), type: "success", showIcon: true })), nameEntryData.isFetching || claimRequest.isFetching ? ((0, jsx_runtime_1.jsx)("div", { className: "mb-2 h-8 min-w-full animate-pulse rounded-lg bg-gray-200" })) : (alreadyOwned &&
                                                    !((_e = claimRequest.data) === null || _e === void 0 ? void 0 : _e.parsed.isApproved) && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                                                                marginBottom: '10px',
                                                                height: 'auto',
                                                                wordBreak: 'break-word',
                                                            }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { children: ["Owned by", ' ', (0, format_1.formatShortAddress)((_f = nameEntryData === null || nameEntryData === void 0 ? void 0 : nameEntryData.data) === null || _f === void 0 ? void 0 : _f.owner)] }) }), type: "warning", showIcon: true }), ((_h = (_g = nameEntryData === null || nameEntryData === void 0 ? void 0 : nameEntryData.data) === null || _g === void 0 ? void 0 : _g.owner) === null || _h === void 0 ? void 0 : _h.toString()) ===
                                                            ((_j = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) === null || _j === void 0 ? void 0 : _j.toString()) ? ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { children: ["You already own this handle! If you want to set it as your default, visit the", ' ', (0, jsx_runtime_1.jsx)("span", Object.assign({ className: "cursor-pointer text-blue-500", onClick: () => setShowManage(true) }, { children: "manage" })), ' ', "tab."] }) })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { children: "If you wish to continue, you will revoke this handle from them." }), (0, jsx_runtime_1.jsx)(ButtonWrapper, { children: (0, jsx_runtime_1.jsx)(Button_1.ButtonLight, Object.assign({ onClick: () => handleRevoke.mutate({ tweetId, handle }, {
                                                                            onSuccess: () => {
                                                                                notify &&
                                                                                    notify({
                                                                                        message: 'Revoke successful',
                                                                                    });
                                                                                nameEntryData.refetch();
                                                                                claimRequest.refetch();
                                                                            },
                                                                        }) }, { children: handleRevoke.isLoading ? ((0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { height: "15px", fill: "#000" })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: "Revoke" })) })) })] })), handleRevoke.error && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                                                                marginTop: '10px',
                                                                height: 'auto',
                                                                wordBreak: 'break-word',
                                                            }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { children: `${handleRevoke.error}` }) }), type: "error", showIcon: true }))] })))] }))] })))] }) }), handleClaimTransaction.error && ((0, jsx_runtime_1.jsx)(Alert_1.Alert, { style: {
                            height: 'auto',
                            wordBreak: 'break-word',
                        }, message: (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { children: `${handleClaimTransaction.error}` }) }), type: "error", showIcon: true }))] }), (0, jsx_runtime_1.jsxs)(ButtonWithFooter_1.ButtonWithFooter, Object.assign({ loading: handleClaimTransaction.isLoading, complete: claimed, disabled: !handleVerify.isSuccess ||
                    (tweetUrl === null || tweetUrl === void 0 ? void 0 : tweetUrl.length) === 0 ||
                    !nameEntryData.isFetched ||
                    (alreadyOwned && !((_k = claimRequest.data) === null || _k === void 0 ? void 0 : _k.parsed.isApproved)), onClick: () => handleClaimTransaction.mutate({
                    tweetId,
                    handle,
                }, {
                    onSuccess: () => {
                        nameEntryData.remove();
                        reverseEntry.remove();
                        onComplete && onComplete(handle || '');
                    },
                }) }, { children: ["Claim ", handle && `@${handle}`] }))] }));
};
exports.NameEntryClaim = NameEntryClaim;
const ButtonWrapper = styled_1.default.div `
  display: flex;
  margin-top: 5px;
  justify-content: center;
`;
const DetailsWrapper = styled_1.default.div `
  display: grid;
  grid-row-gap: 28px;
`;
//# sourceMappingURL=NameEntryClaim.js.map