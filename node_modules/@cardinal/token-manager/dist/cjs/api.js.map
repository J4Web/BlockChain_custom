{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api.ts"],"names":[],"mappings":";;;;AAEA,6CAA8C;AAG9C,wBAQW;AAEJ,MAAM,cAAc,GAAG,CAC5B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,MAAc,EACd,SAAqB,EACC,EAAE,+DACxB,OAAA,IAAA,UAAO,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAA,GAAA,CAAC;AAP/D,QAAA,cAAc,kBAOiD;AAErE,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE,+DACxB,OAAA,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA,GAAA,CAAC;AALnD,QAAA,UAAU,cAKyC;AAEzD,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,MAAc,EACd,gBAAiC,EACuB,EAAE,+DAC1D,OAAA,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAA,GAAA,CAAC;AAL7D,QAAA,UAAU,cAKmD;AAEnE,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE,+DACxB,OAAA,IAAA,mBAAgB,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA,GAAA,CAAC;AALrD,QAAA,YAAY,gBAKyC;AAE3D,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,iBAGC,EACqB,EAAE;IACxB,OAAA,IAAA,iBAAc,EACZ,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,iBAAiB,CAClB,CAAA;EAAA,CAAC;AAfS,QAAA,UAAU,cAenB;AAEG,MAAM,gBAAgB,GAAG,CAC9B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,aAAqB,EACC,EAAE;IACxB,OAAA,IAAA,uBAAoB,EAClB,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,aAAa,CACd,CAAA;EAAA,CAAC;AAZS,QAAA,gBAAgB,oBAYzB;AAEG,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,aAAqB,EACC,EAAE;IACxB,OAAA,IAAA,mBAAgB,EACd,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,aAAa,CACd,CAAA;EAAA,CAAC;AAZS,QAAA,YAAY,gBAYrB","sourcesContent":["import type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\n\nimport type { IssueParameters } from \".\";\nimport {\n  withClaimToken,\n  withExtendExpiration,\n  withExtendUsages,\n  withInvalidate,\n  withIssueToken,\n  withUnissueToken,\n  withUse,\n} from \".\";\n\nexport const useTransaction = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  usages: number,\n  collector?: PublicKey\n): Promise<Transaction> =>\n  withUse(new Transaction(), connection, wallet, mintId, usages, collector);\n\nexport const invalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> =>\n  withInvalidate(new Transaction(), connection, wallet, mintId);\n\nexport const issueToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  rentalParameters: IssueParameters\n): Promise<[Transaction, PublicKey, Keypair | undefined]> =>\n  withIssueToken(new Transaction(), connection, wallet, rentalParameters);\n\nexport const unissueToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> =>\n  withUnissueToken(new Transaction(), connection, wallet, mintId);\n\nexport const claimToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  additionalOptions?: {\n    otpKeypair?: Keypair | null;\n    timeInvalidatorId?: PublicKey;\n  }\n): Promise<Transaction> =>\n  withClaimToken(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    additionalOptions\n  );\n\nexport const extendExpiration = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  paymentAmount: number\n): Promise<Transaction> =>\n  withExtendExpiration(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    paymentAmount\n  );\n\nexport const extendUsages = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  paymentAmount: number\n): Promise<Transaction> =>\n  withExtendUsages(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    paymentAmount\n  );\n"]}