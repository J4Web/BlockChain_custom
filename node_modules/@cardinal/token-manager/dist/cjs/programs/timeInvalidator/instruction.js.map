{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/timeInvalidator/instruction.ts"],"names":[],"mappings":";;;;AAAA,kDAAoE;AAEpE,iDAAqD;AAOrD,6CAAoE;AAGpE,kDAKyB;AACzB,iDAAoE;AAEpE,2CAA6E;AAC7E,+BAAmD;AAgB5C,MAAM,IAAI,GAAG,CAClB,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,gBAAwC,EACM,EAAE;;IAChD,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAC7C,MAAM,IAAA,gCAA0B,EAAC,cAAc,CAAC,CAAC;IAEnD,OAAO;QACL,sBAAsB,CAAC,WAAW,CAAC,IAAI,CACrC;YACE,SAAS,EAAE,gBAAgB,CAAC,SAAS,IAAI,wBAAS;YAClD,cAAc,EAAE,gBAAgB,CAAC,cAAc,IAAI,kCAAmB;YACtE,UAAU,EAAE,gBAAgB,CAAC,UAAU;gBACrC,CAAC,CAAC,IAAI,WAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC;gBACrC,CAAC,CAAC,IAAI;YACR,eAAe,EAAE,gBAAgB,CAAC,eAAe;gBAC/C,CAAC,CAAC,IAAI,WAAE,CAAC,gBAAgB,CAAC,eAAe,CAAC;gBAC1C,CAAC,CAAC,IAAI;YACR,sBAAsB,EAAE,CAAA,MAAA,gBAAgB,CAAC,SAAS,0CAC9C,sBAAsB;gBACxB,CAAC,CAAC,IAAI,WAAE,CAAC,MAAA,gBAAgB,CAAC,SAAS,0CAAE,sBAAsB,CAAC;gBAC5D,CAAC,CAAC,IAAI;YACR,wBAAwB,EAAE,CAAA,MAAA,gBAAgB,CAAC,SAAS,0CAChD,wBAAwB;gBAC1B,CAAC,CAAC,IAAI,WAAE,CAAC,MAAA,gBAAgB,CAAC,SAAS,0CAAE,wBAAwB,CAAC;gBAC9D,CAAC,CAAC,IAAI;YACR,oBAAoB,EAAE,CAAA,MAAA,gBAAgB,CAAC,SAAS,0CAAE,oBAAoB;gBACpE,CAAC,CAAC,MAAA,gBAAgB,CAAC,SAAS,0CAAE,oBAAoB;gBAClD,CAAC,CAAC,IAAI;YACR,aAAa,EAAE,gBAAgB,CAAC,aAAa;gBAC3C,CAAC,CAAC,IAAI,WAAE,CAAC,gBAAgB,CAAC,aAAa,CAAC;gBACxC,CAAC,CAAC,IAAI;YACR,uBAAuB,EAAE,CAAA,MAAA,gBAAgB,CAAC,SAAS,0CAC/C,uBAAuB;gBACzB,CAAC,CAAC,MAAA,gBAAgB,CAAC,SAAS,0CAAE,uBAAuB;gBACrD,CAAC,CAAC,IAAI;SACT,EACD;YACE,QAAQ,EAAE;gBACR,YAAY,EAAE,cAAc;gBAC5B,eAAe,EAAE,iBAAiB;gBAClC,MAAM,EAAE,MAAM,CAAC,SAAS;gBACxB,KAAK,EAAE,MAAM,CAAC,SAAS;gBACvB,aAAa,EAAE,uBAAa,CAAC,SAAS;aACvC;SACF,CACF;QACD,iBAAiB;KAClB,CAAC;AACJ,CAAC,CAAA,CAAC;AA3DW,QAAA,IAAI,QA2Df;AAEK,MAAM,gBAAgB,GAAG,CAC9B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,mBAA8B,EAC9B,iBAA4B,EAC5B,sBAA8B,EAC9B,eAAsD,EAC9B,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,MAAM,CACJ,qBAAqB,EACrB,4BAA4B,EAC5B,iBAAiB,EAClB,GAAG,eAAe,CAAC;IACpB,OAAO,sBAAsB,CAAC,WAAW,CAAC,gBAAgB,CACxD,IAAI,WAAE,CAAC,sBAAsB,CAAC,EAC9B;QACE,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,iBAAiB;YAClC,mBAAmB,EAAE,qBAAqB;YAC1C,0BAA0B,EAAE,4BAA4B;YACxD,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,iBAAiB,EAAE,mBAAmB;YACtC,YAAY,EAAE,4BAAgB;SAC/B;QACD,iBAAiB;KAClB,CACF,CAAC;AACJ,CAAC,CAAC;AArCW,QAAA,gBAAgB,oBAqC3B;AAEK,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,cAAyB,EACzB,gBAAkC,EAClC,iBAAoC,EACpC,0BAAqC,EACrC,uBAAkC,EAClC,cAA6B,EACI,EAAE;IACnC,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,MAAM,CAAC,CAAC,iBAAiB,CAAC,EAAE,gBAAgB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAChE,IAAA,gCAA0B,EAAC,cAAc,CAAC;QAC1C,IAAA,mCAA2B,EAAC,MAAM,EAAE,gBAAgB,CAAC;KACtD,CAAC,CAAC;IAEH,OAAO,sBAAsB,CAAC,WAAW,CAAC,UAAU,CAAC;QACnD,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,iBAAiB;YAClC,WAAW,EAAE,MAAM,CAAC,SAAS;YAC7B,wBAAwB,EAAE,0BAA0B;YACpD,IAAI,EAAE,MAAM;YACZ,qBAAqB,EAAE,uBAAuB;YAC9C,oBAAoB,EAAE,oCAAqB;YAC3C,YAAY,EAAE,4BAAgB;YAC9B,IAAI,EAAE,4BAAkB;SACzB;QACD,iBAAiB,EAAE;YACjB,GAAG,CAAC,iBAAiB,KAAK,gCAAiB,CAAC,OAAO;gBACjD,CAAC,CAAC,gBAAgB;gBAClB,CAAC,CAAC,EAAE,CAAC;YACP,GAAG,cAAc;SAClB;KACF,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AA3CW,QAAA,UAAU,cA2CrB;AAEK,MAAM,KAAK,GAAG,CACnB,UAAsB,EACtB,MAAc,EACd,iBAA4B,EAC5B,cAAyB,EACzB,SAAqB,EACG,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,sBAAsB,GAAG,IAAI,gBAAO,CACxC,gCAAoB,EACpB,oCAAwB,EACxB,QAAQ,CACT,CAAC;IAEF,OAAO,sBAAsB,CAAC,WAAW,CAAC,KAAK,CAAC;QAC9C,QAAQ,EAAE;YACR,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,iBAAiB;YAClC,SAAS,EAAE,SAAS,IAAI,wBAAS;YACjC,MAAM,EAAE,MAAM,CAAC,SAAS;SACzB;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAvBW,QAAA,KAAK,SAuBhB","sourcesContent":["import { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport type { TokenManagerKind } from \"../tokenManager\";\nimport {\n  CRANK_KEY,\n  PAYMENT_MANAGER_KEY,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerState,\n} from \"../tokenManager\";\nimport { getRemainingAccountsForKind } from \"../tokenManager/utils\";\nimport type { TIME_INVALIDATOR_PROGRAM } from \"./constants\";\nimport { TIME_INVALIDATOR_ADDRESS, TIME_INVALIDATOR_IDL } from \"./constants\";\nimport { findTimeInvalidatorAddress } from \"./pda\";\n\nexport type TimeInvalidationParams = {\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n  expiration?: number;\n  durationSeconds?: number;\n  maxExpiration?: number;\n  extension?: {\n    extensionPaymentAmount: number;\n    extensionDurationSeconds: number;\n    extensionPaymentMint: PublicKey;\n    disablePartialExtension?: boolean;\n  };\n};\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  timeInvalidation: TimeInvalidationParams\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [timeInvalidatorId, _timeInvalidatorBump] =\n    await findTimeInvalidatorAddress(tokenManagerId);\n\n  return [\n    timeInvalidatorProgram.instruction.init(\n      {\n        collector: timeInvalidation.collector || CRANK_KEY,\n        paymentManager: timeInvalidation.paymentManager || PAYMENT_MANAGER_KEY,\n        expiration: timeInvalidation.expiration\n          ? new BN(timeInvalidation.expiration)\n          : null,\n        durationSeconds: timeInvalidation.durationSeconds\n          ? new BN(timeInvalidation.durationSeconds)\n          : null,\n        extensionPaymentAmount: timeInvalidation.extension\n          ?.extensionPaymentAmount\n          ? new BN(timeInvalidation.extension?.extensionPaymentAmount)\n          : null,\n        extensionDurationSeconds: timeInvalidation.extension\n          ?.extensionDurationSeconds\n          ? new BN(timeInvalidation.extension?.extensionDurationSeconds)\n          : null,\n        extensionPaymentMint: timeInvalidation.extension?.extensionPaymentMint\n          ? timeInvalidation.extension?.extensionPaymentMint\n          : null,\n        maxExpiration: timeInvalidation.maxExpiration\n          ? new BN(timeInvalidation.maxExpiration)\n          : null,\n        disablePartialExtension: timeInvalidation.extension\n          ?.disablePartialExtension\n          ? timeInvalidation.extension?.disablePartialExtension\n          : null,\n      },\n      {\n        accounts: {\n          tokenManager: tokenManagerId,\n          timeInvalidator: timeInvalidatorId,\n          issuer: wallet.publicKey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    timeInvalidatorId,\n  ];\n};\n\nexport const extendExpiration = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  payerTokenAccountId: PublicKey,\n  timeInvalidatorId: PublicKey,\n  extensionPaymentAmount: number,\n  paymentAccounts: [PublicKey, PublicKey, AccountMeta[]]\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [\n    paymentTokenAccountId,\n    paymentManagerTokenAccountId,\n    remainingAccounts,\n  ] = paymentAccounts;\n  return timeInvalidatorProgram.instruction.extendExpiration(\n    new BN(extensionPaymentAmount),\n    {\n      accounts: {\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        paymentTokenAccount: paymentTokenAccountId,\n        paymentManagerTokenAccount: paymentManagerTokenAccountId,\n        payer: wallet.publicKey,\n        payerTokenAccount: payerTokenAccountId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    }\n  );\n};\n\nexport const invalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  tokenManagerId: PublicKey,\n  tokenManagerKind: TokenManagerKind,\n  tokenManagerState: TokenManagerState,\n  tokenManagerTokenAccountId: PublicKey,\n  recipientTokenAccountId: PublicKey,\n  returnAccounts: AccountMeta[]\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const [[timeInvalidatorId], transferAccounts] = await Promise.all([\n    findTimeInvalidatorAddress(tokenManagerId),\n    getRemainingAccountsForKind(mintId, tokenManagerKind),\n  ]);\n\n  return timeInvalidatorProgram.instruction.invalidate({\n    accounts: {\n      tokenManager: tokenManagerId,\n      timeInvalidator: timeInvalidatorId,\n      invalidator: wallet.publicKey,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: mintId,\n      recipientTokenAccount: recipientTokenAccountId,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: [\n      ...(tokenManagerState === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...returnAccounts,\n    ],\n  });\n};\n\nexport const close = (\n  connection: Connection,\n  wallet: Wallet,\n  timeInvalidatorId: PublicKey,\n  tokenManagerId: PublicKey,\n  collector?: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const timeInvalidatorProgram = new Program<TIME_INVALIDATOR_PROGRAM>(\n    TIME_INVALIDATOR_IDL,\n    TIME_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  return timeInvalidatorProgram.instruction.close({\n    accounts: {\n      tokenManager: tokenManagerId,\n      timeInvalidator: timeInvalidatorId,\n      collector: collector || CRANK_KEY,\n      closer: wallet.publicKey,\n    },\n  });\n};\n"]}