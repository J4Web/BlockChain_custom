{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/tokenManager/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Metadata,\n  MetadataProgram,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport type { BN } from \"@project-serum/anchor\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport { findAta } from \"../..\";\nimport { CRANK_KEY, TokenManagerState } from \".\";\nimport type {\n  InvalidationType,\n  TOKEN_MANAGER_PROGRAM,\n  TokenManagerKind,\n} from \"./constants\";\nimport { TOKEN_MANAGER_ADDRESS, TOKEN_MANAGER_IDL } from \"./constants\";\nimport {\n  findClaimReceiptId,\n  findMintCounterId,\n  findMintManagerId,\n  findReceiptMintManagerId,\n  findTokenManagerAddress,\n} from \"./pda\";\nimport { getRemainingAccountsForKind } from \"./utils\";\n\nexport const initMintCounter = async (\n  connection: Connection,\n  wallet: Wallet,\n  mint: PublicKey\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n  const [mintCounterId, _mintCounterBump] = await findMintCounterId(mint);\n  return tokenManagerProgram.instruction.initMintCounter(mint, {\n    accounts: {\n      mintCounter: mintCounterId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n};\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  mint: PublicKey,\n  issuerTokenAccountId: PublicKey,\n  amount: BN,\n  kind: TokenManagerKind,\n  invalidationType: InvalidationType,\n  numInvalidators = 1\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [[tokenManagerId], [mintCounterId]] = await Promise.all([\n    findTokenManagerAddress(mint),\n    findMintCounterId(mint),\n  ]);\n\n  return [\n    tokenManagerProgram.instruction.init(\n      {\n        numInvalidators,\n        amount,\n        kind,\n        invalidationType,\n      },\n      {\n        accounts: {\n          tokenManager: tokenManagerId,\n          mintCounter: mintCounterId,\n          mint: mint,\n          issuer: wallet.publicKey,\n          payer: wallet.publicKey,\n          issuerTokenAccount: issuerTokenAccountId,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    tokenManagerId,\n  ];\n};\n\nexport const setClaimApprover = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  claimApproverId: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  return tokenManagerProgram.instruction.setClaimApprover(claimApproverId, {\n    accounts: {\n      tokenManager: tokenManagerId,\n      issuer: wallet.publicKey,\n    },\n  });\n};\n\nexport const setTransferAuthority = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  transferAuthorityId: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  return tokenManagerProgram.instruction.setTransferAuthority(\n    transferAuthorityId,\n    {\n      accounts: {\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      },\n    }\n  );\n};\n\nexport const addInvalidator = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  invalidatorId: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  return tokenManagerProgram.instruction.addInvalidator(invalidatorId, {\n    accounts: {\n      tokenManager: tokenManagerId,\n      issuer: wallet.publicKey,\n    },\n  });\n};\n\nexport const issue = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  tokenManagerTokenAccountId: PublicKey,\n  issuerTokenAccountId: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  return tokenManagerProgram.instruction.issue({\n    accounts: {\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      issuer: wallet.publicKey,\n      issuerTokenAccount: issuerTokenAccountId,\n      payer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n};\n\nexport const unissue = (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  tokenManagerTokenAccountId: PublicKey,\n  issuerTokenAccountId: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  return tokenManagerProgram.instruction.unissue({\n    accounts: {\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      issuer: wallet.publicKey,\n      issuerTokenAccount: issuerTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n  });\n};\n\nexport const claim = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  tokenManagerKind: TokenManagerKind,\n  mintId: PublicKey,\n  tokenManagerTokenAccountId: PublicKey,\n  recipientTokenAccountId: PublicKey,\n  claimReceipt: PublicKey | undefined\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const remainingAccounts = await getRemainingAccountsForKind(\n    mintId,\n    tokenManagerKind\n  );\n\n  return tokenManagerProgram.instruction.claim({\n    accounts: {\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: mintId,\n      recipient: wallet.publicKey,\n      recipientTokenAccount: recipientTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    },\n    remainingAccounts: claimReceipt\n      ? [\n          ...remainingAccounts,\n          { pubkey: claimReceipt, isSigner: false, isWritable: true },\n        ]\n      : remainingAccounts,\n  });\n};\n\nexport const createClaimReceipt = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  claimApproverId: PublicKey\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [claimReceiptId, _claimReceiptBump] = await findClaimReceiptId(\n    tokenManagerId,\n    wallet.publicKey\n  );\n\n  return [\n    tokenManagerProgram.instruction.createClaimReceipt(wallet.publicKey, {\n      accounts: {\n        tokenManager: tokenManagerId,\n        claimApprover: claimApproverId,\n        claimReceipt: claimReceiptId,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    }),\n    claimReceiptId,\n  ];\n};\n\nexport const creatMintManager = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [mintManagerId, _mintManagerBump] = await findMintManagerId(mintId);\n\n  return [\n    tokenManagerProgram.instruction.createMintManager({\n      accounts: {\n        mintManager: mintManagerId,\n        mint: mintId,\n        freezeAuthority: wallet.publicKey,\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n      },\n    }),\n    mintManagerId,\n  ];\n};\n\nexport const closeMintManager = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [mintManagerId] = await findMintManagerId(mintId);\n\n  return [\n    tokenManagerProgram.instruction.closeMintManager({\n      accounts: {\n        mintManager: mintManagerId,\n        mint: mintId,\n        freezeAuthority: wallet.publicKey,\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n    }),\n    mintManagerId,\n  ];\n};\n\nexport const claimReceiptMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  tokenManagerId: PublicKey,\n  receiptMintId: PublicKey\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const [\n    receiptMintMetadataId,\n    recipientTokenAccountId,\n    [receiptMintManagerId],\n  ] = await Promise.all([\n    Metadata.getPDA(receiptMintId),\n    findAta(receiptMintId, wallet.publicKey),\n    findReceiptMintManagerId(),\n  ]);\n\n  return tokenManagerProgram.instruction.claimReceiptMint(name, {\n    accounts: {\n      tokenManager: tokenManagerId,\n      receiptMint: receiptMintId,\n      receiptMintMetadata: receiptMintMetadataId,\n      recipientTokenAccount: recipientTokenAccountId,\n      issuer: wallet.publicKey,\n      payer: wallet.publicKey,\n      receiptMintManager: receiptMintManagerId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      associatedToken: ASSOCIATED_TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      tokenMetadataProgram: MetadataProgram.PUBKEY,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n  });\n};\n\nexport const invalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  tokenManagerId: PublicKey,\n  tokenManagerKind: TokenManagerKind,\n  tokenManagerState: TokenManagerState,\n  tokenManagerTokenAccountId: PublicKey,\n  recipientTokenAccountId: PublicKey,\n  returnAccounts: AccountMeta[]\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const tokenManagerProgram = new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    provider\n  );\n\n  const transferAccounts = await getRemainingAccountsForKind(\n    mintId,\n    tokenManagerKind\n  );\n\n  return tokenManagerProgram.instruction.invalidate({\n    accounts: {\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: mintId,\n      recipientTokenAccount: recipientTokenAccountId,\n      invalidator: wallet.publicKey,\n      collector: CRANK_KEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: [\n      ...(tokenManagerState === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...returnAccounts,\n    ],\n  });\n};\n"]}