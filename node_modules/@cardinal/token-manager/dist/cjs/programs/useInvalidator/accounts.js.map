{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/useInvalidator/accounts.ts"],"names":[],"mappings":";;;;AAAA,kDAAgE;AAKhE,2CAA2E;AAE3E,iBAAiB;AACV,MAAM,iBAAiB,GAAG,CAC/B,UAAsB,EACtB,gBAA2B,EACe,EAAE;IAC5C,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CACrE,gBAAgB,CACjB,CAAC;IACF,OAAO;QACL,6DAA6D;QAC7D,aAAa;QACb,MAAM;QACN,MAAM,EAAE,gBAAgB;KACzB,CAAC;AACJ,CAAC,CAAA,CAAC;AAtBW,QAAA,iBAAiB,qBAsB5B;AAEK,MAAM,kBAAkB,GAAG,CAChC,UAAsB,EACtB,iBAA8B,EACc,EAAE;IAC9C,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,qBAAqB,GAAG,IAAI,gBAAO,CACvC,+BAAmB,EACnB,mCAAuB,EACvB,QAAQ,CACT,CAAC;IAEF,6DAA6D;IAC7D,aAAa;IACb,IAAI,eAAe,GAAG,EAAE,CAAC;IACzB,IAAI;QACF,eAAe;YACb,MAAM,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAC9D,iBAAiB,CAClB,CAAC;KACL;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,6DAA6D;IAC7D,aAAa;IACb,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACrC,mEAAmE;QACnE,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC;KAC7B,CAAC,CAAC,CAAC;AACN,CAAC,CAAA,CAAC;AA/BW,QAAA,kBAAkB,sBA+B7B","sourcesContent":["import { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { AccountData } from \"../../utils\";\nimport type { USE_INVALIDATOR_PROGRAM, UseInvalidatorData } from \"./constants\";\nimport { USE_INVALIDATOR_ADDRESS, USE_INVALIDATOR_IDL } from \"./constants\";\n\n// TODO fix types\nexport const getUseInvalidator = async (\n  connection: Connection,\n  useInvalidatorId: PublicKey\n): Promise<AccountData<UseInvalidatorData>> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  const parsed = await useInvalidatorProgram.account.useInvalidator.fetch(\n    useInvalidatorId\n  );\n  return {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    parsed,\n    pubkey: useInvalidatorId,\n  };\n};\n\nexport const getUseInvalidators = async (\n  connection: Connection,\n  useInvalidatorIds: PublicKey[]\n): Promise<AccountData<UseInvalidatorData>[]> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const useInvalidatorProgram = new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    provider\n  );\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  let useInvalidators = [];\n  try {\n    useInvalidators =\n      await useInvalidatorProgram.account.useInvalidator.fetchMultiple(\n        useInvalidatorIds\n      );\n  } catch (e) {\n    console.log(e);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return useInvalidators.map((tm, i) => ({\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    parsed: tm,\n    pubkey: useInvalidatorIds[i],\n  }));\n};\n"]}