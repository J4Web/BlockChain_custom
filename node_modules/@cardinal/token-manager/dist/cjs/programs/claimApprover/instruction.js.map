{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/claimApprover/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport {\n  CRANK_KEY,\n  PAYMENT_MANAGER_KEY,\n  TOKEN_MANAGER_ADDRESS,\n} from \"../tokenManager\";\nimport { findClaimReceiptId } from \"../tokenManager/pda\";\nimport type { CLAIM_APPROVER_PROGRAM } from \"./constants\";\nimport { CLAIM_APPROVER_ADDRESS, CLAIM_APPROVER_IDL } from \"./constants\";\nimport { findClaimApproverAddress } from \"./pda\";\n\nexport type ClaimApproverParams = {\n  paymentMint: PublicKey;\n  paymentAmount: number;\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n};\n\nexport const init = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  params: ClaimApproverParams\n): Promise<[TransactionInstruction, PublicKey]> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  const [claimApproverId, _claimApproverBump] = await findClaimApproverAddress(\n    tokenManagerId\n  );\n\n  return [\n    claimApproverProgram.instruction.init(\n      {\n        paymentMint: params.paymentMint,\n        paymentAmount: new BN(params.paymentAmount),\n        collector: params.collector || CRANK_KEY,\n        paymentManager: params.paymentManager || PAYMENT_MANAGER_KEY,\n      },\n      {\n        accounts: {\n          tokenManager: tokenManagerId,\n          claimApprover: claimApproverId,\n          issuer: wallet.publicKey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    ),\n    claimApproverId,\n  ];\n};\n\nexport const pay = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  payerTokenAccountId: PublicKey,\n  paymentAccounts: [PublicKey, PublicKey, AccountMeta[]]\n): Promise<TransactionInstruction> => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  const [claimReceiptId, _claimReceiptBump] = await findClaimReceiptId(\n    tokenManagerId,\n    wallet.publicKey\n  );\n\n  const [claimApproverId] = await findClaimApproverAddress(tokenManagerId);\n  const [\n    paymentTokenAccountId,\n    paymentManagerTokenAccountId,\n    remainingAccounts,\n  ] = paymentAccounts;\n  return claimApproverProgram.instruction.pay({\n    accounts: {\n      tokenManager: tokenManagerId,\n      paymentTokenAccount: paymentTokenAccountId,\n      claimApprover: claimApproverId,\n      payer: wallet.publicKey,\n      payerTokenAccount: payerTokenAccountId,\n      paymentManagerTokenAccount: paymentManagerTokenAccountId,\n      claimReceipt: claimReceiptId,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    },\n    remainingAccounts,\n  });\n};\n\nexport const close = (\n  connection: Connection,\n  wallet: Wallet,\n  claimApproverId: PublicKey,\n  tokenManagerId: PublicKey,\n  collector?: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n\n  const claimApproverProgram = new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    provider\n  );\n\n  return claimApproverProgram.instruction.close({\n    accounts: {\n      tokenManager: tokenManagerId,\n      claimApprover: claimApproverId,\n      collector: collector || CRANK_KEY,\n      closer: wallet.publicKey,\n    },\n  });\n};\n"]}