"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllClaimApprovers = exports.getClaimApprovers = exports.getClaimApprover = void 0;
const tslib_1 = require("tslib");
const anchor_1 = require("@project-serum/anchor");
const constants_1 = require("./constants");
const pda_1 = require("./pda");
// TODO fix types
const getClaimApprover = (connection, tokenManagerId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const claimApproverProgram = new anchor_1.Program(constants_1.CLAIM_APPROVER_IDL, constants_1.CLAIM_APPROVER_ADDRESS, provider);
    const [claimApproverId] = yield (0, pda_1.findClaimApproverAddress)(tokenManagerId);
    const parsed = yield claimApproverProgram.account.paidClaimApprover.fetch(claimApproverId);
    return {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        parsed,
        pubkey: claimApproverId,
    };
});
exports.getClaimApprover = getClaimApprover;
const getClaimApprovers = (connection, claimApproverIds) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new anchor_1.AnchorProvider(connection, null, {});
    const claimApproverProgram = new anchor_1.Program(constants_1.CLAIM_APPROVER_IDL, constants_1.CLAIM_APPROVER_ADDRESS, provider);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    let claimApprovers = [];
    try {
        claimApprovers =
            yield claimApproverProgram.account.paidClaimApprover.fetchMultiple(claimApproverIds);
    }
    catch (e) {
        console.log(e);
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return claimApprovers.map((tm, i) => ({
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        parsed: tm,
        pubkey: claimApproverIds[i],
    }));
});
exports.getClaimApprovers = getClaimApprovers;
const getAllClaimApprovers = (connection) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    const programAccounts = yield connection.getProgramAccounts(constants_1.CLAIM_APPROVER_ADDRESS);
    const claimApprovers = [];
    const coder = new anchor_1.BorshAccountsCoder(constants_1.CLAIM_APPROVER_IDL);
    programAccounts.forEach((account) => {
        try {
            const timeInvalidatorData = coder.decode("paidClaimApprover", account.account.data);
            claimApprovers.push(Object.assign(Object.assign({}, account), { parsed: timeInvalidatorData }));
        }
        catch (e) {
            console.log(`Failed to decode claim approver data`);
        }
    });
    return claimApprovers;
});
exports.getAllClaimApprovers = getAllClaimApprovers;
//# sourceMappingURL=accounts.js.map