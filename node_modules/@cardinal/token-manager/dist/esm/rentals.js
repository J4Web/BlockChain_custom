import { __awaiter } from "tslib";
import { Transaction } from "@solana/web3.js";
import { withClaimToken, withExtendExpiration, withIssueToken } from ".";
/**
 * Main method for creating any kind of rental
 * Allows for optional payment, optional usages or expiration and includes a otp for private links
 * @param connection
 * @param wallet
 * @returns Transaction, public key for the created token manager and a otp if necessary for private links
 */
export const createRental = (connection, wallet, rentalParameters) => __awaiter(void 0, void 0, void 0, function* () { return withIssueToken(new Transaction(), connection, wallet, rentalParameters); });
export const claimRental = (connection, wallet, tokenManagerId, timeInvalidatorId) => __awaiter(void 0, void 0, void 0, function* () {
    return withClaimToken(new Transaction(), connection, wallet, tokenManagerId, {
        timeInvalidatorId,
    });
});
export const extendRentalExpiration = (connection, wallet, tokenManagerId, paymentAmount) => __awaiter(void 0, void 0, void 0, function* () {
    return withExtendExpiration(new Transaction(), connection, wallet, tokenManagerId, paymentAmount);
});
//# sourceMappingURL=rentals.js.map