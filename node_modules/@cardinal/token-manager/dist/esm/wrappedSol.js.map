{"version":3,"file":"wrappedSol.js","sourceRoot":"","sources":["../../src/wrappedSol.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAC;AAE9C,OAAO,EAAE,aAAa,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAExE,OAAO,EAAE,oCAAoC,EAAE,MAAM,GAAG,CAAC;AAEzD,MAAM,UAAgB,WAAW,CAC/B,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,QAAgB;;QAEhB,MAAM,8BAA8B,GAClC,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,QAAQ,CAAC,WAAW,EACpB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,SAAS,CACjB,CAAC;QACJ,WAAW,CAAC,GAAG,CACb,aAAa,CAAC,QAAQ,CAAC;YACrB,UAAU,EAAE,MAAM,CAAC,SAAS;YAC5B,QAAQ,EAAE,8BAA8B;YACxC,QAAQ;SACT,CAAC,CACH,CAAC;QACF,WAAW,CAAC,GAAG,CAAC,2BAA2B,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC7E,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AAED,MAAM,UAAU,2BAA2B,CACzC,aAAwB;IAExB,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;QACrC,YAAY,CAAC,EAAE,CAAC,aAAa,CAA+B;KAC7D,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,EAAE,EAAE,yBAAyB;KAC3C,EACD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5E,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,QAAQ,CAAC,gBAAgB;QACpC,IAAI;KACL,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as splToken from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\n\nimport { withFindOrInitAssociatedTokenAccount } from \".\";\n\nexport async function withWrapSol(\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  lamports: number\n): Promise<Transaction> {\n  const nativeAssociatedTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      splToken.NATIVE_MINT,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n  transaction.add(\n    SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: nativeAssociatedTokenAccountId,\n      lamports,\n    })\n  );\n  transaction.add(createSyncNativeInstruction(nativeAssociatedTokenAccountId));\n  return transaction;\n}\n\nexport function createSyncNativeInstruction(\n  nativeAccount: PublicKey\n): TransactionInstruction {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\") as BufferLayout.Layout<never>,\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 17, // SyncNative instruction\n    },\n    data\n  );\n\n  const keys = [{ pubkey: nativeAccount, isSigner: false, isWritable: true }];\n  return new TransactionInstruction({\n    keys,\n    programId: splToken.TOKEN_PROGRAM_ID,\n    data,\n  });\n}\n"]}