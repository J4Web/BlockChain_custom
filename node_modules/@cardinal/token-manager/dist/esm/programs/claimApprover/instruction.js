import { __awaiter } from "tslib";
import { AnchorProvider, BN, Program } from "@project-serum/anchor";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { SystemProgram } from "@solana/web3.js";
import { CRANK_KEY, PAYMENT_MANAGER_KEY, TOKEN_MANAGER_ADDRESS, } from "../tokenManager";
import { findClaimReceiptId } from "../tokenManager/pda";
import { CLAIM_APPROVER_ADDRESS, CLAIM_APPROVER_IDL } from "./constants";
import { findClaimApproverAddress } from "./pda";
export const init = (connection, wallet, tokenManagerId, params) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const claimApproverProgram = new Program(CLAIM_APPROVER_IDL, CLAIM_APPROVER_ADDRESS, provider);
    const [claimApproverId, _claimApproverBump] = yield findClaimApproverAddress(tokenManagerId);
    return [
        claimApproverProgram.instruction.init({
            paymentMint: params.paymentMint,
            paymentAmount: new BN(params.paymentAmount),
            collector: params.collector || CRANK_KEY,
            paymentManager: params.paymentManager || PAYMENT_MANAGER_KEY,
        }, {
            accounts: {
                tokenManager: tokenManagerId,
                claimApprover: claimApproverId,
                issuer: wallet.publicKey,
                payer: wallet.publicKey,
                systemProgram: SystemProgram.programId,
            },
        }),
        claimApproverId,
    ];
});
export const pay = (connection, wallet, tokenManagerId, payerTokenAccountId, paymentAccounts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const claimApproverProgram = new Program(CLAIM_APPROVER_IDL, CLAIM_APPROVER_ADDRESS, provider);
    const [claimReceiptId, _claimReceiptBump] = yield findClaimReceiptId(tokenManagerId, wallet.publicKey);
    const [claimApproverId] = yield findClaimApproverAddress(tokenManagerId);
    const [paymentTokenAccountId, paymentManagerTokenAccountId, remainingAccounts,] = paymentAccounts;
    return claimApproverProgram.instruction.pay({
        accounts: {
            tokenManager: tokenManagerId,
            paymentTokenAccount: paymentTokenAccountId,
            claimApprover: claimApproverId,
            payer: wallet.publicKey,
            payerTokenAccount: payerTokenAccountId,
            paymentManagerTokenAccount: paymentManagerTokenAccountId,
            claimReceipt: claimReceiptId,
            cardinalTokenManager: TOKEN_MANAGER_ADDRESS,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        },
        remainingAccounts,
    });
});
export const close = (connection, wallet, claimApproverId, tokenManagerId, collector) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const claimApproverProgram = new Program(CLAIM_APPROVER_IDL, CLAIM_APPROVER_ADDRESS, provider);
    return claimApproverProgram.instruction.close({
        accounts: {
            tokenManager: tokenManagerId,
            claimApprover: claimApproverId,
            collector: collector || CRANK_KEY,
            closer: wallet.publicKey,
        },
    });
};
//# sourceMappingURL=instruction.js.map