import type { BN } from "@project-serum/anchor";
import type { Wallet } from "@saberhq/solana-contrib";
import type { AccountMeta, Connection, PublicKey, TransactionInstruction } from "@solana/web3.js";
import { TokenManagerState } from ".";
import type { InvalidationType, TokenManagerKind } from "./constants";
export declare const initMintCounter: (connection: Connection, wallet: Wallet, mint: PublicKey) => Promise<TransactionInstruction>;
export declare const init: (connection: Connection, wallet: Wallet, mint: PublicKey, issuerTokenAccountId: PublicKey, amount: BN, kind: TokenManagerKind, invalidationType: InvalidationType, numInvalidators?: number) => Promise<[TransactionInstruction, PublicKey]>;
export declare const setClaimApprover: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, claimApproverId: PublicKey) => TransactionInstruction;
export declare const setTransferAuthority: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, transferAuthorityId: PublicKey) => TransactionInstruction;
export declare const addInvalidator: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, invalidatorId: PublicKey) => TransactionInstruction;
export declare const issue: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, tokenManagerTokenAccountId: PublicKey, issuerTokenAccountId: PublicKey) => TransactionInstruction;
export declare const unissue: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, tokenManagerTokenAccountId: PublicKey, issuerTokenAccountId: PublicKey) => TransactionInstruction;
export declare const claim: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, tokenManagerKind: TokenManagerKind, mintId: PublicKey, tokenManagerTokenAccountId: PublicKey, recipientTokenAccountId: PublicKey, claimReceipt: PublicKey | undefined) => Promise<TransactionInstruction>;
export declare const createClaimReceipt: (connection: Connection, wallet: Wallet, tokenManagerId: PublicKey, claimApproverId: PublicKey) => Promise<[TransactionInstruction, PublicKey]>;
export declare const creatMintManager: (connection: Connection, wallet: Wallet, mintId: PublicKey) => Promise<[TransactionInstruction, PublicKey]>;
export declare const closeMintManager: (connection: Connection, wallet: Wallet, mintId: PublicKey) => Promise<[TransactionInstruction, PublicKey]>;
export declare const claimReceiptMint: (connection: Connection, wallet: Wallet, name: string, tokenManagerId: PublicKey, receiptMintId: PublicKey) => Promise<TransactionInstruction>;
export declare const invalidate: (connection: Connection, wallet: Wallet, mintId: PublicKey, tokenManagerId: PublicKey, tokenManagerKind: TokenManagerKind, tokenManagerState: TokenManagerState, tokenManagerTokenAccountId: PublicKey, recipientTokenAccountId: PublicKey, returnAccounts: AccountMeta[]) => Promise<TransactionInstruction>;
//# sourceMappingURL=instruction.d.ts.map