import { __awaiter } from "tslib";
import { utils } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { MINT_COUNTER_SEED, MINT_MANAGER_SEED, RECEIPT_MINT_MANAGER_SEED, TRANSFER_RECEIPT_SEED, } from ".";
import { CLAIM_RECEIPT_SEED, TOKEN_MANAGER_ADDRESS, TOKEN_MANAGER_SEED, } from "./constants";
/**
 * Finds the token manager address for a given mint
 * @returns
 */
export const tryTokenManagerAddressFromMint = (connection, mint) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const tokenManagerId = yield tokenManagerAddressFromMint(connection, mint);
        return tokenManagerId;
    }
    catch (e) {
        return null;
    }
});
/**
 * Finds the token manager address for a given mint
 * @returns
 */
export const tokenManagerAddressFromMint = (_connection, mint) => __awaiter(void 0, void 0, void 0, function* () {
    const [tokenManagerId] = yield findTokenManagerAddress(mint);
    return tokenManagerId;
});
/**
 * Finds the token manager address for a given mint and mint counter
 * @returns
 */
export const findTokenManagerAddress = (mint) => __awaiter(void 0, void 0, void 0, function* () {
    return yield PublicKey.findProgramAddress([utils.bytes.utf8.encode(TOKEN_MANAGER_SEED), mint.toBuffer()], TOKEN_MANAGER_ADDRESS);
});
/**
 * Finds the claim receipt id.
 * @returns
 */
export const findClaimReceiptId = (tokenManagerKey, recipientKey) => __awaiter(void 0, void 0, void 0, function* () {
    return PublicKey.findProgramAddress([
        utils.bytes.utf8.encode(CLAIM_RECEIPT_SEED),
        tokenManagerKey.toBuffer(),
        recipientKey.toBuffer(),
    ], TOKEN_MANAGER_ADDRESS);
});
/**
 * Finds the transfer receipt id.
 * @returns
 */
export const findTransferReceiptId = (tokenManagerKey, recipientKey) => __awaiter(void 0, void 0, void 0, function* () {
    return PublicKey.findProgramAddress([
        utils.bytes.utf8.encode(TRANSFER_RECEIPT_SEED),
        tokenManagerKey.toBuffer(),
        recipientKey.toBuffer(),
    ], TOKEN_MANAGER_ADDRESS);
});
/**
 * Finds the mint manager id.
 * @returns
 */
export const findMintManagerId = (mintId) => __awaiter(void 0, void 0, void 0, function* () {
    return PublicKey.findProgramAddress([utils.bytes.utf8.encode(MINT_MANAGER_SEED), mintId.toBuffer()], TOKEN_MANAGER_ADDRESS);
});
/**
 * Finds the mint counter id.
 * @returns
 */
export const findMintCounterId = (mintId) => __awaiter(void 0, void 0, void 0, function* () {
    return PublicKey.findProgramAddress([utils.bytes.utf8.encode(MINT_COUNTER_SEED), mintId.toBuffer()], TOKEN_MANAGER_ADDRESS);
});
/**
 * Finds the receipt mint manager id.
 * @returns
 */
export const findReceiptMintManagerId = () => __awaiter(void 0, void 0, void 0, function* () {
    return PublicKey.findProgramAddress([utils.bytes.utf8.encode(RECEIPT_MINT_MANAGER_SEED)], TOKEN_MANAGER_ADDRESS);
});
//# sourceMappingURL=pda.js.map