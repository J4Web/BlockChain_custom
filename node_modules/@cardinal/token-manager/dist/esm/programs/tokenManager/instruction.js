import { __awaiter } from "tslib";
import { Metadata, MetadataProgram, } from "@metaplex-foundation/mpl-token-metadata";
import { AnchorProvider, Program } from "@project-serum/anchor";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import { SystemProgram, SYSVAR_RENT_PUBKEY } from "@solana/web3.js";
import { findAta } from "../..";
import { CRANK_KEY, TokenManagerState } from ".";
import { TOKEN_MANAGER_ADDRESS, TOKEN_MANAGER_IDL } from "./constants";
import { findClaimReceiptId, findMintCounterId, findMintManagerId, findReceiptMintManagerId, findTokenManagerAddress, } from "./pda";
import { getRemainingAccountsForKind } from "./utils";
export const initMintCounter = (connection, wallet, mint) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [mintCounterId, _mintCounterBump] = yield findMintCounterId(mint);
    return tokenManagerProgram.instruction.initMintCounter(mint, {
        accounts: {
            mintCounter: mintCounterId,
            payer: wallet.publicKey,
            systemProgram: SystemProgram.programId,
        },
    });
});
export const init = (connection, wallet, mint, issuerTokenAccountId, amount, kind, invalidationType, numInvalidators = 1) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [[tokenManagerId], [mintCounterId]] = yield Promise.all([
        findTokenManagerAddress(mint),
        findMintCounterId(mint),
    ]);
    return [
        tokenManagerProgram.instruction.init({
            numInvalidators,
            amount,
            kind,
            invalidationType,
        }, {
            accounts: {
                tokenManager: tokenManagerId,
                mintCounter: mintCounterId,
                mint: mint,
                issuer: wallet.publicKey,
                payer: wallet.publicKey,
                issuerTokenAccount: issuerTokenAccountId,
                systemProgram: SystemProgram.programId,
            },
        }),
        tokenManagerId,
    ];
});
export const setClaimApprover = (connection, wallet, tokenManagerId, claimApproverId) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    return tokenManagerProgram.instruction.setClaimApprover(claimApproverId, {
        accounts: {
            tokenManager: tokenManagerId,
            issuer: wallet.publicKey,
        },
    });
};
export const setTransferAuthority = (connection, wallet, tokenManagerId, transferAuthorityId) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    return tokenManagerProgram.instruction.setTransferAuthority(transferAuthorityId, {
        accounts: {
            tokenManager: tokenManagerId,
            issuer: wallet.publicKey,
        },
    });
};
export const addInvalidator = (connection, wallet, tokenManagerId, invalidatorId) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    return tokenManagerProgram.instruction.addInvalidator(invalidatorId, {
        accounts: {
            tokenManager: tokenManagerId,
            issuer: wallet.publicKey,
        },
    });
};
export const issue = (connection, wallet, tokenManagerId, tokenManagerTokenAccountId, issuerTokenAccountId) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    return tokenManagerProgram.instruction.issue({
        accounts: {
            tokenManager: tokenManagerId,
            tokenManagerTokenAccount: tokenManagerTokenAccountId,
            issuer: wallet.publicKey,
            issuerTokenAccount: issuerTokenAccountId,
            payer: wallet.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        },
    });
};
export const unissue = (connection, wallet, tokenManagerId, tokenManagerTokenAccountId, issuerTokenAccountId) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    return tokenManagerProgram.instruction.unissue({
        accounts: {
            tokenManager: tokenManagerId,
            tokenManagerTokenAccount: tokenManagerTokenAccountId,
            issuer: wallet.publicKey,
            issuerTokenAccount: issuerTokenAccountId,
            tokenProgram: TOKEN_PROGRAM_ID,
        },
    });
};
export const claim = (connection, wallet, tokenManagerId, tokenManagerKind, mintId, tokenManagerTokenAccountId, recipientTokenAccountId, claimReceipt) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const remainingAccounts = yield getRemainingAccountsForKind(mintId, tokenManagerKind);
    return tokenManagerProgram.instruction.claim({
        accounts: {
            tokenManager: tokenManagerId,
            tokenManagerTokenAccount: tokenManagerTokenAccountId,
            mint: mintId,
            recipient: wallet.publicKey,
            recipientTokenAccount: recipientTokenAccountId,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        },
        remainingAccounts: claimReceipt
            ? [
                ...remainingAccounts,
                { pubkey: claimReceipt, isSigner: false, isWritable: true },
            ]
            : remainingAccounts,
    });
});
export const createClaimReceipt = (connection, wallet, tokenManagerId, claimApproverId) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [claimReceiptId, _claimReceiptBump] = yield findClaimReceiptId(tokenManagerId, wallet.publicKey);
    return [
        tokenManagerProgram.instruction.createClaimReceipt(wallet.publicKey, {
            accounts: {
                tokenManager: tokenManagerId,
                claimApprover: claimApproverId,
                claimReceipt: claimReceiptId,
                payer: wallet.publicKey,
                systemProgram: SystemProgram.programId,
            },
        }),
        claimReceiptId,
    ];
});
export const creatMintManager = (connection, wallet, mintId) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [mintManagerId, _mintManagerBump] = yield findMintManagerId(mintId);
    return [
        tokenManagerProgram.instruction.createMintManager({
            accounts: {
                mintManager: mintManagerId,
                mint: mintId,
                freezeAuthority: wallet.publicKey,
                payer: wallet.publicKey,
                tokenProgram: TOKEN_PROGRAM_ID,
                systemProgram: SystemProgram.programId,
            },
        }),
        mintManagerId,
    ];
});
export const closeMintManager = (connection, wallet, mintId) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [mintManagerId] = yield findMintManagerId(mintId);
    return [
        tokenManagerProgram.instruction.closeMintManager({
            accounts: {
                mintManager: mintManagerId,
                mint: mintId,
                freezeAuthority: wallet.publicKey,
                payer: wallet.publicKey,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        }),
        mintManagerId,
    ];
});
export const claimReceiptMint = (connection, wallet, name, tokenManagerId, receiptMintId) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const [receiptMintMetadataId, recipientTokenAccountId, [receiptMintManagerId],] = yield Promise.all([
        Metadata.getPDA(receiptMintId),
        findAta(receiptMintId, wallet.publicKey),
        findReceiptMintManagerId(),
    ]);
    return tokenManagerProgram.instruction.claimReceiptMint(name, {
        accounts: {
            tokenManager: tokenManagerId,
            receiptMint: receiptMintId,
            receiptMintMetadata: receiptMintMetadataId,
            recipientTokenAccount: recipientTokenAccountId,
            issuer: wallet.publicKey,
            payer: wallet.publicKey,
            receiptMintManager: receiptMintManagerId,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedToken: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            tokenMetadataProgram: MetadataProgram.PUBKEY,
            rent: SYSVAR_RENT_PUBKEY,
        },
    });
});
export const invalidate = (connection, wallet, mintId, tokenManagerId, tokenManagerKind, tokenManagerState, tokenManagerTokenAccountId, recipientTokenAccountId, returnAccounts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const tokenManagerProgram = new Program(TOKEN_MANAGER_IDL, TOKEN_MANAGER_ADDRESS, provider);
    const transferAccounts = yield getRemainingAccountsForKind(mintId, tokenManagerKind);
    return tokenManagerProgram.instruction.invalidate({
        accounts: {
            tokenManager: tokenManagerId,
            tokenManagerTokenAccount: tokenManagerTokenAccountId,
            mint: mintId,
            recipientTokenAccount: recipientTokenAccountId,
            invalidator: wallet.publicKey,
            collector: CRANK_KEY,
            tokenProgram: TOKEN_PROGRAM_ID,
            rent: SYSVAR_RENT_PUBKEY,
        },
        remainingAccounts: [
            ...(tokenManagerState === TokenManagerState.Claimed
                ? transferAccounts
                : []),
            ...returnAccounts,
        ],
    });
});
//# sourceMappingURL=instruction.js.map