import { __awaiter } from "tslib";
import { AnchorProvider, Program } from "@project-serum/anchor";
import { USE_INVALIDATOR_ADDRESS, USE_INVALIDATOR_IDL } from "./constants";
// TODO fix types
export const getUseInvalidator = (connection, useInvalidatorId) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const useInvalidatorProgram = new Program(USE_INVALIDATOR_IDL, USE_INVALIDATOR_ADDRESS, provider);
    const parsed = yield useInvalidatorProgram.account.useInvalidator.fetch(useInvalidatorId);
    return {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        parsed,
        pubkey: useInvalidatorId,
    };
});
export const getUseInvalidators = (connection, useInvalidatorIds) => __awaiter(void 0, void 0, void 0, function* () {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const provider = new AnchorProvider(connection, null, {});
    const useInvalidatorProgram = new Program(USE_INVALIDATOR_IDL, USE_INVALIDATOR_ADDRESS, provider);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    let useInvalidators = [];
    try {
        useInvalidators =
            yield useInvalidatorProgram.account.useInvalidator.fetchMultiple(useInvalidatorIds);
    }
    catch (e) {
        console.log(e);
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return useInvalidators.map((tm, i) => ({
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        parsed: tm,
        pubkey: useInvalidatorIds[i],
    }));
});
//# sourceMappingURL=accounts.js.map