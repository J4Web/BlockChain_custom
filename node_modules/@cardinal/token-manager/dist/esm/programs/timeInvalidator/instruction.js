import { __awaiter } from "tslib";
import { AnchorProvider, BN, Program } from "@project-serum/anchor";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { SystemProgram, SYSVAR_RENT_PUBKEY } from "@solana/web3.js";
import { CRANK_KEY, PAYMENT_MANAGER_KEY, TOKEN_MANAGER_ADDRESS, TokenManagerState, } from "../tokenManager";
import { getRemainingAccountsForKind } from "../tokenManager/utils";
import { TIME_INVALIDATOR_ADDRESS, TIME_INVALIDATOR_IDL } from "./constants";
import { findTimeInvalidatorAddress } from "./pda";
export const init = (connection, wallet, tokenManagerId, timeInvalidation) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const provider = new AnchorProvider(connection, wallet, {});
    const timeInvalidatorProgram = new Program(TIME_INVALIDATOR_IDL, TIME_INVALIDATOR_ADDRESS, provider);
    const [timeInvalidatorId, _timeInvalidatorBump] = yield findTimeInvalidatorAddress(tokenManagerId);
    return [
        timeInvalidatorProgram.instruction.init({
            collector: timeInvalidation.collector || CRANK_KEY,
            paymentManager: timeInvalidation.paymentManager || PAYMENT_MANAGER_KEY,
            expiration: timeInvalidation.expiration
                ? new BN(timeInvalidation.expiration)
                : null,
            durationSeconds: timeInvalidation.durationSeconds
                ? new BN(timeInvalidation.durationSeconds)
                : null,
            extensionPaymentAmount: ((_a = timeInvalidation.extension) === null || _a === void 0 ? void 0 : _a.extensionPaymentAmount)
                ? new BN((_b = timeInvalidation.extension) === null || _b === void 0 ? void 0 : _b.extensionPaymentAmount)
                : null,
            extensionDurationSeconds: ((_c = timeInvalidation.extension) === null || _c === void 0 ? void 0 : _c.extensionDurationSeconds)
                ? new BN((_d = timeInvalidation.extension) === null || _d === void 0 ? void 0 : _d.extensionDurationSeconds)
                : null,
            extensionPaymentMint: ((_e = timeInvalidation.extension) === null || _e === void 0 ? void 0 : _e.extensionPaymentMint)
                ? (_f = timeInvalidation.extension) === null || _f === void 0 ? void 0 : _f.extensionPaymentMint
                : null,
            maxExpiration: timeInvalidation.maxExpiration
                ? new BN(timeInvalidation.maxExpiration)
                : null,
            disablePartialExtension: ((_g = timeInvalidation.extension) === null || _g === void 0 ? void 0 : _g.disablePartialExtension)
                ? (_h = timeInvalidation.extension) === null || _h === void 0 ? void 0 : _h.disablePartialExtension
                : null,
        }, {
            accounts: {
                tokenManager: tokenManagerId,
                timeInvalidator: timeInvalidatorId,
                issuer: wallet.publicKey,
                payer: wallet.publicKey,
                systemProgram: SystemProgram.programId,
            },
        }),
        timeInvalidatorId,
    ];
});
export const extendExpiration = (connection, wallet, tokenManagerId, payerTokenAccountId, timeInvalidatorId, extensionPaymentAmount, paymentAccounts) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const timeInvalidatorProgram = new Program(TIME_INVALIDATOR_IDL, TIME_INVALIDATOR_ADDRESS, provider);
    const [paymentTokenAccountId, paymentManagerTokenAccountId, remainingAccounts,] = paymentAccounts;
    return timeInvalidatorProgram.instruction.extendExpiration(new BN(extensionPaymentAmount), {
        accounts: {
            tokenManager: tokenManagerId,
            timeInvalidator: timeInvalidatorId,
            paymentTokenAccount: paymentTokenAccountId,
            paymentManagerTokenAccount: paymentManagerTokenAccountId,
            payer: wallet.publicKey,
            payerTokenAccount: payerTokenAccountId,
            tokenProgram: TOKEN_PROGRAM_ID,
        },
        remainingAccounts,
    });
};
export const invalidate = (connection, wallet, mintId, tokenManagerId, tokenManagerKind, tokenManagerState, tokenManagerTokenAccountId, recipientTokenAccountId, returnAccounts) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const timeInvalidatorProgram = new Program(TIME_INVALIDATOR_IDL, TIME_INVALIDATOR_ADDRESS, provider);
    const [[timeInvalidatorId], transferAccounts] = yield Promise.all([
        findTimeInvalidatorAddress(tokenManagerId),
        getRemainingAccountsForKind(mintId, tokenManagerKind),
    ]);
    return timeInvalidatorProgram.instruction.invalidate({
        accounts: {
            tokenManager: tokenManagerId,
            timeInvalidator: timeInvalidatorId,
            invalidator: wallet.publicKey,
            tokenManagerTokenAccount: tokenManagerTokenAccountId,
            mint: mintId,
            recipientTokenAccount: recipientTokenAccountId,
            cardinalTokenManager: TOKEN_MANAGER_ADDRESS,
            tokenProgram: TOKEN_PROGRAM_ID,
            rent: SYSVAR_RENT_PUBKEY,
        },
        remainingAccounts: [
            ...(tokenManagerState === TokenManagerState.Claimed
                ? transferAccounts
                : []),
            ...returnAccounts,
        ],
    });
});
export const close = (connection, wallet, timeInvalidatorId, tokenManagerId, collector) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const timeInvalidatorProgram = new Program(TIME_INVALIDATOR_IDL, TIME_INVALIDATOR_ADDRESS, provider);
    return timeInvalidatorProgram.instruction.close({
        accounts: {
            tokenManager: tokenManagerId,
            timeInvalidator: timeInvalidatorId,
            collector: collector || CRANK_KEY,
            closer: wallet.publicKey,
        },
    });
};
//# sourceMappingURL=instruction.js.map