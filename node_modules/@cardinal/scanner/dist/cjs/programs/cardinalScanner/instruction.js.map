{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/cardinalScanner/instruction.ts"],"names":[],"mappings":";;;AAAA,kDAAgE;AAShE,2CAA2D;AAEpD,MAAM,IAAI,GAAG,CAClB,UAAsB,EACtB,MAAc,EACd,gBAA2B,EACH,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,cAAc,GAAG,IAAI,gBAAO,CAChC,uBAAW,EACX,2BAAe,EACf,QAAQ,CACT,CAAC;IACF,OAAO,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC;QACrC,QAAQ,EAAE;YACR,IAAI,EAAE,MAAM,CAAC,SAAS;YACtB,OAAO,EAAE,gBAAgB;SAC1B;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAjBW,QAAA,IAAI,QAiBf","sourcesContent":["import { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type {\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport type { SCANNER_PROGRAM } from \"./constants\";\nimport { SCANNER_ADDRESS, SCANNER_IDL } from \"./constants\";\n\nexport const scan = (\n  connection: Connection,\n  wallet: Wallet,\n  additionalSigner: PublicKey\n): TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const scannerProgram = new Program<SCANNER_PROGRAM>(\n    SCANNER_IDL,\n    SCANNER_ADDRESS,\n    provider\n  );\n  return scannerProgram.instruction.scan({\n    accounts: {\n      user: wallet.publicKey,\n      scanner: additionalSigner,\n    },\n  });\n};\n"]}