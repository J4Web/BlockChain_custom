{"version":3,"file":"mints.js","sourceRoot":"","sources":["../../src/mints.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAC;AAO9C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,oCAAoC,EAAE,MAAM,gBAAgB,CAAC;AAEtE,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,SAAoB,EACpB,MAAiB,EACjB,MAAM,GAAG,CAAC,EACV,kBAA6B,SAAS,EACH,EAAE;IACrC,MAAM,iBAAiB,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,8BAA8B,CAC3E,UAAU,CACX,CAAC;IACF,WAAW,CAAC,GAAG,CACb,aAAa,CAAC,aAAa,CAAC;QAC1B,UAAU,EAAE,MAAM,CAAC,SAAS;QAC5B,gBAAgB,EAAE,MAAM;QACxB,QAAQ,EAAE,iBAAiB;QAC3B,+GAA+G;QAC/G,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI;QAC/B,SAAS,EAAE,QAAQ,CAAC,gBAAgB;KACrC,CAAC,CACH,CAAC;IACF,WAAW,CAAC,GAAG,CACb,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CACtC,QAAQ,CAAC,gBAAgB,EACzB,MAAM,EACN,CAAC,EACD,MAAM,CAAC,SAAS,EAChB,eAAe,CAChB,CACF,CAAC;IACF,MAAM,SAAS,GAAG,MAAM,oCAAoC,CAC1D,WAAW,EACX,UAAU,EACV,MAAM,EACN,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,SAAS,CACjB,CAAC;IACF,IAAI,MAAM,GAAG,CAAC,EAAE;QACd,WAAW,CAAC,GAAG,CACb,QAAQ,CAAC,KAAK,CAAC,uBAAuB,CACpC,QAAQ,CAAC,gBAAgB,EACzB,MAAM,EACN,SAAS,EACT,MAAM,CAAC,SAAS,EAChB,EAAE,EACF,MAAM,CACP,CACF,CAAC;KACH;IACD,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;AAClC,CAAC,CAAA,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,OAAgB,EAChB,SAAoB,EACpB,MAAM,GAAG,CAAC,EACV,kBAA6B,SAAS,EACA,EAAE;IACxC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,UAAU,CAC1C,UAAU,EACV,OAAO,EACP,OAAO,CAAC,SAAS,EACjB,eAAe,EACf,CAAC,EACD,QAAQ,CAAC,gBAAgB,CAC1B,CAAC;IACF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC;IACxE,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IAC/D,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAA,CAAC","sourcesContent":["import type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as splToken from \"@solana/spl-token\";\nimport type {\n  Connection,\n  Keypair,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { withFindOrInitAssociatedTokenAccount } from \"./transactions\";\n\nexport const withCreateMint = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  recipient: PublicKey,\n  mintId: PublicKey,\n  amount = 1,\n  freezeAuthority: PublicKey = recipient\n): Promise<[PublicKey, Transaction]> => {\n  const mintBalanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n    connection\n  );\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: mintId,\n      lamports: mintBalanceNeeded,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      space: splToken.MintLayout.span,\n      programId: splToken.TOKEN_PROGRAM_ID,\n    })\n  );\n  transaction.add(\n    splToken.Token.createInitMintInstruction(\n      splToken.TOKEN_PROGRAM_ID,\n      mintId,\n      0,\n      wallet.publicKey,\n      freezeAuthority\n    )\n  );\n  const walletAta = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    wallet.publicKey,\n    wallet.publicKey\n  );\n  if (amount > 0) {\n    transaction.add(\n      splToken.Token.createMintToInstruction(\n        splToken.TOKEN_PROGRAM_ID,\n        mintId,\n        walletAta,\n        wallet.publicKey,\n        [],\n        amount\n      )\n    );\n  }\n  return [walletAta, transaction];\n};\n\n/**\n * Creates mint, token account, and mints amount to token account\n * @param connection\n * @param creator\n * @returns\n */\nexport const createMint = async (\n  connection: Connection,\n  creator: Keypair,\n  recipient: PublicKey,\n  amount = 1,\n  freezeAuthority: PublicKey = recipient\n): Promise<[PublicKey, splToken.Token]> => {\n  const mint = await splToken.Token.createMint(\n    connection,\n    creator,\n    creator.publicKey,\n    freezeAuthority,\n    0,\n    splToken.TOKEN_PROGRAM_ID\n  );\n  const tokenAccount = await mint.createAssociatedTokenAccount(recipient);\n  await mint.mintTo(tokenAccount, creator.publicKey, [], amount);\n  return [tokenAccount, mint];\n};\n"]}