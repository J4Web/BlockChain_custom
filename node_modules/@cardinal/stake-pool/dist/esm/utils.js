import * as web3 from "@solana/web3.js";
import { BN } from "@project-serum/anchor";
import * as splToken from "@solana/spl-token";
import { getStakeEntries } from ".";
export const createMint = async (connection, creator, recipient, amount = 1) => {
    const fromAirdropSignature = await connection.requestAirdrop(creator.publicKey, web3.LAMPORTS_PER_SOL);
    await connection.confirmTransaction(fromAirdropSignature);
    const mint = await splToken.Token.createMint(connection, creator, creator.publicKey, creator.publicKey, 1, splToken.TOKEN_PROGRAM_ID);
    const tokenAccount = await mint.createAssociatedTokenAccount(recipient);
    await mint.mintTo(tokenAccount, creator.publicKey, [], amount);
    return [tokenAccount, mint];
};
export async function withFindOrInitAssociatedTokenAccount(transaction, connection, mint, owner, payer, allowOwnerOffCurve) {
    const associatedAddress = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, owner, allowOwnerOffCurve);
    const account = await connection.getAccountInfo(associatedAddress);
    if (!account) {
        transaction.add(splToken.Token.createAssociatedTokenAccountInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, associatedAddress, owner, payer));
    }
    return associatedAddress;
}
const LEVEL_1_10_PCT = 1.4;
const TIER_2_LEVEL = 10;
const LEVEL_11_17_PCT = 1.25;
const TIER_3_LEVEL = 17;
const LEVEL_18_25_PCT = 1.15;
export const GROUP_AND_HUNGRY_THRESHOLD = 10000;
/**
 * Calculates the total number of seconds a jambo has been
 * staked on the level up pool given its level number
 * @param level
 * @returns
 */
export const secondsFromLevel = (level) => {
    if (!level)
        return 0;
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    for (let i = 1; i < level; i++) {
        let multiplier = LEVEL_1_10_PCT;
        if (i >= TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i >= TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return requiredSeconds;
};
/**
 * Calculate actual level of jambo given the total seconds
 * it has been staked on the level up pool
 * @param totalStakeSeconds
 * @returns
 */
export const getLevelNumber = (totalStakeSeconds) => {
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    if (!totalStakeSeconds)
        return [0, requiredSeconds];
    for (let i = 0; i <= 25; i++) {
        if (totalStakeSeconds < Math.floor(requiredSeconds)) {
            return [i, requiredSeconds];
        }
        let multiplier = LEVEL_1_10_PCT;
        if (i + 1 >= TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i + 1 >= TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return [25, requiredSeconds];
};
/**
 * Gets the number of active stake seconds
 * on the level up pool given a stake entry
 * @param stakeEntryData
 * @param UTCNow
 * @returns
 */
export function getActiveStakeSeconds(stakeEntryData, UTCNow) {
    const lastStakedAt = stakeEntryData?.parsed.lastStakedAt.toNumber() || UTCNow;
    const stakeBoost = (stakeEntryData?.parsed.stakeBoost || new BN(1)).toNumber();
    const totalStakeSeconds = (stakeEntryData?.parsed.totalStakeSeconds || new BN(0)).toNumber();
    const stakedTime = stakeEntryData?.parsed.lastStaker.toString() !==
        web3.PublicKey.default.toString()
        ? totalStakeSeconds +
            (stakeBoost /
                (stakeBoost >= GROUP_AND_HUNGRY_THRESHOLD ? 10000 : 100)) *
                (UTCNow - lastStakedAt)
        : totalStakeSeconds;
    return stakedTime;
}
/**
 * Gets the level number of a jambo based on its original mint id
 * @param totalStakeSeconds
 * @returns
 */
export const getJamboLevel = async (connection, mintIds) => {
    let stakeEntries = await getStakeEntries(connection, mintIds);
    return stakeEntries.map((entry) => getLevelNumber(entry.parsed.totalStakeSeconds?.toNumber()));
};
//# sourceMappingURL=utils.js.map