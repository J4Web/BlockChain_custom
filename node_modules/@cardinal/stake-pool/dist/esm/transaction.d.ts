import type { Wallet } from "@saberhq/solana-contrib";
import * as anchor from "@project-serum/anchor";
import * as web3 from "@solana/web3.js";
export declare function withInitStakeEntry(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    originalMint: web3.PublicKey;
    certificateMint: web3.PublicKey;
    name: string;
    symbol: string;
    tribe: string;
    hungry: boolean;
}): Promise<web3.Transaction>;
export declare function withStake(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    originalMint: web3.PublicKey;
    certificateMint: web3.PublicKey;
    userOriginalMintTokenAccountId: web3.PublicKey;
    userCertificateMintTokenAccountId: web3.PublicKey;
}): Promise<web3.Transaction>;
export declare function withUnstake(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    originalMint: web3.PublicKey;
    certificateMint: web3.PublicKey;
    userOriginalMintTokenAccountId: web3.PublicKey;
    userCertificateMintTokenAccountId: web3.PublicKey;
}): Promise<web3.Transaction>;
export declare function withGroup(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    stakeEntryOne: anchor.web3.PublicKey;
    stakeEntryTwo: anchor.web3.PublicKey;
    stakeEntryThree: anchor.web3.PublicKey;
    stakeEntryFour: anchor.web3.PublicKey;
    staker: anchor.web3.PublicKey;
}): Promise<web3.Transaction>;
export declare function withUngroup(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    groupStakeEntryId: web3.PublicKey;
    stakeEntryOne: web3.PublicKey;
    stakeEntryTwo: web3.PublicKey;
    stakeEntryThree: web3.PublicKey;
    stakeEntryFour: web3.PublicKey;
}): Promise<web3.Transaction>;
//# sourceMappingURL=transaction.d.ts.map