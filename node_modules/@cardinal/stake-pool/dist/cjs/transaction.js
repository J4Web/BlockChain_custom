"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withUngroup = exports.withGroup = exports.withUnstake = exports.withStake = exports.withInitStakeEntry = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const web3 = __importStar(require("@solana/web3.js"));
const splToken = __importStar(require("@solana/spl-token"));
const metaplex = __importStar(require("@metaplex-foundation/mpl-token-metadata"));
const certificate = __importStar(require("@cardinal/certificates"));
const index_1 = require("./index");
const constants_1 = require("./constants");
const anchor_1 = require("@project-serum/anchor");
async function withInitStakeEntry(connection, wallet, transaction, params) {
    const provider = new anchor.Provider(connection, wallet, {});
    const stakePool = new anchor.Program(constants_1.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [stakeEntryId, bump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(constants_1.STAKE_ENTRY_SEED),
        params.originalMint.toBytes(),
    ], stakePool.programId);
    const [mintManagerId, mintManagerBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(certificate.MINT_MANAGER_SEED),
        params.certificateMint.toBytes(),
    ], certificate.CERTIFICATE_PROGRAM_ID);
    const certificateMintTokenAccount = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, params.certificateMint, stakeEntryId, true);
    const [certificateMintMetadataId] = await web3.PublicKey.findProgramAddress([
        Buffer.from(metaplex.MetadataProgram.PREFIX),
        metaplex.MetadataProgram.PUBKEY.toBuffer(),
        params.certificateMint.toBuffer(),
    ], metaplex.MetadataProgram.PUBKEY);
    const mintBalanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(provider.connection);
    transaction.add(web3.SystemProgram.createAccount({
        fromPubkey: wallet.publicKey,
        newAccountPubkey: params.certificateMint,
        lamports: mintBalanceNeeded,
        space: splToken.MintLayout.span,
        programId: splToken.TOKEN_PROGRAM_ID,
    }));
    transaction.add(stakePool.instruction.initEntry({
        bump,
        mintManagerBump,
        name: params.name,
        symbol: params.symbol,
        tribe: params.tribe,
        hungry: params.hungry,
    }, {
        accounts: {
            stakeEntry: stakeEntryId,
            originalMint: params.originalMint,
            payer: wallet.publicKey,
            certificateMint: params.certificateMint,
            certificateMintTokenAccount: certificateMintTokenAccount,
            certifiacteMintMetadata: certificateMintMetadataId,
            mintManager: mintManagerId,
            // programs
            certificateProgram: certificate.CERTIFICATE_PROGRAM_ID,
            tokenMetadataProgram: metaplex.MetadataProgram.PUBKEY,
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
            associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            rent: web3.SYSVAR_RENT_PUBKEY,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
exports.withInitStakeEntry = withInitStakeEntry;
async function withStake(connection, wallet, transaction, params) {
    const provider = new anchor.Provider(connection, wallet, {});
    const stakePool = new anchor.Program(constants_1.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [stakeEntryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(constants_1.STAKE_ENTRY_SEED),
        params.originalMint.toBytes(),
    ], stakePool.programId);
    const stakeEntryOriginalMintTokenAccountId = await (0, index_1.withFindOrInitAssociatedTokenAccount)(transaction, provider.connection, params.originalMint, stakeEntryId, wallet.publicKey, true);
    const stakeEntryCertificateMintTokenAccountId = await (0, index_1.withFindOrInitAssociatedTokenAccount)(transaction, provider.connection, params.certificateMint, stakeEntryId, wallet.publicKey, true);
    const [certificateId, certificateBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode("certificate"),
        params.certificateMint.toBytes(),
    ], certificate.CERTIFICATE_PROGRAM_ID);
    const certificateTokenAccountId = await (0, index_1.withFindOrInitAssociatedTokenAccount)(transaction, provider.connection, params.certificateMint, certificateId, wallet.publicKey, true);
    const [mintManagerId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode("mint-manager"),
        params.certificateMint.toBytes(),
    ], certificate.CERTIFICATE_PROGRAM_ID);
    transaction.add(stakePool.instruction.stake({
        certificateBump,
    }, {
        accounts: {
            stakeEntry: stakeEntryId,
            originalMint: params.originalMint,
            certificateMint: params.certificateMint,
            // sake entry
            stakeEntryOriginalMintTokenAccount: stakeEntryOriginalMintTokenAccountId,
            stakeEntryCertificateMintTokenAccount: stakeEntryCertificateMintTokenAccountId,
            // user
            user: wallet.publicKey,
            userOriginalMintTokenAccount: params.userOriginalMintTokenAccountId,
            userCertificateMintTokenAccount: params.userCertificateMintTokenAccountId,
            // cpi
            certificateProgram: certificate.CERTIFICATE_PROGRAM_ID,
            certificate: certificateId,
            mintManager: mintManagerId,
            certificateTokenAccount: certificateTokenAccountId,
            // programs
            associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
            rent: web3.SYSVAR_RENT_PUBKEY,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
exports.withStake = withStake;
async function withUnstake(connection, wallet, transaction, params) {
    const provider = new anchor.Provider(connection, wallet, {});
    const stakePool = new anchor.Program(constants_1.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [stakeEntryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(constants_1.STAKE_ENTRY_SEED),
        params.originalMint.toBytes(),
    ], stakePool.programId);
    const stakeEntryAccount = await stakePool.account.stakeEntry.fetch(stakeEntryId);
    const certificateMintId = stakeEntryAccount.certificateMint;
    const originalMintId = stakeEntryAccount.originalMint;
    const stakeEntryOriginalMintTokenAccountId = await (0, index_1.withFindOrInitAssociatedTokenAccount)(transaction, provider.connection, originalMintId, stakeEntryId, wallet.publicKey, true);
    const stakeEntryCertificateMintTokenAccountId = await (0, index_1.withFindOrInitAssociatedTokenAccount)(transaction, provider.connection, certificateMintId, stakeEntryId, wallet.publicKey, true);
    // revoke certificate
    await certificate.withRevokeCertificateV2(connection, wallet, transaction, {
        certificateMint: params.certificateMint,
        revokeRecipient: constants_1.CRANK_PUB_KEY,
    });
    transaction.add(stakePool.instruction.unstake({
        accounts: {
            stakeEntry: stakeEntryId,
            originalMint: originalMintId,
            certificateMint: certificateMintId,
            // sake entry
            stakeEntryOriginalMintTokenAccount: stakeEntryOriginalMintTokenAccountId,
            stakeEntryCertificateMintTokenAccount: stakeEntryCertificateMintTokenAccountId,
            // user
            user: wallet.publicKey,
            userOriginalMintTokenAccount: params.userOriginalMintTokenAccountId,
            userCertificateMintTokenAccount: params.userCertificateMintTokenAccountId,
            // programs
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
        },
    }));
    return transaction;
}
exports.withUnstake = withUnstake;
async function withGroup(connection, wallet, transaction, params) {
    const provider = new anchor.Provider(connection, wallet, {});
    const stakePoolProgram = new anchor_1.Program(constants_1.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [groupStakeEntryId, bump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(constants_1.GROUP_ENTRY_SEED),
        params.stakeEntryOne.toBytes(),
        params.stakeEntryTwo.toBytes(),
        params.stakeEntryThree.toBytes(),
        params.stakeEntryFour.toBytes(),
    ], stakePoolProgram.programId);
    transaction.add(stakePoolProgram.instruction.group({
        bump: bump,
    }, {
        accounts: {
            groupEntry: groupStakeEntryId,
            stakeEntryOne: params.stakeEntryOne,
            stakeEntryTwo: params.stakeEntryTwo,
            stakeEntryThree: params.stakeEntryThree,
            stakeEntryFour: params.stakeEntryFour,
            staker: wallet.publicKey,
            payer: wallet.publicKey,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
exports.withGroup = withGroup;
async function withUngroup(connection, wallet, transaction, params) {
    const provider = new anchor.Provider(connection, wallet, {});
    const stakePoolProgram = new anchor_1.Program(constants_1.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    transaction.add(stakePoolProgram.instruction.ungroup({
        accounts: {
            groupEntry: params.groupStakeEntryId,
            stakeEntryOne: params.stakeEntryOne,
            stakeEntryTwo: params.stakeEntryTwo,
            stakeEntryThree: params.stakeEntryThree,
            stakeEntryFour: params.stakeEntryFour,
            authority: wallet.publicKey,
        },
    }));
    return transaction;
}
exports.withUngroup = withUngroup;
//# sourceMappingURL=transaction.js.map