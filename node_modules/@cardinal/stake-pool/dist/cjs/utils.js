"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJamboLevel = exports.getActiveStakeSeconds = exports.getLevelNumber = exports.secondsFromLevel = exports.GROUP_AND_HUNGRY_THRESHOLD = exports.withFindOrInitAssociatedTokenAccount = exports.createMint = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const anchor_1 = require("@project-serum/anchor");
const splToken = __importStar(require("@solana/spl-token"));
const _1 = require(".");
const createMint = async (connection, creator, recipient, amount = 1) => {
    const fromAirdropSignature = await connection.requestAirdrop(creator.publicKey, web3.LAMPORTS_PER_SOL);
    await connection.confirmTransaction(fromAirdropSignature);
    const mint = await splToken.Token.createMint(connection, creator, creator.publicKey, creator.publicKey, 1, splToken.TOKEN_PROGRAM_ID);
    const tokenAccount = await mint.createAssociatedTokenAccount(recipient);
    await mint.mintTo(tokenAccount, creator.publicKey, [], amount);
    return [tokenAccount, mint];
};
exports.createMint = createMint;
async function withFindOrInitAssociatedTokenAccount(transaction, connection, mint, owner, payer, allowOwnerOffCurve) {
    const associatedAddress = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, owner, allowOwnerOffCurve);
    const account = await connection.getAccountInfo(associatedAddress);
    if (!account) {
        transaction.add(splToken.Token.createAssociatedTokenAccountInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, associatedAddress, owner, payer));
    }
    return associatedAddress;
}
exports.withFindOrInitAssociatedTokenAccount = withFindOrInitAssociatedTokenAccount;
const LEVEL_1_10_PCT = 1.4;
const TIER_2_LEVEL = 10;
const LEVEL_11_17_PCT = 1.25;
const TIER_3_LEVEL = 17;
const LEVEL_18_25_PCT = 1.15;
exports.GROUP_AND_HUNGRY_THRESHOLD = 10000;
/**
 * Calculates the total number of seconds a jambo has been
 * staked on the level up pool given its level number
 * @param level
 * @returns
 */
const secondsFromLevel = (level) => {
    if (!level)
        return 0;
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    for (let i = 1; i < level; i++) {
        let multiplier = LEVEL_1_10_PCT;
        if (i >= TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i >= TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return requiredSeconds;
};
exports.secondsFromLevel = secondsFromLevel;
/**
 * Calculate actual level of jambo given the total seconds
 * it has been staked on the level up pool
 * @param totalStakeSeconds
 * @returns
 */
const getLevelNumber = (totalStakeSeconds) => {
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    if (!totalStakeSeconds)
        return [0, requiredSeconds];
    for (let i = 0; i <= 25; i++) {
        if (totalStakeSeconds < Math.floor(requiredSeconds)) {
            return [i, requiredSeconds];
        }
        let multiplier = LEVEL_1_10_PCT;
        if (i + 1 >= TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i + 1 >= TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return [25, requiredSeconds];
};
exports.getLevelNumber = getLevelNumber;
/**
 * Gets the number of active stake seconds
 * on the level up pool given a stake entry
 * @param stakeEntryData
 * @param UTCNow
 * @returns
 */
function getActiveStakeSeconds(stakeEntryData, UTCNow) {
    const lastStakedAt = (stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.lastStakedAt.toNumber()) || UTCNow;
    const stakeBoost = ((stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.stakeBoost) || new anchor_1.BN(1)).toNumber();
    const totalStakeSeconds = ((stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.totalStakeSeconds) || new anchor_1.BN(0)).toNumber();
    const stakedTime = (stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.lastStaker.toString()) !==
        web3.PublicKey.default.toString()
        ? totalStakeSeconds +
            (stakeBoost /
                (stakeBoost >= exports.GROUP_AND_HUNGRY_THRESHOLD ? 10000 : 100)) *
                (UTCNow - lastStakedAt)
        : totalStakeSeconds;
    return stakedTime;
}
exports.getActiveStakeSeconds = getActiveStakeSeconds;
/**
 * Gets the level number of a jambo based on its original mint id
 * @param totalStakeSeconds
 * @returns
 */
const getJamboLevel = async (connection, mintIds) => {
    let stakeEntries = await (0, _1.getStakeEntries)(connection, mintIds);
    return stakeEntries.map((entry) => { var _a; return (0, exports.getLevelNumber)((_a = entry.parsed.totalStakeSeconds) === null || _a === void 0 ? void 0 : _a.toNumber()); });
};
exports.getJamboLevel = getJamboLevel;
//# sourceMappingURL=utils.js.map