"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGroupStakeEntry = exports.getStakeEntriesForUser = exports.getAllStakeEntries = exports.getStakeEntries = exports.getStakeEntry = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const constants_1 = require("./constants");
const anchor_1 = require("@project-serum/anchor");
const constants_2 = require("./constants");
const _1 = require(".");
async function getStakeEntry(connection, originalMint) {
    const provider = new anchor_1.Provider(connection, null, {});
    const stakePool = new anchor_1.Program(constants_2.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [stakeEntryId] = await web3.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode(_1.STAKE_ENTRY_SEED), originalMint.toBytes()], stakePool.programId);
    const parsed = await stakePool.account.stakeEntry.fetch(stakeEntryId);
    return {
        parsed,
        pubkey: stakeEntryId,
    };
}
exports.getStakeEntry = getStakeEntry;
const getStakeEntries = async (connection, stakeEntryIds) => {
    const provider = new anchor_1.Provider(connection, null, {});
    const stakePoolProgram = new anchor_1.Program(constants_2.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    let stakeEntries = [];
    try {
        stakeEntries = await stakePoolProgram.account.stakeEntry.fetchMultiple(stakeEntryIds);
    }
    catch (e) {
        console.log(e);
    }
    return stakeEntries.map((tm, i) => ({
        parsed: tm,
        pubkey: stakeEntryIds[i],
    }));
};
exports.getStakeEntries = getStakeEntries;
const getAllStakeEntries = async (connection, user) => {
    const programAccounts = await connection.getProgramAccounts(constants_1.STAKE_POOL_PROGRAM_ID, user
        ? {
            filters: [
                { memcmp: { offset: constants_2.STAKER_OFFSET, bytes: user.toBase58() } },
            ],
        }
        : {});
    const stakeEntryDatas = [];
    const coder = new anchor_1.BorshAccountsCoder(constants_2.STAKE_POOL_IDL);
    programAccounts.forEach((account) => {
        try {
            const stakeEntryData = coder.decode("stakeEntry", account.account.data);
            if (stakeEntryData &&
                stakeEntryData.lastStaker.toString() !=
                    web3.PublicKey.default.toBase58()) {
                stakeEntryDatas.push({
                    ...account,
                    parsed: stakeEntryData,
                });
            }
        }
        catch (e) {
            // console.log(`Failed to decode token manager data`);
        }
    });
    return stakeEntryDatas.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
};
exports.getAllStakeEntries = getAllStakeEntries;
const getStakeEntriesForUser = async (connection, user) => {
    const programAccounts = await connection.getProgramAccounts(constants_1.STAKE_POOL_PROGRAM_ID, {
        filters: [{ memcmp: { offset: constants_2.STAKER_OFFSET, bytes: user.toBase58() } }],
    });
    const stakeEntryDatas = [];
    const coder = new anchor_1.BorshAccountsCoder(constants_2.STAKE_POOL_IDL);
    programAccounts.forEach((account) => {
        try {
            const stakeEntryData = coder.decode("stakeEntry", account.account.data);
            if (stakeEntryData) {
                stakeEntryDatas.push({
                    ...account,
                    parsed: stakeEntryData,
                });
            }
        }
        catch (e) {
            // console.log(`Failed to decode token manager data`);
        }
    });
    return stakeEntryDatas.sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()));
};
exports.getStakeEntriesForUser = getStakeEntriesForUser;
async function getGroupStakeEntry(connection, stakeEntryOne, stakeEntryTwo, stakeEntryThree, stakeEntryFour) {
    const provider = new anchor_1.Provider(connection, null, {});
    const stakePool = new anchor_1.Program(constants_2.STAKE_POOL_IDL, constants_1.STAKE_POOL_PROGRAM_ID, provider);
    const [groupStakeEntryId] = await web3.PublicKey.findProgramAddress([
        anchor_1.utils.bytes.utf8.encode(_1.GROUP_ENTRY_SEED),
        stakeEntryOne.toBytes(),
        stakeEntryTwo.toBytes(),
        stakeEntryThree.toBytes(),
        stakeEntryFour.toBytes(),
    ], stakePool.programId);
    const parsed = await stakePool.account.groupStakeEntry.fetch(groupStakeEntryId);
    return {
        parsed,
        pubkey: groupStakeEntryId,
    };
}
exports.getGroupStakeEntry = getGroupStakeEntry;
//# sourceMappingURL=accounts.js.map