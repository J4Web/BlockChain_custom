import * as web3 from "@solana/web3.js";
import * as splToken from "@solana/spl-token";
import { AccountData, StakeEntryData } from "./constants";
export declare const createMint: (connection: web3.Connection, creator: web3.Keypair, recipient: web3.PublicKey, amount?: number) => Promise<[web3.PublicKey, splToken.Token]>;
export declare function withFindOrInitAssociatedTokenAccount(transaction: web3.Transaction, connection: web3.Connection, mint: web3.PublicKey, owner: web3.PublicKey, payer: web3.PublicKey, allowOwnerOffCurve?: boolean): Promise<web3.PublicKey>;
export declare const GROUP_AND_HUNGRY_THRESHOLD = 10000;
/**
 * Calculates the total number of seconds a jambo has been
 * staked on the level up pool given its level number
 * @param level
 * @returns
 */
export declare const secondsFromLevel: (level: number | undefined) => number;
/**
 * Calculate actual level of jambo given the total seconds
 * it has been staked on the level up pool
 * @param totalStakeSeconds
 * @returns
 */
export declare const getLevelNumber: (totalStakeSeconds: number | undefined) => [number, number];
/**
 * Gets the number of active stake seconds
 * on the level up pool given a stake entry
 * @param stakeEntryData
 * @param UTCNow
 * @returns
 */
export declare function getActiveStakeSeconds(stakeEntryData: AccountData<StakeEntryData> | null | undefined, UTCNow: number): number;
/**
 * Gets the level number of a jambo based on its original mint id
 * @param totalStakeSeconds
 * @returns
 */
export declare const getJamboLevel: (connection: web3.Connection, mintIds: web3.PublicKey[]) => Promise<[number, number][]>;
//# sourceMappingURL=utils.d.ts.map