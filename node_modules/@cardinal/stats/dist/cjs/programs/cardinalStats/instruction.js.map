{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/cardinalStats/instruction.ts"],"names":[],"mappings":";;;;AAAA,kDAAgE;AAEhE,8DAAwC;AAGxC,2CAAuD;AAEhD,MAAM,cAAc,GAAG,CAC5B,UAA2B,EAC3B,MAAc,EACd,YAA4B,EAC5B,IAAY,EACiB,EAAE;IAC/B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,YAAY,GAAG,IAAI,gBAAO,CAC9B,qBAAS,EACT,yBAAa,EACb,QAAQ,CACT,CAAC;IACF,OAAO,YAAY,CAAC,WAAW,CAAC,cAAc,CAC5C;QACE,IAAI,EAAE,IAAI;KACX,EACD;QACE,QAAQ,EAAE;YACR,UAAU,EAAE,YAAY;YACxB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS;SAC5C;KACF,CACF,CAAC;AACJ,CAAC,CAAC;AAxBW,QAAA,cAAc,kBAwBzB;AAEK,MAAM,gBAAgB,GAAG,CAC9B,UAA2B,EAC3B,MAAc,EACd,YAA4B,EAC5B,KAAa,EACgB,EAAE;IAC/B,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,YAAY,GAAG,IAAI,gBAAO,CAC9B,qBAAS,EACT,yBAAa,EACb,QAAQ,CACT,CAAC;IACF,OAAO,YAAY,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,EAAE;QACtD,QAAQ,EAAE;YACR,UAAU,EAAE,YAAY;YACxB,SAAS,EAAE,MAAM,CAAC,SAAS;SAC5B;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAlBW,QAAA,gBAAgB,oBAkB3B","sourcesContent":["import { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as web3 from \"@solana/web3.js\";\n\nimport type { STATS_PROGRAM } from \"./constants\";\nimport { STATS_ADDRESS, STATS_IDL } from \"./constants\";\n\nexport const initStatsEntry = (\n  connection: web3.Connection,\n  wallet: Wallet,\n  statsEntryId: web3.PublicKey,\n  name: string\n): web3.TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const statsProgram = new Program<STATS_PROGRAM>(\n    STATS_IDL,\n    STATS_ADDRESS,\n    provider\n  );\n  return statsProgram.instruction.initStatsEntry(\n    {\n      name: name,\n    },\n    {\n      accounts: {\n        statsEntry: statsEntryId,\n        authority: wallet.publicKey,\n        systemProgram: web3.SystemProgram.programId,\n      },\n    }\n  );\n};\n\nexport const updateStatsEntry = (\n  connection: web3.Connection,\n  wallet: Wallet,\n  statsEntryId: web3.PublicKey,\n  value: string\n): web3.TransactionInstruction => {\n  const provider = new AnchorProvider(connection, wallet, {});\n  const statsProgram = new Program<STATS_PROGRAM>(\n    STATS_IDL,\n    STATS_ADDRESS,\n    provider\n  );\n  return statsProgram.instruction.updateStatsEntry(value, {\n    accounts: {\n      statsEntry: statsEntryId,\n      authority: wallet.publicKey,\n    },\n  });\n};\n"]}