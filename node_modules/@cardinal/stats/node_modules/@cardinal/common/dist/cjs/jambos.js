"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActiveStakeSeconds = exports.getLevelNumber = exports.secondsFromLevel = exports.GROUP_AND_HUNGRY_THRESHOLD = void 0;
const tslib_1 = require("tslib");
const anchor_1 = require("@project-serum/anchor");
const web3 = tslib_1.__importStar(require("@solana/web3.js"));
const LEVEL_1_10_PCT = 1.4;
const TIER_2_LEVEL = 10;
const LEVEL_11_17_PCT = 1.25;
const TIER_3_LEVEL = 17;
const LEVEL_18_25_PCT = 1.15;
exports.GROUP_AND_HUNGRY_THRESHOLD = 10000;
/**
 * Calculates the total number of seconds a jambo has been
 * staked on the level up pool given its level number
 * @param level
 * @returns
 */
const secondsFromLevel = (level) => {
    if (!level)
        return 0;
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    for (let i = 1; i < level; i++) {
        let multiplier = LEVEL_1_10_PCT;
        if (i > TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i > TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return requiredSeconds;
};
exports.secondsFromLevel = secondsFromLevel;
/**
 * Calculate actual level of jambo given the total seconds
 * it has been staked on the level up pool
 * @param totalStakeSeconds
 * @returns
 */
const getLevelNumber = (totalStakeSeconds) => {
    let requiredSeconds = 4 * 60 * 60;
    let difference = requiredSeconds;
    if (!totalStakeSeconds)
        return [0, requiredSeconds];
    const level = 0;
    for (let i = 0; i <= 25; i++) {
        if (totalStakeSeconds < Math.floor(requiredSeconds)) {
            return [i, requiredSeconds];
        }
        let multiplier = LEVEL_1_10_PCT;
        if (i >= TIER_2_LEVEL) {
            multiplier = LEVEL_11_17_PCT;
        }
        if (i >= TIER_3_LEVEL) {
            multiplier = LEVEL_18_25_PCT;
        }
        difference = difference * multiplier;
        requiredSeconds += difference;
    }
    return [level, requiredSeconds];
};
exports.getLevelNumber = getLevelNumber;
/**
 * Gets the number of active stake seconds
 * on the level up pool given a stake entry
 * @param stakeEntryData
 * @param UTCNow
 * @returns
 */
function getActiveStakeSeconds(stakeEntryData, UTCNow) {
    const lastStakedAt = (stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.lastStakedAt.toNumber()) || UTCNow;
    const stakeBoost = ((stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.stakeBoost) || new anchor_1.BN(1)).toNumber();
    const totalStakeSeconds = ((stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.totalStakeSeconds) || new anchor_1.BN(0)).toNumber();
    const stakedTime = (stakeEntryData === null || stakeEntryData === void 0 ? void 0 : stakeEntryData.parsed.lastStaker.toString()) !==
        web3.PublicKey.default.toString()
        ? totalStakeSeconds +
            (stakeBoost /
                (stakeBoost >= exports.GROUP_AND_HUNGRY_THRESHOLD ? 10000 : 100)) *
                (UTCNow - lastStakedAt)
        : totalStakeSeconds;
    return stakedTime;
}
exports.getActiveStakeSeconds = getActiveStakeSeconds;
//# sourceMappingURL=jambos.js.map