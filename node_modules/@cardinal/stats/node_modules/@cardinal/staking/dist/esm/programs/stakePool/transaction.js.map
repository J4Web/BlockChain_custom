{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/transaction.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,OAAO,EACP,aAAa,EACb,oCAAoC,GACrC,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAE,MAAM,2CAA2C,CAAC;AACzE,OAAO,EAAE,8BAA8B,EAAE,MAAM,wDAAwD,CAAC;AACxG,OAAO,EACL,iBAAiB,EACjB,uBAAuB,EACvB,2BAA2B,GAC5B,MAAM,4DAA4D,CAAC;AACpE,OAAO,KAAK,QAAQ,MAAM,yCAAyC,CAAC;AACpE,OAAO,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAC;AAI3C,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AACpE,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,eAAe,EACf,cAAc,EACd,kBAAkB,EAClB,cAAc,EACd,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,KAAK,EACL,OAAO,EACP,eAAe,EACf,uBAAuB,GACxB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAC1D,OAAO,EACL,wBAAwB,EACxB,+BAA+B,GAChC,MAAM,SAAS,CAAC;AAEjB;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EAC+B,EAAE;IAC/C,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,gBAAgB,EAAE,CAAC;IAChD,WAAW,CAAC,GAAG,CACb,kBAAkB,CAAC,UAAU,EAAE,MAAM,EAAE;QACrC,YAAY,EAAE,YAAY;KAC3B,CAAC,CACH,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AACrC,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MASC,EAC4C,EAAE;IAC/C,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,gBAAgB,EAAE,CAAC;IAChD,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,CAC9C,iBAAiB,CAAC,UAAU,CAAC,CAC9B,CAAC;IACF,MAAM,UAAU,GAAG,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAC,KAAK,KAAI,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAE7D,IAAI,CAAC,cAAc,EAAE;QACnB,WAAW,CAAC,GAAG,CACb,kBAAkB,CAAC,UAAU,EAAE,MAAM,EAAE;YACrC,YAAY,EAAE,YAAY;SAC3B,CAAC,CACH,CAAC;KACH;IAED,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,eAAe,CAAC,UAAU,CAAC,CAAC;IACxD,WAAW,CAAC,GAAG,CACb,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;QAChC,YAAY,EAAE,YAAY;QAC1B,WAAW,EAAE,WAAW;QACxB,gBAAgB,EAAE,MAAM,CAAC,gBAAgB,IAAI,EAAE;QAC/C,mBAAmB,EAAE,MAAM,CAAC,mBAAmB,IAAI,EAAE;QACrD,qBAAqB,EAAE,MAAM,CAAC,qBAAqB;QACnD,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE;QACrC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE;QAC/B,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,KAAK;QAC1C,eAAe,EAAE,MAAM,CAAC,eAAe,IAAI,IAAI;QAC/C,eAAe,EAAE,MAAM,CAAC,eAAe,IAAI,IAAI;KAChD,CAAC,CACH,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACpC,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAGC,EAC4C,EAAE;IAC/C,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,qBAAqB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAChE,wBAAwB,CACtB,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,cAAc,CACtB;QACD,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC;KAChD,CAAC,CAAC;IAEH,WAAW,CAAC,GAAG,CACb,MAAM,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE;QACvC,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,YAAY,EAAE,YAAY;QAC1B,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,qBAAqB,EAAE,qBAAqB;KAC7C,CAAC,CACH,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AACrC,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAGC,EAC0B,EAAE;IAC7B,WAAW,CAAC,GAAG,CACb,MAAM,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE;QAC5C,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,cAAc,EAAE,MAAM,CAAC,cAAc;KACtC,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAOC,EAC0C,EAAE;IAC7C,MAAM,CAAC,CAAC,aAAa,CAAC,EAAE,sBAAsB,EAAE,mBAAmB,CAAC,GAClE,MAAM,OAAO,CAAC,GAAG,CAAC;QAChB,iBAAiB,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC;QACpD,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC;QAC/C,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC;KAC5D,CAAC,CAAC;IAEL,MAAM,iCAAiC,GAAG,MAAM,OAAO,CACrD,MAAM,CAAC,gBAAgB,CAAC,SAAS,EACjC,MAAM,CAAC,YAAY,EACnB,IAAI,CACL,CAAC;IAEF,WAAW,CAAC,GAAG,CACb,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;QAChC,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,qBAAqB,EAAE,sBAAsB;QAC7C,iCAAiC,EAAE,iCAAiC;QACpE,WAAW,EAAE,MAAM,CAAC,gBAAgB,CAAC,SAAS;QAC9C,mBAAmB,EAAE,mBAAmB;QACxC,aAAa,EAAE,aAAa;QAC5B,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,MAAM,EAAE,MAAM,CAAC,MAAM;KACtB,CAAC,CACH,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAChD,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAMC,EAC0B,EAAE;IAC7B,IACE,MAAM,CAAC,WAAW,KAAK,WAAW,CAAC,QAAQ;QAC3C,CAAC,MAAM,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EACrE;QACA,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;KACH;IAED,MAAM,qCAAqC,GACzC,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,MAAM,CAAC,aAAa,EACpB,CACE,MAAM,uBAAuB,CAAC,MAAM,CAAC,aAAa,CAAC,CACpD,CAAC,CAAC,CAAC,EACJ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEJ,WAAW,CAAC,GAAG,CACb,MAAM,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE;QACzC,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,qCAAqC,EACnC,qCAAqC;QACvC,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,aAAa,EAAE,MAAM,CAAC,aAAa;QACnC,WAAW,EAAE,MAAM,CAAC,WAAW;KAChC,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAKC,EAC0B,EAAE;IAC7B,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,wBAAwB,CACnD,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,cAAc,CACtB,CAAC;IACF,MAAM,oCAAoC,GACxC,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,MAAM,CAAC,cAAc,EACrB,YAAY,EACZ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEJ,WAAW,CAAC,GAAG,CACb,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE;QACxB,YAAY,EAAE,YAAY;QAC1B,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,YAAY,EAAE,MAAM,CAAC,cAAc;QACnC,oCAAoC,EAClC,oCAAoC;QACtC,8BAA8B,EAAE,MAAM,CAAC,8BAA8B;QACrE,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;KACnC,CAAC,CACH,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAGC,EAC0B,EAAE;IAC7B,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAChE,wBAAwB,CACtB,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,cAAc,CACtB;QACD,MAAM,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC;KAClD,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,EAAE,qBAAqB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAChE,aAAa,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAC5D,aAAa,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;KAC3E,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;IAEzE,IACE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe;QACpC,aAAa,CAAC,MAAM,CAAC,eAAe,KAAK,CAAC;QAC1C,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAC,oBAAoB;YAC1C,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI;gBACf,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,EAAE;gBACrD,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe;YACpC,aAAa,CAAC,MAAM,CAAC,eAAe,KAAK,CAAC;YAC1C,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAC,YAAY;gBAClC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE;oBAC/D,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAC5C;QACA,qCAAqC;QACrC,MAAM,qBAAqB,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE;YAC3D,YAAY,EAAE,YAAY;SAC3B,CAAC,CAAC;KACJ;IAED,MAAM,oCAAoC,GACxC,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,MAAM,CAAC,cAAc,EACrB,YAAY,EACZ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEJ,MAAM,8BAA8B,GAClC,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,SAAS,CACjB,CAAC;IAEJ,MAAM,iBAAiB,GAAG,MAAM,+BAA+B,CAC7D,WAAW,EACX,UAAU,EACV,MAAM,EACN,YAAY,EACZ,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAC,SAAS,CACjC,CAAC;IAEF,WAAW,CAAC,GAAG,CACb,OAAO,CAAC,UAAU,EAAE,MAAM,EAAE;QAC1B,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,YAAY,EAAE,YAAY;QAC1B,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,IAAI,EAAE,MAAM,CAAC,SAAS;QACtB,kCAAkC,EAAE,oCAAoC;QACxE,4BAA4B,EAAE,8BAA8B;QAC5D,iBAAiB;KAClB,CAAC,CACH,CAAC;IAEF,6BAA6B;IAC7B,IAAI,qBAAqB,EAAE;QACzB,MAAM,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE;YACtD,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,YAAY,EAAE,YAAY;SAC3B,CAAC,CAAC;KACJ;IAED,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAUC,EACmC,EAAE;IACtC,WAAW,CAAC,GAAG,CACb,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE;QAClC,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;QACzC,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;QAC/C,qBAAqB,EAAE,MAAM,CAAC,qBAAqB;QACnD,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,eAAe,EAAE,MAAM,CAAC,eAAe;KACxC,CAAC,CACH,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,CACzC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAGC,EACiB,EAAE;IACpB,WAAW,CAAC,GAAG,CACb,uBAAuB,CAAC,UAAU,EAAE,MAAM,EAAE;QAC1C,WAAW,EAAE,MAAM,CAAC,YAAY;QAChC,UAAU,EAAE,MAAM,CAAC,UAAU;KAC9B,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAEC,EAC0B,EAAE;IAC7B,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,CAC9C,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,YAAY,CAAC,CAC/C,CAAC;IACF,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,eAAe,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAC5E;IAED,IACE,CAAC,cAAc,CAAC,MAAM,CAAC,gBAAgB;QACvC,CAAC,cAAc,CAAC,MAAM,CAAC,mBAAmB,EAC1C;QACA,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACzC,OAAO,WAAW,CAAC;KACpB;IAED,MAAM,WAAW,GACf,cAAc,CAAC,MAAM,CAAC,SAAS,IAAI,cAAc,CAAC,MAAM,CAAC,gBAAgB;QACvE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS;QACjC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC;IAEzC,MAAM,cAAc,GAAG,MAAM,2BAA2B,CACtD,UAAU,EACV,WAAW,CACZ,CAAC;IACF,MAAM,gBAAgB,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,CAChD,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,EAAE,cAAc,CAAC,CAClE,CAAC;IAEF,IAAI,CAAC,gBAAgB,EAAE;QACrB,OAAO,WAAW,CAAC;KACpB;IAED,MAAM,0BAA0B,GAAG,MAAM,8BAA8B,CACrE,WAAW,EACX,UAAU,EACV,MAAM,EACN,gBAAgB,CACjB,CAAC;IAEF,WAAW,CAAC,GAAG,CACb,MAAM,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE;QAC1C,UAAU,EAAE,MAAM,CAAC,YAAY;QAC/B,WAAW,EAAE,WAAW;QACxB,gBAAgB,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI;QAC9C,iBAAiB,EAAE,gBAAgB,CAAC,MAAM,CAAC,KAAK;QAChD,cAAc,EAAE,0BAA0B;KAC3C,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAEC,EACiB,EAAE;IACpB,WAAW,CAAC,GAAG,CACb,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE;QACjC,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,WAA6B,EAC7B,UAA2B,EAC3B,MAAc,EACd,MAGC,EACiB,EAAE;IACpB,WAAW,CAAC,GAAG,CACb,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE;QAClC,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC,CACH,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import {\n  findAta,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { tokenManager } from \"@cardinal/token-manager/dist/cjs/programs\";\nimport { withRemainingAccountsForReturn } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport {\n  findMintManagerId,\n  findTokenManagerAddress,\n  tokenManagerAddressFromMint,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport * as metaplex from \"@metaplex-foundation/mpl-token-metadata\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type * as web3 from \"@solana/web3.js\";\n\nimport { getMintSupply } from \"../../utils\";\nimport { getRewardDistributor } from \"../rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../rewardDistributor/pda\";\nimport { withClaimRewards } from \"../rewardDistributor/transaction\";\nimport { getPoolIdentifier, getStakeEntry, getStakePool } from \"./accounts\";\nimport { ReceiptType } from \"./constants\";\nimport {\n  authorizeStakeEntry,\n  claimReceiptMint,\n  closeStakeEntry,\n  closeStakePool,\n  initPoolIdentifier,\n  initStakeEntry,\n  initStakeMint,\n  initStakePool,\n  returnReceiptMint,\n  stake,\n  unstake,\n  updateStakePool,\n  updateTotalStakeSeconds,\n} from \"./instruction\";\nimport { findIdentifierId, findStakePoolId } from \"./pda\";\nimport {\n  findStakeEntryIdFromMint,\n  withRemainingAccountsForUnstake,\n} from \"./utils\";\n\n/**\n * Add init pool identifier instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @returns Transaction, public key for the created pool identifier\n */\nexport const withInitPoolIdentifier = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet\n): Promise<[web3.Transaction, web3.PublicKey]> => {\n  const [identifierId] = await findIdentifierId();\n  transaction.add(\n    initPoolIdentifier(connection, wallet, {\n      identifierId: identifierId,\n    })\n  );\n  return [transaction, identifierId];\n};\n\nexport const withInitStakePool = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    requiresCollections?: web3.PublicKey[];\n    requiresCreators?: web3.PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n  }\n): Promise<[web3.Transaction, web3.PublicKey]> => {\n  const [identifierId] = await findIdentifierId();\n  const identifierData = await tryGetAccount(() =>\n    getPoolIdentifier(connection)\n  );\n  const identifier = identifierData?.parsed.count || new BN(1);\n\n  if (!identifierData) {\n    transaction.add(\n      initPoolIdentifier(connection, wallet, {\n        identifierId: identifierId,\n      })\n    );\n  }\n\n  const [stakePoolId] = await findStakePoolId(identifier);\n  transaction.add(\n    initStakePool(connection, wallet, {\n      identifierId: identifierId,\n      stakePoolId: stakePoolId,\n      requiresCreators: params.requiresCreators || [],\n      requiresCollections: params.requiresCollections || [],\n      requiresAuthorization: params.requiresAuthorization,\n      overlayText: params.overlayText || \"\",\n      imageUri: params.imageUri || \"\",\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake || false,\n      cooldownSeconds: params.cooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n    })\n  );\n  return [transaction, stakePoolId];\n};\n\n/**\n * Add init stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created stake entry\n */\nexport const withInitStakeEntry = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n  }\n): Promise<[web3.Transaction, web3.PublicKey]> => {\n  const [[stakeEntryId], originalMintMetadatId] = await Promise.all([\n    findStakeEntryIdFromMint(\n      connection,\n      wallet.publicKey,\n      params.stakePoolId,\n      params.originalMintId\n    ),\n    metaplex.Metadata.getPDA(params.originalMintId),\n  ]);\n\n  transaction.add(\n    await initStakeEntry(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: stakeEntryId,\n      originalMintId: params.originalMintId,\n      originalMintMetadatId: originalMintMetadatId,\n    })\n  );\n  return [transaction, stakeEntryId];\n};\n\n/**\n * Add authorize stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withAuthorizeStakeEntry = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n  }\n): Promise<web3.Transaction> => {\n  transaction.add(\n    await authorizeStakeEntry(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      originalMintId: params.originalMintId,\n    })\n  );\n  return transaction;\n};\n\n/**\n * Add init stake mint instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, keypair of the created stake mint\n */\nexport const withInitStakeMint = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    stakeEntryId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n    stakeMintKeypair: web3.Keypair;\n    name: string;\n    symbol: string;\n  }\n): Promise<[web3.Transaction, web3.Keypair]> => {\n  const [[mintManagerId], originalMintMetadataId, stakeMintMetadataId] =\n    await Promise.all([\n      findMintManagerId(params.stakeMintKeypair.publicKey),\n      metaplex.Metadata.getPDA(params.originalMintId),\n      metaplex.Metadata.getPDA(params.stakeMintKeypair.publicKey),\n    ]);\n\n  const stakeEntryStakeMintTokenAccountId = await findAta(\n    params.stakeMintKeypair.publicKey,\n    params.stakeEntryId,\n    true\n  );\n\n  transaction.add(\n    initStakeMint(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: params.stakeEntryId,\n      originalMintId: params.originalMintId,\n      originalMintMetadatId: originalMintMetadataId,\n      stakeEntryStakeMintTokenAccountId: stakeEntryStakeMintTokenAccountId,\n      stakeMintId: params.stakeMintKeypair.publicKey,\n      stakeMintMetadataId: stakeMintMetadataId,\n      mintManagerId: mintManagerId,\n      name: params.name,\n      symbol: params.symbol,\n    })\n  );\n  return [transaction, params.stakeMintKeypair];\n};\n\n/**\n * Add claim receipt mint instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withClaimReceiptMint = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    stakeEntryId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n    receiptMintId: web3.PublicKey;\n    receiptType: ReceiptType;\n  }\n): Promise<web3.Transaction> => {\n  if (\n    params.receiptType === ReceiptType.Original &&\n    (await getMintSupply(connection, params.receiptMintId)).gt(new BN(1))\n  ) {\n    throw new Error(\n      \"Fungible staking and locked reecipt type not supported yet\"\n    );\n  }\n\n  const tokenManagerReceiptMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.receiptMintId,\n      (\n        await findTokenManagerAddress(params.receiptMintId)\n      )[0],\n      wallet.publicKey,\n      true\n    );\n\n  transaction.add(\n    await claimReceiptMint(connection, wallet, {\n      stakeEntryId: params.stakeEntryId,\n      tokenManagerReceiptMintTokenAccountId:\n        tokenManagerReceiptMintTokenAccountId,\n      originalMintId: params.originalMintId,\n      receiptMintId: params.receiptMintId,\n      receiptType: params.receiptType,\n    })\n  );\n  return transaction;\n};\n\n/**\n * Add stake instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withStake = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n    userOriginalMintTokenAccountId: web3.PublicKey;\n    amount?: BN;\n  }\n): Promise<web3.Transaction> => {\n  const [stakeEntryId] = await findStakeEntryIdFromMint(\n    connection,\n    wallet.publicKey,\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const stakeEntryOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      stakeEntryId,\n      wallet.publicKey,\n      true\n    );\n\n  transaction.add(\n    stake(connection, wallet, {\n      stakeEntryId: stakeEntryId,\n      stakePoolId: params.stakePoolId,\n      originalMint: params.originalMintId,\n      stakeEntryOriginalMintTokenAccountId:\n        stakeEntryOriginalMintTokenAccountId,\n      userOriginalMintTokenAccountId: params.userOriginalMintTokenAccountId,\n      amount: params.amount || new BN(1),\n    })\n  );\n\n  return transaction;\n};\n\n/**\n * Add unstake instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withUnstake = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    originalMintId: web3.PublicKey;\n  }\n): Promise<web3.Transaction> => {\n  const [[stakeEntryId], [rewardDistributorId]] = await Promise.all([\n    findStakeEntryIdFromMint(\n      connection,\n      wallet.publicKey,\n      params.stakePoolId,\n      params.originalMintId\n    ),\n    await findRewardDistributorId(params.stakePoolId),\n  ]);\n\n  const [stakeEntryData, rewardDistributorData] = await Promise.all([\n    tryGetAccount(() => getStakeEntry(connection, stakeEntryId)),\n    tryGetAccount(() => getRewardDistributor(connection, rewardDistributorId)),\n  ]);\n\n  const stakePoolData = await getStakePool(connection, params.stakePoolId);\n\n  if (\n    (!stakePoolData.parsed.cooldownSeconds ||\n      stakePoolData.parsed.cooldownSeconds === 0 ||\n      (stakeEntryData?.parsed.cooldownStartSeconds &&\n        Date.now() / 1000 -\n          stakeEntryData.parsed.cooldownStartSeconds.toNumber() >=\n          stakePoolData.parsed.cooldownSeconds)) &&\n    (!stakePoolData.parsed.minStakeSeconds ||\n      stakePoolData.parsed.minStakeSeconds === 0 ||\n      (stakeEntryData?.parsed.lastStakedAt &&\n        Date.now() / 1000 - stakeEntryData.parsed.lastStakedAt.toNumber() >=\n          stakePoolData.parsed.minStakeSeconds))\n  ) {\n    // return receipt mint if its claimed\n    await withReturnReceiptMint(transaction, connection, wallet, {\n      stakeEntryId: stakeEntryId,\n    });\n  }\n\n  const stakeEntryOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      stakeEntryId,\n      wallet.publicKey,\n      true\n    );\n\n  const userOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n\n  const remainingAccounts = await withRemainingAccountsForUnstake(\n    transaction,\n    connection,\n    wallet,\n    stakeEntryId,\n    stakeEntryData?.parsed.stakeMint\n  );\n\n  transaction.add(\n    unstake(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: stakeEntryId,\n      originalMintId: params.originalMintId,\n      user: wallet.publicKey,\n      stakeEntryOriginalMintTokenAccount: stakeEntryOriginalMintTokenAccountId,\n      userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\n      remainingAccounts,\n    })\n  );\n\n  // claim any rewards deserved\n  if (rewardDistributorData) {\n    await withClaimRewards(transaction, connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: stakeEntryId,\n    });\n  }\n\n  return transaction;\n};\n\nexport const withUpdateStakePool = (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    requiresCollections?: web3.PublicKey[];\n    requiresCreators?: web3.PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n  }\n): [web3.Transaction, web3.PublicKey] => {\n  transaction.add(\n    updateStakePool(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      requiresCreators: params.requiresCreators,\n      requiresCollections: params.requiresCollections,\n      requiresAuthorization: params.requiresAuthorization,\n      overlayText: params.overlayText,\n      imageUri: params.imageUri,\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake,\n      cooldownSeconds: params.cooldownSeconds,\n      minStakeSeconds: params.minStakeSeconds,\n    })\n  );\n  return [transaction, params.stakePoolId];\n};\n\nexport const withUpdateTotalStakeSeconds = (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: web3.PublicKey;\n    lastStaker: web3.PublicKey;\n  }\n): web3.Transaction => {\n  transaction.add(\n    updateTotalStakeSeconds(connection, wallet, {\n      stakEntryId: params.stakeEntryId,\n      lastStaker: params.lastStaker,\n    })\n  );\n  return transaction;\n};\n\nexport const withReturnReceiptMint = async (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: web3.PublicKey;\n  }\n): Promise<web3.Transaction> => {\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, params.stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    throw new Error(`Stake entry ${params.stakeEntryId.toString()} not found`);\n  }\n\n  if (\n    !stakeEntryData.parsed.stakeMintClaimed &&\n    !stakeEntryData.parsed.originalMintClaimed\n  ) {\n    console.log(\"No receipt mint to return\");\n    return transaction;\n  }\n\n  const receiptMint =\n    stakeEntryData.parsed.stakeMint && stakeEntryData.parsed.stakeMintClaimed\n      ? stakeEntryData.parsed.stakeMint\n      : stakeEntryData.parsed.originalMint;\n\n  const tokenManagerId = await tokenManagerAddressFromMint(\n    connection,\n    receiptMint\n  );\n  const tokenManagerData = await tryGetAccount(() =>\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId)\n  );\n\n  if (!tokenManagerData) {\n    return transaction;\n  }\n\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData\n  );\n\n  transaction.add(\n    await returnReceiptMint(connection, wallet, {\n      stakeEntry: params.stakeEntryId,\n      receiptMint: receiptMint,\n      tokenManagerKind: tokenManagerData.parsed.kind,\n      tokenManagerState: tokenManagerData.parsed.state,\n      returnAccounts: remainingAccountsForReturn,\n    })\n  );\n  return transaction;\n};\n\nexport const withCloseStakePool = (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n  }\n): web3.Transaction => {\n  transaction.add(\n    closeStakePool(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n  );\n  return transaction;\n};\n\nexport const withCloseStakeEntry = (\n  transaction: web3.Transaction,\n  connection: web3.Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: web3.PublicKey;\n    stakeEntryId: web3.PublicKey;\n  }\n): web3.Transaction => {\n  transaction.add(\n    closeStakeEntry(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: params.stakeEntryId,\n      authority: wallet.publicKey,\n    })\n  );\n  return transaction;\n};\n"]}