import { __awaiter } from "tslib";
import { AnchorProvider, Program } from "@project-serum/anchor";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { SystemProgram } from "@solana/web3.js";
import { REWARD_DISTRIBUTOR_ADDRESS, REWARD_DISTRIBUTOR_IDL } from ".";
import { REWARD_MANAGER } from "./constants";
import { findRewardDistributorId, findRewardEntryId } from "./pda";
export const initRewardDistributor = (connection, wallet, params) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    return rewardDistributorProgram.instruction.initRewardDistributor({
        rewardAmount: params.rewardAmount,
        rewardDurationSeconds: params.rewardDurationSeconds,
        maxSupply: params.maxSupply || null,
        supply: params.supply || null,
        kind: params.kind,
        defaultMultiplier: params.defaultMultiplier || null,
        multiplierDecimals: params.multiplierDecimals || null,
    }, {
        accounts: {
            rewardDistributor: params.rewardDistributorId,
            stakePool: params.stakePoolId,
            rewardMint: params.rewardMintId,
            authority: wallet.publicKey,
            payer: wallet.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        },
        remainingAccounts: params.remainingAccountsForKind,
    });
};
export const initRewardEntry = (connection, wallet, params) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    return rewardDistributorProgram.instruction.initRewardEntry({
        accounts: {
            rewardEntry: params.rewardEntryId,
            stakeEntry: params.stakeEntryId,
            rewardDistributor: params.rewardDistributor,
            payer: wallet.publicKey,
            systemProgram: SystemProgram.programId,
        },
    });
};
export const claimRewards = (connection, wallet, params) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const [rewardDistributorId] = yield findRewardDistributorId(params.stakePoolId);
    const [rewardEntryId] = yield findRewardEntryId(rewardDistributorId, params.stakeEntryId);
    return rewardDistributorProgram.instruction.claimRewards({
        accounts: {
            rewardEntry: rewardEntryId,
            rewardDistributor: rewardDistributorId,
            stakeEntry: params.stakeEntryId,
            stakePool: params.stakePoolId,
            rewardMint: params.rewardMintId,
            userRewardMintTokenAccount: params.rewardMintTokenAccountId,
            rewardManager: REWARD_MANAGER,
            user: wallet.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        },
        remainingAccounts: params.remainingAccountsForKind,
    });
});
export const closeRewardDistributor = (connection, wallet, params) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const [rewardDistributorId] = yield findRewardDistributorId(params.stakePoolId);
    return rewardDistributorProgram.instruction.closeRewardDistributor({
        accounts: {
            rewardDistributor: rewardDistributorId,
            stakePool: params.stakePoolId,
            rewardMint: params.rewardMintId,
            signer: wallet.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
        },
        remainingAccounts: params.remainingAccountsForKind,
    });
});
export const updateRewardEntry = (connection, wallet, params) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    const [rewardDistributorId] = yield findRewardDistributorId(params.stakePoolId);
    const [rewardEntryId] = yield findRewardEntryId(rewardDistributorId, params.stakeEntryId);
    return rewardDistributorProgram.instruction.updateRewardEntry({
        multiplier: params.multiplier,
    }, {
        accounts: {
            rewardEntry: rewardEntryId,
            rewardDistributor: rewardDistributorId,
            authority: wallet.publicKey,
        },
    });
});
export const closeRewardEntry = (connection, wallet, params) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    return rewardDistributorProgram.instruction.closeRewardEntry({
        accounts: {
            rewardDistributor: params.rewardDistributorId,
            rewardEntry: params.rewardEntryId,
            authority: wallet.publicKey,
        },
    });
};
export const updateRewardDistributor = (connection, wallet, params) => {
    const provider = new AnchorProvider(connection, wallet, {});
    const rewardDistributorProgram = new Program(REWARD_DISTRIBUTOR_IDL, REWARD_DISTRIBUTOR_ADDRESS, provider);
    return rewardDistributorProgram.instruction.updateRewardDistributor({
        defaultMultiplier: params.defaultMultiplier,
        multiplierDecimals: params.multiplierDecimals,
    }, {
        accounts: {
            rewardDistributor: params.rewardDistributorId,
            authority: wallet.publicKey,
        },
    });
};
//# sourceMappingURL=instruction.js.map