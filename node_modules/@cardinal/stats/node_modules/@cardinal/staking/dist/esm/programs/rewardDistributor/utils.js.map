{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/utils.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,OAAO,EACP,oCAAoC,GACrC,MAAM,kBAAkB,CAAC;AAS1B,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEpD,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAC1C,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,mBAA8B,EAC9B,IAA2B,EAC3B,UAAqB,EACG,EAAE;IAC1B,QAAQ,IAAI,EAAE;QACZ,KAAK,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,EAAE,CAAC;SACX;QACD,KAAK,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,yCAAyC,GAC7C,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,UAAU,EACV,mBAAmB,EACnB,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACJ,MAAM,4BAA4B,GAAG,MAAM,OAAO,CAChD,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACF,OAAO;gBACL;oBACE,MAAM,EAAE,yCAAyC;oBACjD,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB;gBACD;oBACE,MAAM,EAAE,4BAA4B;oBACpC,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC;SACH;QACD;YACE,OAAO,EAAE,CAAC;KACb;AACH,CAAC,CAAA,CAAC","sourcesContent":["import {\n  findAta,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport { RewardDistributorKind } from \"./constants\";\n\nexport const withRemainingAccountsForKind = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  rewardDistributorId: PublicKey,\n  kind: RewardDistributorKind,\n  rewardMint: PublicKey\n): Promise<AccountMeta[]> => {\n  switch (kind) {\n    case RewardDistributorKind.Mint: {\n      return [];\n    }\n    case RewardDistributorKind.Treasury: {\n      const rewardDistributorRewardMintTokenAccountId =\n        await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          rewardMint,\n          rewardDistributorId,\n          wallet.publicKey,\n          true\n        );\n      const userRewardMintTokenAccountId = await findAta(\n        rewardMint,\n        wallet.publicKey,\n        true\n      );\n      return [\n        {\n          pubkey: rewardDistributorRewardMintTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: userRewardMintTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n      ];\n    }\n    default:\n      return [];\n  }\n};\n"]}