import { __awaiter } from "tslib";
import { tryGetAccount, withFindOrInitAssociatedTokenAccount, } from "@cardinal/common";
import { tokenManager } from "@cardinal/token-manager/dist/cjs/programs";
import { withRemainingAccountsForReturn } from "@cardinal/token-manager/dist/cjs/programs/tokenManager";
import { tokenManagerAddressFromMint } from "@cardinal/token-manager/dist/cjs/programs/tokenManager/pda";
export const withInvalidate = (transaction, connection, wallet, mintId) => __awaiter(void 0, void 0, void 0, function* () {
    const tokenManagerId = yield tokenManagerAddressFromMint(connection, mintId);
    const tokenManagerData = yield tryGetAccount(() => tokenManager.accounts.getTokenManager(connection, tokenManagerId));
    if (!tokenManagerData)
        return transaction;
    const tokenManagerTokenAccountId = yield withFindOrInitAssociatedTokenAccount(transaction, connection, mintId, tokenManagerId, wallet.publicKey, true);
    const remainingAccountsForReturn = yield withRemainingAccountsForReturn(transaction, connection, wallet, tokenManagerData);
    transaction.add(yield tokenManager.instruction.invalidate(connection, wallet, mintId, tokenManagerId, tokenManagerData.parsed.kind, tokenManagerData.parsed.state, tokenManagerTokenAccountId, tokenManagerData === null || tokenManagerData === void 0 ? void 0 : tokenManagerData.parsed.recipientTokenAccount, remainingAccountsForReturn));
    return transaction;
});
//# sourceMappingURL=token-manager.js.map