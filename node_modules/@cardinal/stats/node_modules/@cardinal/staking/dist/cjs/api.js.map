{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair, Transaction } from \"@solana/web3.js\";\n\nimport type { RewardDistributorKind } from \"./programs/rewardDistributor\";\nimport { findRewardDistributorId } from \"./programs/rewardDistributor/pda\";\nimport {\n  withClaimRewards,\n  withInitRewardDistributor,\n  withInitRewardEntry,\n  withUpdateRewardEntry,\n} from \"./programs/rewardDistributor/transaction\";\nimport { ReceiptType } from \"./programs/stakePool\";\nimport { getStakeEntry, getStakePool } from \"./programs/stakePool/accounts\";\nimport {\n  withAuthorizeStakeEntry,\n  withClaimReceiptMint,\n  withInitStakeEntry,\n  withInitStakeMint,\n  withInitStakePool,\n  withStake,\n  withUnstake,\n  withUpdateTotalStakeSeconds,\n} from \"./programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"./programs/stakePool/utils\";\nimport { getMintSupply } from \"./utils\";\n\n/**\n * Convenience call to create a stake pool\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param requiresCollections - (Optional) List of required collections pubkeys\n * @param requiresCreators - (Optional) List of required creators pubkeys\n * @param requiresAuthorization - (Optional) Boolean to require authorization\n * @param overlayText - (Optional) Text to overlay on receipt mint tokens\n * @param imageUri - (Optional) Image URI for stake pool\n * @param resetOnStake - (Optional) Boolean to reset an entry's total stake seconds on unstake\n * @param cooldownSeconds - (Optional) Number of seconds for token to cool down before returned to the staker\n * @param rewardDistributor - (Optional) Parameters to creat reward distributor\n * @returns\n */\nexport const createStakePool = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    requiresCollections?: PublicKey[];\n    requiresCreators?: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    rewardDistributor?: {\n      rewardMintId: PublicKey;\n      rewardAmount?: BN;\n      rewardDurationSeconds?: BN;\n      rewardDistributorKind?: RewardDistributorKind;\n      maxSupply?: BN;\n      supply?: BN;\n    };\n  }\n): Promise<[Transaction, PublicKey, PublicKey?]> => {\n  const transaction = new Transaction();\n\n  const [, stakePoolId] = await withInitStakePool(\n    transaction,\n    connection,\n    wallet,\n    params\n  );\n  let rewardDistributorId;\n  if (params.rewardDistributor) {\n    [, rewardDistributorId] = await withInitRewardDistributor(\n      transaction,\n      connection,\n      wallet,\n      {\n        stakePoolId: stakePoolId,\n        rewardMintId: params.rewardDistributor.rewardMintId,\n        rewardAmount: params.rewardDistributor.rewardAmount,\n        rewardDurationSeconds: params.rewardDistributor.rewardDurationSeconds,\n        kind: params.rewardDistributor.rewardDistributorKind,\n        maxSupply: params.rewardDistributor.maxSupply,\n        supply: params.rewardDistributor.supply,\n      }\n    );\n  }\n  return [transaction, stakePoolId, rewardDistributorId];\n};\n\n/**\n * Convenience call to create a reward distributor\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param rewardMintId - (Optional) Reward mint id\n * @param rewardAmount - (Optional) Reward amount\n * @param rewardDurationSeconds - (Optional) Reward duration in seconds\n * @param rewardDistributorKind - (Optional) Reward distributor kind Mint or Treasury\n * @param maxSupply - (Optional) Max supply\n * @param supply - (Optional) Supply\n * @returns\n */\nexport const createRewardDistributor = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardMintId: PublicKey;\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    kind?: RewardDistributorKind;\n    maxSupply?: BN;\n    supply?: BN;\n  }\n): Promise<[Transaction, PublicKey]> =>\n  withInitRewardDistributor(new Transaction(), connection, wallet, params);\n\n/**\n * Convenience call to create a stake entry\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool ID\n * @param originalMintId - Original mint ID\n * @param user - (Optional) User pubkey in case the person paying for the transaction and\n * stake entry owner are different\n * @returns\n */\nexport const createStakeEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  return withInitStakeEntry(new Transaction(), connection, wallet, {\n    stakePoolId: params.stakePoolId,\n    originalMintId: params.originalMintId,\n  });\n};\n\n/**\n * Convenience call to create a stake entry\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool ID\n * @param originalMintId - Original mint ID\n * @returns\n */\nexport const initializeRewardEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n    multiplier?: BN;\n  }\n): Promise<Transaction> => {\n  const [stakeEntryId] = await findStakeEntryIdFromMint(\n    connection,\n    wallet.publicKey,\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, stakeEntryId)\n  );\n\n  const transaction = new Transaction();\n  if (!stakeEntryData) {\n    await withInitStakeEntry(transaction, connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      originalMintId: params.originalMintId,\n    });\n  }\n\n  const [rewardDistributorId] = await findRewardDistributorId(\n    params.stakePoolId\n  );\n  await withInitRewardEntry(transaction, connection, wallet, {\n    stakeEntryId: stakeEntryId,\n    rewardDistributorId: rewardDistributorId,\n  });\n\n  await withUpdateRewardEntry(transaction, connection, wallet, {\n    stakePoolId: params.stakePoolId,\n    rewardDistributorId: rewardDistributorId,\n    stakeEntryId: stakeEntryId,\n    multiplier: params.multiplier ?? new BN(1), //TODO default multiplier\n  });\n  return transaction;\n};\n\n/**\n * Convenience call to authorize a stake entry\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool ID\n * @param originalMintId - Original mint ID\n * @returns\n */\nexport const authorizeStakeEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  return withAuthorizeStakeEntry(new Transaction(), connection, wallet, {\n    stakePoolId: params.stakePoolId,\n    originalMintId: params.originalMintId,\n  });\n};\n\n/**\n * Convenience call to create a stake entry and a stake mint\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool ID\n * @param originalMintId - Original mint ID\n * @param amount - (Optional) Amount of tokens to be staked, defaults to 1\n * @returns\n */\nexport const createStakeEntryAndStakeMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey, Keypair | undefined]> => {\n  let transaction = new Transaction();\n  const [stakeEntryId] = await findStakeEntryIdFromMint(\n    connection,\n    wallet.publicKey,\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    transaction = (\n      await createStakeEntry(connection, wallet, {\n        stakePoolId: params.stakePoolId,\n        originalMintId: params.originalMintId,\n      })\n    )[0];\n  }\n\n  let stakeMintKeypair: Keypair | undefined;\n  if (!stakeEntryData?.parsed.stakeMint) {\n    stakeMintKeypair = Keypair.generate();\n    const stakePool = await getStakePool(connection, params.stakePoolId);\n\n    await withInitStakeMint(transaction, connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: stakeEntryId,\n      originalMintId: params.originalMintId,\n      stakeMintKeypair,\n      name: `POOl${stakePool.parsed.identifier.toString()} RECEIPT`,\n      symbol: `POOl${stakePool.parsed.identifier.toString()}`,\n    });\n  }\n\n  return [transaction, stakeEntryId, stakeMintKeypair];\n};\n\n/**\n * Convenience method to claim rewards\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool id\n * @param stakeEntryId - Original mint id\n * @returns\n */\nexport const claimRewards = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const transaction = new Transaction();\n\n  withUpdateTotalStakeSeconds(transaction, connection, wallet, {\n    stakeEntryId: params.stakeEntryId,\n    lastStaker: wallet.publicKey,\n  });\n\n  await withClaimRewards(transaction, connection, wallet, {\n    stakePoolId: params.stakePoolId,\n    stakeEntryId: params.stakeEntryId,\n  });\n\n  return transaction;\n};\n\n/**\n * Convenience method to stake tokens\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool id\n * @param originalMintId - Original mint id\n * @param userOriginalMintTokenAccountId - User's original mint token account id\n * @param receiptType - (Optional) ReceiptType to be received back. If none provided, none will be claimed\n * @param user - (Optional) User pubkey in case the person paying for the transaction and\n * stake entry owner are different\n * @param amount - (Optional) Amount of tokens to be staked, defaults to 1\n * @returns\n */\nexport const stake = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n    userOriginalMintTokenAccountId: PublicKey;\n    receiptType?: ReceiptType;\n    amount?: BN;\n  }\n): Promise<Transaction> => {\n  const supply = await getMintSupply(connection, params.originalMintId);\n  if (\n    (supply.gt(new BN(1)) || params.amount?.gt(new BN(1))) &&\n    params.receiptType === ReceiptType.Original\n  ) {\n    throw new Error(\"Fungible with receipt type Original is not supported yet\");\n  }\n\n  let transaction = new Transaction();\n  const [stakeEntryId] = await findStakeEntryIdFromMint(\n    connection,\n    wallet.publicKey,\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    [transaction] = await createStakeEntry(connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      originalMintId: params.originalMintId,\n    });\n  }\n\n  await withStake(transaction, connection, wallet, {\n    stakePoolId: params.stakePoolId,\n    originalMintId: params.originalMintId,\n    userOriginalMintTokenAccountId: params.userOriginalMintTokenAccountId,\n    amount: params.amount,\n  });\n\n  if (params.receiptType) {\n    const receiptMintId =\n      params.receiptType === ReceiptType.Receipt\n        ? stakeEntryData?.parsed.stakeMint\n        : params.originalMintId;\n    if (!receiptMintId) {\n      throw new Error(\n        \"Stake entry has no stake mint. Initialize stake mint first.\"\n      );\n    }\n    if (\n      stakeEntryData?.parsed.stakeMintClaimed ||\n      stakeEntryData?.parsed.originalMintClaimed\n    ) {\n      throw new Error(\"Receipt has already been claimed.\");\n    }\n\n    await withClaimReceiptMint(transaction, connection, wallet, {\n      stakePoolId: params.stakePoolId,\n      stakeEntryId: stakeEntryId,\n      originalMintId: params.originalMintId,\n      receiptMintId: receiptMintId,\n      receiptType: params.receiptType,\n    });\n  }\n\n  return transaction;\n};\n\n/**\n * Convenience method to unstake tokens\n * @param connection - Connection to use\n * @param wallet - Wallet to use\n * @param stakePoolId - Stake pool ID\n * @param originalMintId - Original mint ID\n * @returns\n */\nexport const unstake = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> =>\n  withUnstake(new Transaction(), connection, wallet, params);\n"]}