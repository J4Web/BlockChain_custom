"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMint = exports.withCreateMint = void 0;
const tslib_1 = require("tslib");
const splToken = tslib_1.__importStar(require("@solana/spl-token"));
const web3_js_1 = require("@solana/web3.js");
const transactions_1 = require("./transactions");
/**
 * Transaction builder for addingn instructions to create a brand new mint
 * @param transaction
 * @param connection
 * @param wallet
 * @param recipient
 * @param mintId
 * @param amount
 * @param freezeAuthority
 * @returns The public key of the associatd token account of the wallet, and the transaction with the relevent instructions added
 */
const withCreateMint = (transaction, connection, wallet, recipient, mintId, amount = 1, freezeAuthority = recipient) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const mintBalanceNeeded = yield splToken.Token.getMinBalanceRentForExemptMint(connection);
    transaction.add(web3_js_1.SystemProgram.createAccount({
        fromPubkey: wallet.publicKey,
        newAccountPubkey: mintId,
        lamports: mintBalanceNeeded,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
        space: splToken.MintLayout.span,
        programId: splToken.TOKEN_PROGRAM_ID,
    }));
    transaction.add(splToken.Token.createInitMintInstruction(splToken.TOKEN_PROGRAM_ID, mintId, 0, wallet.publicKey, freezeAuthority));
    const walletAta = yield (0, transactions_1.withFindOrInitAssociatedTokenAccount)(transaction, connection, mintId, wallet.publicKey, wallet.publicKey);
    if (amount > 0) {
        transaction.add(splToken.Token.createMintToInstruction(splToken.TOKEN_PROGRAM_ID, mintId, walletAta, wallet.publicKey, [], amount));
    }
    return [walletAta, transaction];
});
exports.withCreateMint = withCreateMint;
/**
 * Creates mint, token account, and mints amount to token account
 * @param connection
 * @param creator
 * @returns
 */
const createMint = (connection, creator, recipient, amount = 1, freezeAuthority = recipient) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const mint = yield splToken.Token.createMint(connection, creator, creator.publicKey, freezeAuthority, 0, splToken.TOKEN_PROGRAM_ID);
    const tokenAccount = yield mint.createAssociatedTokenAccount(recipient);
    yield mint.mintTo(tokenAccount, creator.publicKey, [], amount);
    return [tokenAccount, mint];
});
exports.createMint = createMint;
//# sourceMappingURL=mints.js.map