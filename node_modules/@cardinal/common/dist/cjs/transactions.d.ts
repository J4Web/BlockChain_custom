/// <reference types="node" />
import type * as web3 from "@solana/web3.js";
/**
 * Utility function for adding a find or init associated token account instruction to a transaction
 * Useful when using associated token accounts so you can be sure they are created before hand
 * @param transaction
 * @param connection
 * @param mint
 * @param owner
 * @param payer
 * @param allowOwnerOffCurve
 * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found
 */
export declare function withFindOrInitAssociatedTokenAccount(transaction: web3.Transaction, connection: web3.Connection, mint: web3.PublicKey, owner: web3.PublicKey, payer: web3.PublicKey, allowOwnerOffCurve?: boolean): Promise<web3.PublicKey>;
/**
 * Fecthes multiple accounts in batches since there is a limit of
 * 100 accounts per connection.getMultipleAccountsInfo call
 * @param connection
 * @param ids
 * @param config
 * @param batchSize
 * @returns
 */
export declare const getBatchedMultipleAccounts: (connection: web3.Connection, ids: web3.PublicKey[], config?: web3.GetMultipleAccountsConfig | undefined, batchSize?: number) => Promise<(web3.AccountInfo<Buffer | web3.ParsedAccountData> | null)[]>;
//# sourceMappingURL=transactions.d.ts.map